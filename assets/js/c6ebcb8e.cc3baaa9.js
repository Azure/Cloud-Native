"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67784],{26660:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"deploy-application-with-azure-app-service-part-2","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-2","source":"@site/blog-30-days-of-ia-2024/2024-10-10/deploy-application-with-azure-app-service-part-2.md","title":"1.4b Deploy application with Azure App Service Part 2","description":"In this section, we will deploy the back-end and middleware services using Azure App Service. ","date":"2024-10-09T09:03:00.000Z","formattedDate":"October 9, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":8.015,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-10-09T09:03","slug":"deploy-application-with-azure-app-service-part-2","title":"1.4b Deploy application with Azure App Service Part 2","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"In this section, we will deploy the back-end and middleware services using Azure App Service. ","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"nextItem":{"title":"1.4a Deploy application with Azure App Service Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-1"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-2\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"In this section, we will deploy the back-end and middleware services using Azure App Service.\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-2\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"In this section, we will deploy the back-end and middleware services using Azure App Service.\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-2\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\n\\r\\n## 4.b Deploying the Application Using Azure App Service\\r\\n\\r\\nIn the previous blog post, we configured [Azure API Management (APIM)](https://learn.microsoft.com/azure/api-management/api-management-key-concepts?ocid=biafy25h1_30daysofia_webpage_azuremktg) and [Azure Key Vault](https://learn.microsoft.com/azure/key-vault/general/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg) to secure the application and manage secrets. In this section, we will deploy the back-end and middleware services using [Azure App Service](https://learn.microsoft.com/azure/app-service/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). We will leverage the [Azure Web App Maven Plugin](https://github.com/microsoft/azure-maven-plugins/blob/develop/azure-webapp-maven-plugin/README.md) for deployment. If the required App Service instances do not already exist (as discussed in blog **2.b**), the Maven plugin will automatically create them. Otherwise, it will simply deploy the application code to the existing instances.\\r\\n\\r\\nAdditionally, we will deploy the front-end ReactJS application separately to its own Azure App Service. This ensures a complete end-to-end deployment of all application components, enabling seamless communication between the front-end, back-end, and middleware services.\\r\\n\\r\\n## What we will cover:\\r\\n\\r\\n1. Preparing the Application for Deployment\\r\\n2. Configuring Maven for **Azure Web App Deployment**\\r\\n3. Deploying the Back-end and Middleware Services Using **Maven**\\r\\n4. Deploying the Front-end Service\\r\\n5. Verifying the Deployment\\r\\n\\r\\n## Step 1: Preparing the Application for Deployment\\r\\n\\r\\nBefore deploying, ensure that your application is built and packaged correctly. This involves creating a WAR file for the back-end and middleware services.\\r\\n\\r\\n1. **Build the Application:**\\r\\n    - Use the Maven wrapper command to build the application:\\r\\n\\r\\n      `./mvnw clean install`\\r\\n\\r\\n![screenshot of Maven wrapper command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-1.png)\\r\\n\\r\\n2. **Package the Application:**\\r\\n    - After building, package the application to create the necessary WAR file for deployment:\\r\\n\\r\\n      `./mvnw clean package`\\r\\n    - This will create a WAR file in the target directory of your project.\\r\\n\\r\\n![screenshot of Maven clean package command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-2.png)\\r\\n\\r\\n:::info\\r\\n[Ingest your own content](https://aka.ms/demo-bytes/ep13?ocid=biafy25h1_30daysofia_webpage_azuremktg) using the Azure Functions OpenAI extension into a Cosmos DB vector database to enable OpenAI query on your data.\\r\\n:::\\r\\n\\r\\n## Step 2: Configuring the Azure Web App Maven Plugin\\r\\n\\r\\n1. **Update the pom.xml File:**\\r\\n    - Open the `pom.xml` file for both the back-end and middleware services and add the following plugin configuration:\\r\\n\\r\\n```\\r\\n<plugin>\\r\\n    <groupId>com.microsoft.azure</groupId>\\r\\n    <artifactId>azure-webapp-maven-plugin</artifactId>\\r\\n    <version>2.13.0</version>\\r\\n    \x3c!-- Refer: https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Web-App:-Configuration-Details --\x3e\\r\\n    <configuration>\\r\\n        \x3c!-- Optional: If not mentioned, it will pick the default subscription --\x3e\\r\\n        <subscriptionId>03a4877f-5f78-4a6c-af93-d492e85d4e82</subscriptionId>\\r\\n        <resourceGroup>ai-study-con-gen-1</resourceGroup>\\r\\n        <appName>ai-study-backend-service</appName>\\r\\n        <region>eastus</region>\\r\\n        <pricingTier>B1</pricingTier>\\r\\n        <runtime>\\r\\n            <os>Linux</os>\\r\\n            <javaVersion>Java 17</javaVersion>\\r\\n            <webContainer>Tomcat 10.0</webContainer>\\r\\n        </runtime>\\r\\n        <deployment>\\r\\n            <resources>\\r\\n                <resource>\\r\\n                    <directory>${project.basedir}/target</directory>\\r\\n                    <includes>\\r\\n                        <include>*.war</include>\\r\\n                    </includes>\\r\\n                </resource>\\r\\n            </resources>\\r\\n        </deployment>\\r\\n    </configuration>\\r\\n</plugin>\\r\\n```\\r\\n\\r\\n- **Note:** If the `subscriptionId` is not specified, the Maven plugin will use the default subscription configured in your **Azure CLI** or settings. Additionally, if the App Service defined in the `appName` field does not exist (as discussed in **blog 2b**), the Maven plugin will create it automatically during deployment.\\r\\n\\r\\n![screenshot of Maven plugin command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-3.png)\\r\\n\\r\\n## Step 3: Deploying the Back-end and Middleware Services Using Maven\\r\\n\\r\\n1. **Deploy the Back-end Service Using Maven:**\\r\\n    - Use the following Maven wrapper command to deploy the back-end service to Azure App Service:\\r\\n\\r\\n      `./mvnw clean package azure-webapp:deploy`\\r\\n\\r\\n    - This command will either create the App Service instance (if it does not exist) or deploy the WAR file located in the target directory to the existing Azure Web App.\\r\\n\\r\\n![screenshot of Maven wrapper command back-end deployment](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-4.png)\\r\\n\\r\\n![screenshot of Maven wrapper command back-end deployment results](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-5.png)\\r\\n\\r\\n2. **Deploy the Middleware Service Using Maven:**\\r\\n    - Similarly, use the Maven wrapper command for the middleware service:\\r\\n\\r\\n      `./mvnw clean package azure-webapp:deploy`\\r\\n\\r\\n![screenshot of Maven clean package command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-6.png)\\r\\n\\r\\n  - Verify that the middleware service is deployed successfully to the specified Azure App Service instance.\\r\\n\\r\\n![screenshot of Maven wrapper command middleware deployment](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-7.png)\\r\\n\\r\\n![screenshot of Maven wrapper command middleware deployment results](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-8.png)\\r\\n\\r\\n## Step 4: Deploying the Front-end Service\\r\\n\\r\\nIn our earlier blog post [1.2b. Preparing the Azure OpenAI Service resource](https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2), we discussed creating the app services that will host our app. If you didn\u2019t create the front-end service then, you can do it now. \\r\\n\\r\\nIf you already created a front-end app service, proceed to deploy the ZIP file in step [4.2](#deploy-the-zip-file).\\r\\n\\r\\n### 4.1 Create App Service\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. In the Azure portal, go to **App Services**.\\r\\n2. Select **Create and choose the Web App**.\\r\\n3. Select your subscription and resource group, and give the app a name (for example, `frontend-service`).\\r\\n4. Choose the **Runtime stack: Node.js** and **Operating System: Linux**.\\r\\n5. Configure **Deployment** and **Monitoring** options as needed.\\r\\n6. Review and create the App Service.\\r\\n\\r\\n![Web App configuration in Web Apps in the Azure portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-9.png)\\r\\n\\r\\n![Web App deployment in Web Apps in the Azure portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-10.png)\\r\\n\\r\\n#### Azure CLI instructions\\r\\n\\r\\n```\\r\\n# Create Web App for Frontend (ReactJS)\\r\\naz webapp create --resource-group <your-resource-group-name> --plan <plan-name> --name <your-frontend-name> --runtime \\"NODE:22-lts\\"\\r\\n```\\r\\n\\r\\n![Web App frontend deployment command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-11.png)\\r\\n\\r\\n### 4.2 Deploy the ZIP File\\r\\n\\r\\nBuild, package, and deploy the application using the following commands.\\r\\n\\r\\n***Note:** Before deploying code, make sure that you\u2019ve cloned the application source from the GitHub repository to your local machine and then navigate to the \u201cfrontend\u201d folder.*\\r\\n\\r\\n```\\r\\n# Build the application\\r\\nnpm run build\u202f \\r\\n\\r\\n# Conver into ZIP File\\r\\nzip -r build.zip ./build\\r\\n\\r\\n# Deploy the code into Azure App Service\\r\\naz webapp deploy --resource-group <your-resource-group> --name <your-web-app-name> --src-path build.zip --type zip\u202f \\r\\n```\\r\\n\\r\\n![ZIP file deployment command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-12.png)\\r\\n\\r\\n### 4.3 Set the correct startup command for React\\r\\n\\r\\nAzure App Service needs to know how to correctly serve requests to our front-end React app. For static sites, like this React app, you configure the startup command to serve static files and handle routing for single-page applications (SPAs).\\r\\n\\r\\nYou can configure the app service to use the correct React startup command for the app by running the following:\\r\\n\\r\\n```\\r\\naz webapp config set --resource-group <your-resource-group> --name <your-web-app-name> --startup-file \\"pm2 serve /home/site/wwwroot/build --no-daemon --spa\\"\\r\\n```\\r\\n\\r\\n![Configuration code to use the correct React startup command](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-13.png)\\r\\n\\r\\n### 4.4 Clear browser cache\\r\\n\\r\\nYour browser cache may prevent client-side updates from appearing correctly. After deploying the front-end app, clear your browser cache or use an incognito window before accessing the app to make sure that you\'re seeing the latest version.\\r\\n\\r\\n### 4.5 Restart the web app\\r\\n\\r\\nConfiguration changes to the app service may not be applied immediately. To be sure that the app is running correctly, after a successful deployment, restart the web app to make sure that everything is refreshed:\\r\\n\\r\\n```\\r\\naz webapp restart --name <your-web-app-name> --resource-group <your-resource-group>\\r\\n```\\r\\n\\r\\n### 4.6 Verify your deployment\\r\\n\\r\\nOpen the newly deployed web app in a browser, and be sure that it\u2019s running:\\r\\n\\r\\n```\\r\\naz webapp browse --resource-group <your-resource-group> --name <your-webapp-name>\\r\\n```\\r\\n\\r\\n## Step 5: Verifying the Deployment\\r\\n\\r\\n1. **Check Application Functionality**:\\r\\n    - Open the front-end application in a browser and test its functionality to ensure it communicates with the back-end and middleware services as intended.\\r\\n\\r\\n![screenshot of front end application browser view](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-14.png)\\r\\n\\r\\n![another screenshot of front end application browser view](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-15.png)\\r\\n\\r\\n### Cleanup\\r\\n\\r\\nOnce you have finished deploying and testing your application, it\'s essential to clean up the resources to avoid incurring any unnecessary costs. You can delete the Azure Resource Group that contains your resources using either the **Azure CLI** or the **Azure portal**. This will remove all the resources within that group, such as the Azure App Service, Azure API Management, and any other services created in the group.\\r\\n\\r\\n#### Using Azure CLI\\r\\n\\r\\nTo delete the resource group using the Azure CLI, follow these steps:\\r\\n- Open your terminal or Azure Cloud Shell.\\r\\n- Run the following command to delete the resource group:\\r\\n\\r\\n```\\r\\naz group delete --name <resource-group-name> --yes --no-wait\\r\\n```\\r\\n\\r\\n- Replace `<resource-group-name>` with the name of your Azure resource group.\\r\\n- The `--yes` parameter confirms the deletion without a prompt.\\r\\n- The `--no-wait` parameter initiates the deletion and immediately returns control to the terminal, so you don\'t have to wait for the deletion process to complete.\\r\\n\\r\\n#### Using the Azure Portal\\r\\n\\r\\nIf you prefer to delete the resources using the Azure portal, follow these instructions:\u202f \\r\\n\\r\\n- **Navigate to the Azure Portal:** Go to [Azure Portal](http://portal.azure.com/) and sign in with your credentials.\\r\\n- **Select \\"Resource Groups\\":** In the left-hand menu, select **Resource groups**. This will list all the resource groups available in your subscription.\\r\\n- **Find the Resource Group:** Locate the resource group you want to delete (e.g., the resource group that contains your AKS and ACR resources).\\r\\n- **Click on the Resource Group:** Click on the resource group name to open it.\\r\\n- **Delete the Resource Group:** At the top of the resource group page, click on **Delete resource group**.\\r\\n- **Confirm Deletion:** You will be prompted to type the name of the resource group to confirm deletion. Type the name exactly and click on the **Delete** button.\\r\\n\\r\\n![Azure portal view of deleting the Resource group](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4b-16.png)\\r\\n\\r\\nDeleting a resource group in the Azure portal will remove **all resources** associated with it. Be careful when performing this action, as it cannot be undone.\\r\\n\\r\\n:::info\\r\\nLearn more on Technical leaders\u2019 [guide to building intelligent apps](https://aka.ms/AAI_TDMApps_Plan?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nIn this section, we deployed our Java-based back-end and middleware services using the Maven Azure Web App Plugin and verified that they were hosted correctly in Azure App Service. We also deployed the front-end ReactJS application using the deployment center in Azure App Service. These steps ensure that all components are securely hosted and configured for seamless communication.\\r\\n\\r\\n## Additional Resources:\\r\\n\\r\\n- [Azure Web App Maven Plugin Documentation](https://github.com/microsoft/azure-maven-plugins/tree/develop/azure-webapp-maven-plugin)\\r\\n- [Azure App Service Documentation](https://learn.microsoft.com/azure/app-service/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n- [Deploying Java Applications to Azure](https://learn.microsoft.com/azure/app-service/app-service-web-java?ocid=biafy25h1_30daysofia_webpage_azuremktg)"},{"id":"deploy-application-with-azure-app-service-part-1","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-1","source":"@site/blog-30-days-of-ia-2024/2024-10-10/deploy-application-with-azure-app-service-part-1.md","title":"1.4a Deploy application with Azure App Service Part 1","description":"In this section, we will configure Azure API Management (APIM) to define and secure our APIs, and then use Azure Key Vault to securely store and access the required secrets for these APIs. This setup ensures that all API endpoints are protected and that sensitive information is securely managed.","date":"2024-10-09T09:02:00.000Z","formattedDate":"October 9, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":11.07,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-10-09T09:02","slug":"deploy-application-with-azure-app-service-part-1","title":"1.4a Deploy application with Azure App Service Part 1","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"In this section, we will configure Azure API Management (APIM) to define and secure our APIs, and then use Azure Key Vault to securely store and access the required secrets for these APIs. This setup ensures that all API endpoints are protected and that sensitive information is securely managed.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.4b Deploy application with Azure App Service Part 2","permalink":"/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-2"},"nextItem":{"title":"1.3b Build Content Generation App Part 2","permalink":"/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-2"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-1\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"In this section, we will configure Azure API Management (APIM) to define and secure our APIs, and then use Azure Key Vault to securely store and access the required secrets for these APIs. This setup ensures that all API endpoints are protected and that sensitive information is securely managed.\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-1\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"In this section, we will configure Azure API Management (APIM) to define and secure our APIs, and then use Azure Key Vault to securely store and access the required secrets for these APIs. This setup ensures that all API endpoints are protected and that sensitive information is securely managed.\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-1\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\n\\r\\n## Part 1: Securing Application with Azure API Management and Key Vault Integration\\r\\n\\r\\nIn this section, we will configure **[Azure API Management (APIM)](https://learn.microsoft.com/azure/api-management/api-management-key-concepts)** to define and secure our APIs, and then use **[Azure Key Vault](https://learn.microsoft.com/azure/key-vault/general/overview)** to securely store and access the required secrets for these APIs. This setup ensures that all API endpoints are protected and that sensitive information is securely managed.\\r\\n\\r\\n## What we will cover:\\r\\n\\r\\n1. Defining and Adding APIs to **Azure API Management**\\r\\n2. Configuring **Azure Key Vault** and Granting Access\u202f \\r\\n\\r\\n## Introduction\\r\\n\\r\\nIn our previous blog post, we ran the application locally to verify its functionality. Now, we will focus on securing the APIs and managing sensitive data before deploying the application. First, we will define and add the necessary APIs for the back-end and middleware services using **Azure API Management (APIM)**. After configuring APIM, we will set up **Azure Key Vault** to securely store API keys and other sensitive information and grant secure access to these secrets using [Managed Identities](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=portal%2Chttp?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n\\r\\n## Step 1: Defining and Adding APIs to Azure API Management (APIM)\\r\\n\\r\\nWe will start by creating and configuring the APIs for both back-end and middleware services in **Azure API Management (APIM)**. Each service will have its own set of operations that clients can interact with.\u202f\\r\\n\\r\\n### 1.1 Define and Add APIs to APIM\u202f\\r\\n\\r\\nTo add and configure the APIs for both back-end and middleware services, follow these steps:\u202f\\r\\n\\r\\n1. **Navigate to the Azure API Management Service:**\\r\\n    - Go to the **Azure portal**.\\r\\n    - Select your **API Management instance**.\\r\\n    - Click on **APIs** and then select **+ Add API**.\\r\\n\\r\\nThe screenshot shows the navigation to the \\"APIs\\" section in Azure API Management.\\r\\n\\r\\n![a screenshot shows the navigation to the \\"APIs\\" section in Azure API Management](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-1.png)\\r\\n\\r\\n2. **Select the API Type:**\\r\\n\\r\\n    - Choose **HTTP** as the API type since we are exposing HTTP endpoints.\\r\\n\\r\\nThe screenshot shows the \\"Add API\\" button and the selection of the **HTTP** type.\u202f\\r\\n\\r\\n![screenshot shows the \\"Add API\\" button and the selection of the HTTP type](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-2.png)\\r\\n\\r\\n3. **Configure the API Details**:\\r\\n    - For each API, configure the following settings:\\r\\n      - **Display Name:** Name of the API (e.g., `Product API` for back-end, `Generate Content API` for middleware).\\r\\n      - **Name:** A unique identifier for the API (e.g., `products`, `generate-content`).\\r\\n      - **URL:** The relative path for the API endpoint (e.g., `/api/v1/products` for Product List, `/api/v1/generate/content` for content generation).\\r\\n      - **Method:** Choose the HTTP method (e.g., `GET`, `POST`).\\r\\n    - Click **Create** to add the API.\\r\\n\\r\\n![screenshot of HTTP API configuration for backend_service_app_service_URL](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-3.png)\\r\\n\\r\\n![screenshot of HTTP API configuration for backend_service_app_service_URL](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-4.png)\\r\\n\\r\\n![screenshot of HTTP API configuration for middleware_service_app_service_URL](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-5.png)\\r\\n\\r\\n![screenshot of API fields in Azure portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-6.png)\\r\\n\\r\\n  4. **Add Operations for Each API:**\\r\\n\\r\\n      - After the API is created, add operations that define specific actions for the API. Follow these steps for both back-end and middleware services:\\r\\n        - **Back-end Service Operations:**\\r\\n            - `GET /api/v1/products`: Retrieves a list of products.\\r\\n            - `POST /api/v1/products/similar`: Returns similar products based on the request body.\\r\\n        - **Middleware Service Operations:**\\r\\n            - `POST /api/v1/generate/content`: Generates content based on input data.\\r\\n            - `POST /api/v1/generate/embeddings`: Generates embeddings based on input data.\\r\\n      - For each operation, configure the following:\\r\\n          - **Operation Name**: A descriptive name for the operation (e.g., \\"`Get Product List`\\", \\"`Generate Content`\\").\\r\\n          - **Method**: HTTP method (`GET` or `POST`).\\r\\n          - **URL**: Relative URL path.\\r\\n          - **Request Body/Parameters**: Define any request body or parameters required for the operation.\\r\\n      - Click **Save** to add the operation.\\r\\n\\r\\n![screenshot of ai-study-middleware-apim fields in Azure portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-7.png)\\r\\n\\r\\n![screenshot of ai-study-middleware-apim POST fields in Azure portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-8.png)\\r\\n\\r\\n![screenshot of ai-study-backend-apim fields in Azure portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-9.png)\\r\\n\\r\\n  5. **Configure Security Policies for the APIs:**\\r\\n      - After adding the APIs, go to the **Design** tab for each API and add security policies.\\r\\n        - **Header Check Policy**: Validate the presence of an API key.\\r\\n        - **CORS Policy**: Allow only specific origins to access the API endpoints.\\r\\n        - **Rate Limit Policy**: Limit the number of requests a client can make to the API within a specified time frame\u202f \\r\\n\\r\\n#### Header Check Policy:\\r\\n\\r\\n```\\r\\n<check-header name=\\"api-key\\"\\r\\nfailed-check-httpcode=\\"401\\"\\r\\nfailed-check-error-message=\\"API Key Invalid or Not Found\\" ignore-case=\\"true\\">\\r\\n\u202f\u202f\u202f <value>API_ACCESS_KEY</value>\\r\\n</check-header>\\r\\n```\\r\\n\\r\\n#### CORS Policy:\\r\\n\\r\\n```\\r\\n<cors allow-credentials=\\"false\\">\\r\\n    <allowed-origins>\\r\\n        <origin>APP_SERVICE_URL</origin>\\r\\n    </allowed-origins>\\r\\n    <allowed-methods>\\r\\n        <method>GET</method>\\r\\n        <method>POST</method>\\r\\n    </allowed-methods>\\r\\n</cors>\\r\\n```\\r\\n\\r\\n#### Rate Limit Policy:\\r\\n\\r\\n```\\r\\n<rate-limit calls=\\"100\\" renewal-period=\\"60\\" />\\r\\n```\\r\\n\\r\\n- This policy limits each client to 100 requests per minute.\\r\\n\\r\\n![screenshot of code response](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-10.png)\\r\\n\\r\\n  6. **Verify the API Configuration:**\\r\\n      - Once the APIs and operations are defined and secured, verify the configuration by using the **Test** feature in Azure API Management.\u202f \\r\\n      - Make a sample request to each endpoint to ensure that they respond correctly.This testing will occur after the application has been deployed for both the back-end and middleware services. \\r\\n\\r\\n### Azure CLI instructions\\r\\n\\r\\nYou can create and configure all of the APIs used by our back-end and middleware services by saving and running the following script:\\r\\n\\r\\nShell script: Create API and add policy (`create-api.sh`)\\r\\n\\r\\n```\\r\\n#!/bin/bash\u202f \\r\\n\\r\\n# Function to display help\u202f \\r\\nfunction display_help() {\u202f \\r\\n  echo \\"Usage: $0 -g <resource-group> -b <backend-url> -m <middleware-url> -f <frontend-url> -ba <backend-apim-name> -ma <middleware-apim-name> [--backend-api-key <backend-api-key>] [--middleware-api-key <middleware-api-key>]\\"\u202f \\r\\n  echo\u202f \\r\\n  echo \\"Options:\\"\u202f \\r\\n  echo \\"  -g, --resource-group              Azure Resource Group\\"\u202f \\r\\n  echo \\"  -b, --backend-url                 Backend service URL\\"\u202f \\r\\n  echo \\"  -m, --middleware-url              Middleware service URL\\"\u202f \\r\\n  echo \\"  -f, --frontend-url                Frontend service URL\\"\u202f \\r\\n  echo \\"  -ba, --backend-apim-name          Backend API Management name\\"\u202f \\r\\n  echo \\"  -ma, --middleware-apim-name       Middleware API Management name\\"\u202f \\r\\n  echo \\"  --backend-api-key                 (Optional) API Key for Backend service\\"\u202f \\r\\n  echo \\"  --middleware-api-key              (Optional) API Key for Middleware service\\"\u202f \\r\\n  echo \\"  -h, --help                        Display this help message\\"\u202f \\r\\n  exit 0\u202f \\r\\n}\u202f \\r\\n\\r\\n# Function to generate API key if not provided\u202f \\r\\nfunction generate_api_key() {\u202f \\r\\n  echo $(uuidgen)\u202f \\r\\n}\u202f \\r\\n\\r\\n# Parse arguments\u202f \\r\\nwhile [[ \\"$#\\" -gt 0 ]]; do\u202f \\r\\n  case $1 in\u202f \\r\\n    -g|--resource-group) RESOURCE_GROUP=\\"$2\\"; shift ;;\u202f \\r\\n    -b|--backend-url) BACKEND_URL=\\"$2\\"; shift ;;\u202f \\r\\n    -m|--middleware-url) MIDDLEWARE_URL=\\"$2\\"; shift ;;\u202f \\r\\n    -f|--frontend-url) FRONTEND_URL=\\"$2\\"; shift ;;\u202f \\r\\n    -ba|--backend-apim-name) BACKEND_APIM_NAME=\\"$2\\"; shift ;;\u202f \\r\\n    -ma|--middleware-apim-name) MIDDLEWARE_APIM_NAME=\\"$2\\"; shift ;;\u202f \\r\\n    --backend-api-key) BACKEND_API_KEY=\\"$2\\"; shift ;;\u202f \\r\\n    --middleware-api-key) MIDDLEWARE_API_KEY=\\"$2\\"; shift ;;\u202f \\r\\n    -h|--help) display_help ;;\u202f \\r\\n    *) echo \\"Unknown option: $1\\"; display_help ;;\u202f \\r\\n  esac\u202f \\r\\n  shift\u202f \\r\\ndone\u202f \\r\\n\\r\\n# Check for required arguments\u202f \\r\\nif [[ -z \\"$RESOURCE_GROUP\\" || -z \\"$BACKEND_URL\\" || -z \\"$MIDDLEWARE_URL\\" || -z \\"$FRONTEND_URL\\" || -z \\"$BACKEND_APIM_NAME\\" || -z \\"$MIDDLEWARE_APIM_NAME\\" ]]; then\u202f \\r\\n  echo \\"Error: Missing required arguments.\\"\u202f \\r\\n  display_help\u202f \\r\\nfi\u202f \\r\\n\\r\\n# Generate API keys if not provided\u202f \\r\\nBACKEND_API_KEY=${BACKEND_API_KEY:-$(generate_api_key)}\u202f \\r\\nMIDDLEWARE_API_KEY=${MIDDLEWARE_API_KEY:-$(generate_api_key)}\u202f \\r\\n\\r\\necho \\"Using Backend API Key: $BACKEND_API_KEY\\"\u202f \\r\\necho \\"Using Middleware API Key: $MIDDLEWARE_API_KEY\\"\u202f \\r\\n\\r\\n# Create Backend API in APIM\u202f \\r\\naz apim api create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$BACKEND_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id backend-api \\\\\u202f \\r\\n  --path /api/v1/products \\\\\u202f \\r\\n  --display-name \\"Backend Product API\\" \\\\\u202f \\r\\n  --service-url \\"$BACKEND_URL\\" \\\\\u202f \\r\\n  --protocols https\u202f \\r\\n\\r\\n# Add Backend API Operations\u202f \\r\\naz apim api operation create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$BACKEND_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id backend-api \\\\\u202f \\r\\n  --url-template \\"/\\" \\\\\u202f \\r\\n  --method GET \\\\\u202f \\r\\n  --display-name \\"Get Product List\\"\u202f \\r\\n\\r\\naz apim api operation create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$BACKEND_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id backend-api \\\\\u202f \\r\\n  --url-template \\"/similar\\" \\\\\u202f \\r\\n  --method POST \\\\\u202f \\r\\n  --display-name \\"Get Similar Product List\\"\u202f \\r\\n\\r\\n# Apply Backend API Policy (CORS, API Key Validation)\u202f \\r\\naz apim api policy create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$BACKEND_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id backend-api \\\\\u202f \\r\\n  --xml-policy \\"\u202f \\r\\n<inbound>\u202f \\r\\n  <base />\u202f \\r\\n  <cors allow-credentials=\'true\'>\u202f \\r\\n    <allowed-origins>\u202f \\r\\n      <origin>$MIDDLEWARE_URL</origin>\u202f \\r\\n    </allowed-origins>\u202f \\r\\n    <allowed-methods>\u202f \\r\\n      <method>GET</method>\u202f \\r\\n      <method>POST</method>\u202f \\r\\n    </allowed-methods>\u202f \\r\\n    <allowed-headers>\u202f \\r\\n      <header>*</header>\u202f \\r\\n    </allowed-headers>\u202f \\r\\n  </cors>\u202f \\r\\n  <check-header name=\'api-key\' failed-check-httpcode=\'401\' failed-check-error-message=\'API Key Invalid or Not Found\' ignore-case=\'true\'>\u202f \\r\\n    <value>$BACKEND_API_KEY</value>\u202f \\r\\n  </check-header>\u202f \\r\\n</inbound>\\"\u202f \\r\\n\\r\\n# Create Middleware API in APIM\u202f \\r\\naz apim api create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$MIDDLEWARE_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id middleware-api \\\\\u202f \\r\\n  --path /api/v1/generate \\\\\u202f \\r\\n  --display-name \\"Middleware Generate API\\" \\\\\u202f \\r\\n  --service-url \\"$MIDDLEWARE_URL\\" \\\\\u202f \\r\\n  --protocols https\u202f \\r\\n\\r\\n# Add Middleware API Operations\u202f \\r\\naz apim api operation create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$MIDDLEWARE_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id middleware-api \\\\\u202f \\r\\n  --url-template \\"/content\\" \\\\\u202f \\r\\n  --method POST \\\\\u202f \\r\\n  --display-name \\"Generate Content\\"\u202f \\r\\n\\r\\naz apim api operation create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$MIDDLEWARE_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id middleware-api \\\\\u202f \\r\\n  --url-template \\"/embeddings\\" \\\\\u202f \\r\\n  --method POST \\\\\u202f \\r\\n  --display-name \\"Generate Embeddings\\"\u202f \\r\\n\\r\\n# Apply Middleware API Policy (CORS, API Key Validation)\u202f \\r\\naz apim api policy create \\\\\u202f \\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\u202f \\r\\n  --service-name \\"$MIDDLEWARE_APIM_NAME\\" \\\\\u202f \\r\\n  --api-id middleware-api \\\\\u202f \\r\\n  --xml-policy \\"\u202f \\r\\n<inbound>\u202f \\r\\n  <base />\u202f \\r\\n  <cors allow-credentials=\'true\'>\u202f \\r\\n    <allowed-origins>\u202f \\r\\n      <origin>$BACKEND_URL</origin>\u202f \\r\\n      <origin>$FRONTEND_URL</origin>\u202f \\r\\n    </allowed-origins>\u202f \\r\\n    <allowed-methods>\u202f \\r\\n      <method>POST</method>\u202f \\r\\n    </allowed-methods>\u202f \\r\\n    <allowed-headers>\u202f \\r\\n      <header>*</header>\u202f \\r\\n    </allowed-headers>\u202f \\r\\n  </cors>\u202f \\r\\n  <check-header name=\'api-key\' failed-check-httpcode=\'401\' failed-check-error-message=\'API Key Invalid or Not Found\' ignore-case=\'true\'>\u202f \\r\\n    <value>$MIDDLEWARE_API_KEY</value>\u202f \\r\\n  </check-header>\u202f \\r\\n</inbound>\\"\u202f \\r\\n\\r\\necho \\"APIs created and policies applied successfully.\\"\u202f \\r\\n```\\r\\n\\r\\n#### What does the script do?\\r\\n\\r\\nThe script configures the following API rules:\\r\\n \\r\\n- **Allowed origins in CORS:**\\r\\n  - The back-end API allows only the **middleware URL** as the allowed origin.\\r\\n  - The middleware API allows both **back-end URL** and **front-end URL** as allowed origins.\\r\\n- **Updated `check-header` validation:**\\r\\n  - Replaces `validate-header` with `check-header` for API key validation.\\r\\n  - Includes failed-check-httpcode=\\"401\\", `failed-check-error-message=\\"API Key Invalid or Not Found\\"`, and `ignore-case=\\"true\\"`.\\r\\n\\r\\nAfter running the script, we\u2019ll have created the APIs to use and will have applied the `CORS` and `check-header` policies for both back-end and middleware APIs. The script will also generate the required\u202fAPI keys, if you didn\u2019t already provide them.\\r\\n\\r\\n![screenshot of code response script](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-11.png)\\r\\n\\r\\n:::info\\r\\n[Ingest your own content](https://aka.ms/demo-bytes/ep13?ocid=biafy25h1_30daysofia_webpage_azuremktg) using the Azure Functions OpenAI extension into a Cosmos DB vector database to enable OpenAI query on your data.\\r\\n:::\\r\\n\\r\\n## Step 2: Configuring Azure Key Vault and Granting Access\\r\\n\\r\\nOnce the APIs are defined and secured, we need to securely store the API keys and other sensitive information in **Azure Key Vault** and grant the application access to these secrets.\\r\\n\\r\\n### 2.1 Storing API Keys in Key Vault\\r\\n\\r\\n1. Go to your **Azure Key Vault** in the Azure portal.\\r\\n2. Select **Secrets** and create a new secret for each API key (e.g., `BackendServiceAccessKey`, `MiddlewareServiceAccessKey`).\\r\\n3. Update the values with the API keys configured in APIM.\\r\\n\\r\\n### 2.2 Granting Access to Key Vault via Managed Identities\\r\\n\\r\\n1. To allow your App Service to access the secrets in Key Vault, enable the **System-assigned Managed Identity:**\\r\\n    - Navigate to your **Azure App Service**.\\r\\n    - Under the **Identity** section, enable \\"System-assigned Managed Identity\\".\\r\\n\\r\\n![screenshot of fields under Identity in Azure App Service](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-12.png)\\r\\n\\r\\n2. In the **Azure Key Vault**, navigate to **Access policies**.\\r\\n3. Create a new access policy using the \\"Secret Management\\" template.\\r\\n4. Select the Managed Identity of your App Service as the principal and grant it **Get** and **List** permissions for secrets.\\r\\n\\r\\n![screenshot of access configuration](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-13.png)\\r\\n\\r\\n![screenshot of access policy](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-14.png)\\r\\n\\r\\n![screenshot of access policy permissions when creating a new policy](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-15.png)\\r\\n\\r\\n![screenshot of access policy principal selections when creating a new policy](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-16.png)\\r\\n\\r\\n![screenshot of access policy review screen when creating a new policy](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-17.png)\\r\\n\\r\\n![screenshot of access policy once created](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-18.png)\\r\\n\\r\\n#### Azure CLI instructions\\r\\n\\r\\nRun the following commands:\\r\\n\\r\\n```\\r\\n# Get the Managed Identity\'s client ID\\r\\nIDENTITY_CLIENT_ID=$(az webapp identity show --resource-group <resource-group-name> --name <app-service-name> --query principalId --output tsv)\\r\\n\\r\\n# Grant access to the Key Vault for the Managed Identity\\r\\naz keyvault set-policy --name <key-vault-name> --secret-permissions get list --object-id $IDENTITY_CLIENT_ID\\r\\n```\\r\\n\\r\\n### 2.3 Configure Environment Variables in App Service\\r\\n\\r\\n1. **Navigate to your App Service** in the Azure portal:\\r\\n    - Go to the **Azure portal** and select your **App Service**.\\r\\n2. **Open Configuration Settings:**\\r\\n    - In the left-hand menu, select **Configuration** under the **Settings** section.\\r\\n\\r\\n![screenshot of App Service Configuration Settings in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-19.png)\\r\\n\\r\\n3. **Add a New Application Setting**\\r\\n- In the **Application settings** tab, click on **+ New application setting**.\\r\\n- Enter the following details:\\r\\n   - **Name**: `AZURE_KEYVAULT_URL`\\r\\n   - **Value**: `https://<your-key-vault-name>.vault.azure.net/`\\r\\n4. **Save the Changes**:\\r\\n   - After adding the setting, click **Save** at the top to apply the changes.\\r\\n\\r\\n![screenshot of the new application setting after saving it in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-10-10/1-4a-20.png)\\r\\n\\r\\n5. **Restart the App Service** (if necessary):\\r\\n   - You may need to restart your App Service for the changes to take effect. You can do this by going to the **Overview** section and clicking on the **Restart** button.\\r\\n\\r\\n#### Azure CLI instructions\\r\\n\\r\\nRun the following command:\\r\\n\\r\\n```\\r\\n# Set the environment variable in the App Service\\r\\n\\r\\naz webapp config appsettings set --resource-group <resource-group-name> --name <app-service-name> --settings AZURE_KEYVAULT_URL=https://<key-vault-name>.vault.azure.net/\\r\\n```\\r\\n\\r\\n:::info\\r\\nJoin live experts to dive into [operational excellence with AKS](https://aka.ms/learn-live/ep3?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Conclusion \\r\\n\\r\\nIn this section, we created and configured the APIs for both back-end and middleware services using **Azure API Management (APIM)**. We secured the APIs using CORS policies, header checks, and rate limits. After configuring APIM, we securely stored the API keys and other sensitive data in Azure Key Vault and granted access using Managed Identity. This setup ensures that all components interact securely and that sensitive information is managed properly.\\r\\n\\r\\nIn the next section, we will deploy the application using Azure App Service, ensuring it utilizes the secure configurations established here.\\r\\n\\r\\n## Additional Resources\\r\\n\\r\\n- [Understanding Azure API Management](https://learn.microsoft.com/azure/api-management/api-management-key-concepts?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n- [Getting Started with Azure Key Vault](https://learn.microsoft.com/azure/key-vault/general/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n- [Configuring Managed Identities in Azure](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=portal%2Chttp?ocid=biafy25h1_30daysofia_webpage_azuremktg)"},{"id":"build-content-generation-app-part-2","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-2","source":"@site/blog-30-days-of-ia-2024/2024-10-08/build-content-generation-app-part-2.md","title":"1.3b Build Content Generation App Part 2","description":"Learn how to make the final configuration updates and run our example application for the first time.","date":"2024-10-09T09:01:00.000Z","formattedDate":"October 9, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":8.905,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-10-09T09:01","slug":"build-content-generation-app-part-2","title":"1.3b Build Content Generation App Part 2","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Learn how to make the final configuration updates and run our example application for the first time.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.4a Deploy application with Azure App Service Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/deploy-application-with-azure-app-service-part-1"},"nextItem":{"title":"1.3a Build Content Generation App Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-1"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/build-content-generation-app-part-2\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-2\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-2\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\n\\r\\n## Part 2: Build and run the application locally\\r\\n\\r\\nLearn how to make the final configuration updates and run our example application for the first time.\\r\\n\\r\\n## What we cover:\\r\\n\\r\\n- Adding required connection strings and other secrets to Azure Key Vault\\r\\n- Starting the back-end service locally\\r\\n- Starting the middleware service locally\\r\\n- Starting the front-end service locally\\r\\n- Managing application secrets when transitioning from local to Azure Kubernetes Service (AKS) or Azure App Service deployments\u202f \\r\\n\\r\\n## Introduction\\r\\n\\r\\nThroughout the last three days of topics, we\u2019ve been working on getting your local dev environment prepared to run our example app and on creating and configuring the Azure services that the app depends on. In our previous topic, we completed this prep work by cloning our example app code from GitHub and then getting our Azure Key Vault configured.\\r\\n\\r\\nNow we\u2019re ready to run the application for the first time in your local development environment. In today\u2019s post, we walk through adding your app connection secrets to the key vault and finally running the app\u2019s back-end, middleware, and front-end service components.\\r\\n\\r\\n## Step 1. Add key vault secrets.\\r\\n\\r\\nAfter access is granted, add the following secrets into **Azure Key Vault** to securely configure the back-end and middleware services.\\r\\n\\r\\n**Back-end service secret keys:**\\r\\n\\r\\n- `AzureCosmosConnectionString`\\r\\n- `MongoDBDatabaseName`\\r\\n- `AzureStorageConnectionString`\\r\\n- `StorageContainerName`\\r\\n- `MiddlewareServiceBaseUrl`\\r\\n- `MiddlewareServiceProductEmbeddingEndpoint`\\r\\n- `MiddlewareServiceAccessKey`\\r\\n\\r\\n**Middleware service secret keys:**\\r\\n\\r\\n- `BackendServiceBaseUrl`\\r\\n- `BackendServiceProductEndpoint`\\r\\n- `BackendServiceSimilarProductEndpoint`\\r\\n- `BackendServiceAccessKey`\\r\\n- `AzureOpenAiEndpointUrl`\\r\\n- `AzureOpenAiAccessKey`\\r\\n- `AzureOpenAiEmbeddingEndpointUrl`\\r\\n\\r\\n### CLI instructions\u202f \\r\\n\\r\\nUse the following script when performing these instructions:\u202f \\r\\n\\r\\nShell script: `add-secrets-to-keyvault.sh`\\r\\n\\r\\n```\\r\\n#!/bin/bash\\r\\n\\r\\n# Function to display usage information\\r\\nusage() {\\r\\n  echo \\"Usage: $0 --keyvault-name <keyvault-name> --resource-group <resource-group> --cosmosdb-name <cosmos-mongo> --mongodb-name <dbname> --storage <sa-name> --storage-container <container-name> --openai-name <openai-details> --openai-completion-model <ai-service-completion-deployment-name> --openai-embedding-model <embedding-deployment-name> [options]\\"\\r\\n  echo\\r\\n  echo \\"Options:\\"\\r\\n  echo \\"  --keyvault-name                     Azure Key Vault name (required)\\"\\r\\n  echo \\"  --resource-group                    Azure resource group name (required)\\"\\r\\n  echo \\"  --cosmosdb-name                     CosmosDB name (required)\\"\\r\\n  echo \\"  --mongodb-name                      MongoDB database name (default: ContentGenerator)\\"\\r\\n  echo \\"  --storage                           Azure storage account name (required)\\"\\r\\n  echo \\"  --storage-container                 Storage container name (default: contentgen)\\"\\r\\n  echo \\"  --openai-name                       Azure OpenAI service name (required)\\"\\r\\n  echo \\"  --openai-completion-model           OpenAI chat completion deployment name (default: gpt-4o)\\"\\r\\n  echo \\"  --openai-embedding-model            OpenAI embedding deployment name (default: text-embedding-3-small)\\"\\r\\n  echo \\"  --middleware-base-url               Middleware service base URL (default: http://localhost:8081)\\"\\r\\n  echo \\"  --middleware-product-embedding-endpoint Middleware product embedding endpoint (default: /api/v1/generate/embeddings)\\"\\r\\n  echo \\"  --backend-base-url                  Backend service base URL (default: http://localhost:8080)\\"\\r\\n  echo \\"  --backend-product-endpoint          Backend product endpoint (default: /api/v1/products)\\"\\r\\n  echo \\"  --backend-similar-product-endpoint  Backend similar product endpoint (default: /api/v1/products/similar)\\"\\r\\n  echo \\"  -h, --help                          Show this help message and exit\\"\\r\\n  exit 1\\r\\n}\\r\\n\\r\\n# Check for help flag\\r\\nif [[ \\"$1\\" == \\"-h\\" || \\"$1\\" == \\"--help\\" ]]; then\\r\\n  usage\\r\\nfi\\r\\n\\r\\n# Function to set or update secrets in Azure Key Vault\\r\\nset_or_update_secret() {\\r\\n  local secret_name=\\"$1\\"\\r\\n  local secret_value=\\"$2\\"\\r\\n\\r\\n  echo \\"Checking secret: $secret_name\\"\\r\\n\\r\\n  # Check if the secret already exists in the Key Vault\\r\\n  secret_exists=$(az keyvault secret show --vault-name \\"$KEYVAULT_NAME\\" --name \\"$secret_name\\" --query \\"id\\" --output tsv 2>/dev/null)\\r\\n\\r\\n  if [[ -n \\"$secret_exists\\" ]]; then\\r\\n    echo \\"Secret $secret_name already exists. Updating it...\\"\\r\\n  else\\r\\n    echo \\"Secret $secret_name does not exist. Creating it...\\"\\r\\n  fi\\r\\n\\r\\n  # Add the Azure CLI command to set or update the secret\\r\\n  az keyvault secret set --vault-name \\"$KEYVAULT_NAME\\" --name \\"$secret_name\\" --value \\"$secret_value\\" >/dev/null\\r\\n}\\r\\n\\r\\n# Default values\\r\\nMONGO_DB_DATABASE_NAME=\\"ContentGenerator\\"\\r\\nSTORAGE_CONTAINER_NAME=\\"contentgen\\"\\r\\nOPENAI_COMPLETION_MODEL=\\"gpt-4o\\"\\r\\nOPENAI_EMBEDDING_MODEL=\\"text-embedding-3-small\\"\\r\\nBACKEND_BASE_URL=\\"http://localhost:8080\\"\\r\\nBACKEND_PRODUCT_ENDPOINT=\\"/api/v1/products\\"\\r\\nBACKEND_SIMILAR_PRODUCT_ENDPOINT=\\"/api/v1/products/similar\\"\\r\\nMIDDLEWARE_BASE_URL=\\"http://localhost:8081\\"\\r\\nMIDDLEWARE_PRODUCT_EMBEDDING_ENDPOINT=\\"/api/v1/generate/embeddings\\"\\r\\n\\r\\n# Parse arguments\\r\\nwhile [[ $# -gt 0 ]]; do\\r\\n  case \\"$1\\" in\\r\\n    --keyvault-name)\\r\\n      KEYVAULT_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --resource-group)\\r\\n      RESOURCE_GROUP=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --cosmosdb-name)\\r\\n      COSMOSDB_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --mongodb-name)\\r\\n      MONGO_DB_DATABASE_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --storage)\\r\\n      STORAGE_ACCOUNT_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --storage-container)\\r\\n      STORAGE_CONTAINER_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --openai-name)\\r\\n      OPENAI_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --openai-completion-model)\\r\\n      OPENAI_COMPLETION_MODEL=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --openai-embedding-model)\\r\\n      OPENAI_EMBEDDING_MODEL=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --middleware-base-url)\\r\\n      MIDDLEWARE_BASE_URL=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --middleware-product-embedding-endpoint)\\r\\n      MIDDLEWARE_PRODUCT_EMBEDDING_ENDPOINT=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --backend-base-url)\\r\\n      BACKEND_BASE_URL=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --backend-product-endpoint)\\r\\n      BACKEND_PRODUCT_ENDPOINT=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --backend-similar-product-endpoint)\\r\\n      BACKEND_SIMILAR_PRODUCT_ENDPOINT=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    *)\\r\\n      echo \\"Unknown option: $1\\"\\r\\n      usage\\r\\n      ;;\\r\\n  esac\\r\\ndone\\r\\n\\r\\n# Validate required arguments\\r\\nif [[ -z \\"$KEYVAULT_NAME\\" || -z \\"$RESOURCE_GROUP\\" || -z \\"$COSMOSDB_NAME\\" || -z \\"$STORAGE_ACCOUNT_NAME\\" || -z \\"$OPENAI_NAME\\" || -z \\"$OPENAI_EMBEDDING_MODEL\\" ]]; then\\r\\n  echo \\"Error: Missing required arguments.\\"\\r\\n  usage\\r\\nfi\\r\\n\\r\\n# Generate UUIDs for access keys\\r\\nBACKEND_SERVICE_ACCESS_KEY=$(uuidgen)\\r\\nMIDDLEWARE_SERVICE_ACCESS_KEY=$(uuidgen)\\r\\n\\r\\n# Fetch Azure OpenAI service endpoint and keys using az cli\\r\\nAZURE_OPENAI_ENDPOINT_URL=$(az cognitiveservices account show --name \\"$OPENAI_NAME\\" --resource-group \\"$RESOURCE_GROUP\\" --query \\"properties.endpoint\\" --output tsv)\\r\\nAZURE_OPENAI_ACCESS_KEY=$(az cognitiveservices account keys list --name \\"$OPENAI_NAME\\" --resource-group \\"$RESOURCE_GROUP\\" --query \\"key1\\" --output tsv)\\r\\n\\r\\n# Construct the completion and embedding endpoints dynamically\\r\\nAZURE_OPENAI_COMPLETION_ENDPOINT_URL=\\"$AZURE_OPENAI_ENDPOINT_URL/openai/deployments/$OPENAI_COMPLETION_MODEL/chat/completions?api-version=2023-03-15-preview\\"\\r\\nAZURE_OPENAI_EMBEDDING_ENDPOINT_URL=\\"$AZURE_OPENAI_ENDPOINT_URL/openai/deployments/$OPENAI_EMBEDDING_MODEL/embeddings?api-version=2023-05-15\\"\\r\\n\\r\\n# Retrieve other secrets using Azure CLI\\r\\nAZURE_COSMOS_CONNECTION_STRING=$(az cosmosdb keys list --resource-group \\"$RESOURCE_GROUP\\" --name \\"$COSMOSDB_NAME\\" --type connection-strings --query \\"connectionStrings[0].connectionString\\" --output tsv)\\r\\nAZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string --resource-group \\"$RESOURCE_GROUP\\" --name \\"$STORAGE_ACCOUNT_NAME\\" --query connectionString --output tsv)\\r\\n\\r\\n# List of secrets to set\\r\\nsecrets=(\\r\\n  \\"BackendServiceBaseUrl\\" \\"$BACKEND_BASE_URL\\"\\r\\n  \\"BackendServiceProductEndpoint\\" \\"$BACKEND_PRODUCT_ENDPOINT\\"\\r\\n  \\"BackendServiceSimilarProductEndpoint\\" \\"$BACKEND_SIMILAR_PRODUCT_ENDPOINT\\"\\r\\n  \\"BackendServiceAccessKey\\" \\"$BACKEND_SERVICE_ACCESS_KEY\\"\\r\\n  \\"AzureOpenAiEndpointUrl\\" \\"$AZURE_OPENAI_ENDPOINT_URL\\"\\r\\n  \\"AzureOpenAiAccessKey\\" \\"$AZURE_OPENAI_ACCESS_KEY\\"\\r\\n  \\"AzureOpenAiCompletionEndpointUrl\\" \\"$AZURE_OPENAI_COMPLETION_ENDPOINT_URL\\"\\r\\n  \\"AzureOpenAiEmbeddingEndpointUrl\\" \\"$AZURE_OPENAI_EMBEDDING_ENDPOINT_URL\\"\\r\\n  \\"MiddlewareServiceBaseUrl\\" \\"$MIDDLEWARE_BASE_URL\\"\\r\\n  \\"MiddlewareServiceProductEmbeddingEndpoint\\" \\"$MIDDLEWARE_PRODUCT_EMBEDDING_ENDPOINT\\"\\r\\n  \\"MiddlewareServiceAccessKey\\" \\"$MIDDLEWARE_SERVICE_ACCESS_KEY\\"\\r\\n  \\"AzureCosmosConnectionString\\" \\"$AZURE_COSMOS_CONNECTION_STRING\\"\\r\\n  \\"MongoDBDatabaseName\\" \\"$MONGO_DB_DATABASE_NAME\\"\\r\\n  \\"AzureStorageConnectionString\\" \\"$AZURE_STORAGE_CONNECTION_STRING\\"\\r\\n  \\"StorageContainerName\\" \\"$STORAGE_CONTAINER_NAME\\"\\r\\n)\\r\\n\\r\\n# Loop through the array and set or update each secret\\r\\nfor ((i=0; i<${#secrets[@]}; i+=2)); do\\r\\n  secret_name=\\"${secrets[$i]}\\"\\r\\n  secret_value=\\"${secrets[$i+1]}\\"\\r\\n\\r\\n  # Call the set_or_update_secret function\\r\\n  set_or_update_secret \\"$secret_name\\" \\"$secret_value\\"\\r\\ndone\\r\\n\\r\\necho \\"Secrets have been set or updated successfully.\\" \\r\\n```\\r\\n\\r\\n### Script overview\u202f \\r\\n\\r\\n#### Required arguments\\r\\n\\r\\nThese arguments are mandatory for the script to run successfully:\\r\\n\\r\\n- `--keyvault-name <keyvault-name>`: The name of the Azure key vault where secrets will be set or updated.\\r\\n\\r\\n- `--resource-group <resource-group>`: The Azure resource group that contains the resources (for example, Key Vault, Azure Cosmos DB) to be used.\\r\\n\\r\\n- `--cosmosdb-name <cosmos-mongo>`: The name of the Azure Cosmos DB instance (MongoDB API).\\r\\n\\r\\n- `--storage <sa-name>`: The name of the Azure Storage account used for storing data.\\r\\n\\r\\n- `--openai-name <openai-details>`: The name of the Azure OpenAI Service instance.\\r\\n\\r\\n- `--openai-embedding-model <embedding-deployment-name>`: The deployment name for the Azure OpenAI embedding model.\\r\\n\\r\\n\\r\\n#### Optional arguments\\r\\n\\r\\nThese arguments have default values and can be overridden if needed:\\r\\n\\r\\n- `--mongodb-name <dbname>`: Name of the MongoDB database.  \\r\\n  **Default value**: `ContentGenerator`\\r\\n\\r\\n- `--storage-container <container-name>`: Name of the storage container within the Azure Storage account.  \\r\\n  **Default value**: `contentgen`\\r\\n\\r\\n- `--openai-completion-model <ai-service-completion-deployment-name>`: Deployment name for the Azure OpenAI chat completion model.  \\r\\n  **Default value**: `gpt-4o`\\r\\n\\r\\n- `--middleware-base-url <url>`: Base URL for the middleware service.  \\r\\n  **Default value**: `http://localhost:8081`\\r\\n\\r\\n- `--middleware-product-embedding-endpoint <endpoint>`: Endpoint for the product embedding service in the middleware.  \\r\\n  **Default value**: `/api/v1/generate/embeddings`\\r\\n\\r\\n- `--backend-base-url <url>`: Base URL for the back-end service.  \\r\\n  **Default value**: `http://localhost:8080`\\r\\n\\r\\n- `--backend-product-endpoint <endpoint>`: Endpoint for accessing product data in the back-end service.  \\r\\n  **Default value**: `/api/v1/products`\\r\\n\\r\\n- `--backend-similar-product-endpoint <endpoint>`: Endpoint for accessing similar product data in the back-end service.  \\r\\n  **Default value**: `/api/v1/products/similar`\\r\\n\\r\\n\\r\\nSave this script, and then run it using the following command:\\r\\n\\r\\n```\\r\\n./add-secrets-to-keyvault.sh \\\\\\r\\n    --keyvault-name <keyvault-name> \\\\\\r\\n    --resource-group <resource-group> \\\\\\r\\n    --cosmosdb-name <cosmos-mongo> \\\\\\r\\n    --mongodb-name <dbname> \\\\\\r\\n    --storage <sa-name> \\\\\\r\\n    --storage-container <container-name> \\\\\\r\\n    --openai-name <openai-details> \\\\\\r\\n    --openai-completion-model <ai-service-completion-deployment-name> \\\\\\r\\n    --openai-embedding-model <embedding-deployment-name>\\r\\n```\\r\\n\\r\\n![Code lines: add-secrets-to-keyvault.sh](../../static/img/30-days-of-ia-2024/blogs/2024-10-08/1-3b-1.png)\\r\\n\\r\\n:::info\\r\\n[Ingest your own content](https://aka.ms/demo-bytes/ep13?ocid=biafy25h1_30daysofia_webpage_azuremktg) using the Azure Functions OpenAI extension into a Cosmos DB vector database to enable OpenAI query on your data.\\r\\n:::\\r\\n\\r\\n## Step 2. Run the back-end service locally\\r\\n\\r\\n1. **Navigate to the back-end folder**. In your terminal, navigate to the back-end folder in the cloned repo.\\r\\n\\r\\n2. **Open the folder in your IDE**. Use [Visual Studio Code](https://code.visualstudio.com/) or [IntelliJ IDEA](https://www.jetbrains.com/idea/) to open the back-end folder.\\r\\n\\r\\n3. **Add Key Vault environment variables**. Be sure that the following variable is set in your local environment:\\r\\n   - `AZURE_KEYVAULT_URI`: The URL of your Key Vault.\\r\\n\\r\\n4. **Run the back-end service**. To start the back-end service, run the following command:\\r\\n\\r\\n   ```\\r\\n   ./mvnw spring-boot:run\\r\\n   ```\\r\\n\\r\\n    ![image of the back-end service command running](../../static/img/30-days-of-ia-2024/blogs/2024-10-08/1-3b-2.png)\\r\\n\\r\\n    The back-end service will run on port **8080**.\\r\\n\\r\\n## Step 3: Run the middleware service locally\\r\\n\\r\\n1. **Navigate to the middleware folder**. Open another terminal window, and navigate to the middleware folder.\\r\\n\\r\\n2. **Change the port for middleware**. Open the `application.properties` file in the middleware folder, and change the default port to `8081` by adding:\\r\\n\\r\\n      ![Code in application properties file](../../static/img/30-days-of-ia-2024/blogs/2024-10-08/1-3b-3-v2.png)\\r\\n\\r\\n3. **Add key vault environment variables.** Set the environment variables as itemized `(AZURE_KEYVAULT_URI)`.\u202f\\r\\n\\r\\n4. **Run the middleware service.** Use the following command:\\r\\n\\r\\n    ```\\r\\n    ./mvnw spring-boot:run\u202f \\r\\n    ```\\r\\n\\r\\n      ![Results of running  mvnw spring boot run](../../static/img/30-days-of-ia-2024/blogs/2024-10-08/1-3b-4.png)\\r\\n\\r\\n  The middleware will run on port **8081**.\\r\\n\\r\\n## Step 4: Run the front-end service locally\\r\\n\\r\\n1. **Navigate to the front-end folder**. Go to the front-end folder in your cloned repo.\\r\\n\\r\\n2. **Copy the `.env.example file`**. Copy the `.env.example` file, and rename it to `.env`:\\r\\n\\r\\n   ```\\r\\n   cp .env.example .env\\r\\n   ```\\r\\n\\r\\n3. Configure the `.env file`. Update the following variables in the `.env` file:\\r\\n\\r\\n    ![List of variables to update in the env file.](../../static/img/30-days-of-ia-2024/blogs/2024-10-08/1-3b-5.png)\\r\\n\\r\\n4. **Install dependencies.** Run npm install or yarn install to install the necessary front-end dependencies.\u202f \\r\\n\\r\\n5. **Run the front-end service.** Start the front-end service using one of the following commands:\\r\\n\\r\\n    ```\\r\\n    npm start\u202f \\r\\n    ```\\r\\n\\r\\n    or\\r\\n\\r\\n    ```\\r\\n    yarn start\u202f \\r\\n    ```\\r\\n\\r\\n**Note:** At this point, you\u2019re prompted to sign in with your Microsoft Entra ID credentials. The front end authenticates the user with Microsoft Entra ID (user identity). After you sign in, the following screen appears.\\r\\n\\r\\n![App Modernization Content Generation Sample screen that say Effortless Marketing Content at Your Fingertips.](../../static/img/30-days-of-ia-2024/blogs/2024-10-08/1-3b-6.png)\\r\\n\\r\\nThe front end runs on `http://localhost:3000`.\\r\\n\\r\\n### Local vs. deployment environments\\r\\n\\r\\nFor local development, you can set the **endpoint URLs** directly in `.env` or `application.properties` files. However, after deployment to **AKS** or **App Service**, you need to update the **Key Vault secrets** to reflect the public-facing URLs and credentials:\\r\\n\\r\\n- **Back-end and middleware URLs:** Replace `localhost` with the public URL of your deployed services.\\r\\n\\r\\n- **API Management:** When deployed, make sure that API keys and exposed API URLs are managed through **API Management**.\\r\\n\\r\\nWe\u2019ll cover the details of deploying to AKS or App Service and using API Management in subsequent topics.\\r\\n\\r\\n:::info\\r\\nLearn more on Technical leaders\u2019 [guide to building intelligent apps](https://aka.ms/AAI_TDMApps_Plan?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Summary\\r\\n\\r\\nIn today\u2019s topic, we finished configuring the app\u2019s connection strings and other secrets in Azure Key Vault. Then we got the back-end, middleware, and front-end services running on your local machine, allowing you to test the app in your browser.  \\r\\n\\r\\nNow that you\u2019ve got a running app, our next topic will cover deploying it to Azure using either **Azure Kubernetes Service (AKS)** or **Azure App Service**, along with configuring **Azure API Management** to help ensure that your APIs are secured using key-based authentication."},{"id":"build-content-generation-app-part-1","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-1","source":"@site/blog-30-days-of-ia-2024/2024-10-03/build-content-generation-app-part-1.md","title":"1.3a Build Content Generation App Part 1","description":"Learn how to download our example app code, and prepare to run it in your local dev environment.","date":"2024-10-09T09:00:00.000Z","formattedDate":"October 9, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":5.175,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-10-09T09:00","slug":"build-content-generation-app-part-1","title":"1.3a Build Content Generation App Part 1","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Learn how to download our example app code, and prepare to run it in your local dev environment.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.3b Build Content Generation App Part 2","permalink":"/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-2"},"nextItem":{"title":"1.2b Setting Up Your Development Environment Part 2","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/build-content-generation-app-part-1\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Learn how to download our example app code, and prepare to run it in your local dev environment.\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-1\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Learn how to download our example app code, and prepare to run it in your local dev environment.\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-1\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\n\\r\\n## Part 1: Download and configure app code\\r\\n\\r\\nLearn how to download our example app code, and prepare to run it in your local dev environment.\\r\\n\\r\\n## What we cover:\\r\\n\\r\\n- Downloading the app code from GitHub to your local machine\\r\\n- Setting up app secrets and connecting them to Azure Key Vault\\r\\n\\r\\n## Introduction\\r\\n\\r\\nIn the previous topic, we finished setting up the local tools and Azure services we need to run our app in your local development environment. In this blog, we walk you through getting the app code set up on your dev machine. This involves cloning the app code\u2019s GitHub repository to your local machine. In addition, we\u2019ll securely configure the app\u2019s connection strings and other secrets using a key vault that will be used in both your local environment and in the Azure Kubernetes Service (AKS) or Azure App Service hosting environments that you\u2019ll use when deploying to Azure.\\r\\n\\r\\n## System Architecture Diagram \u2013 Local Setup\\r\\n\\r\\nBefore diving into the setup and configuration details, let\'s take a look at the overall architecture of the Content Generation System. The architecture diagram below illustrates the key components and their interactions, including the backend, middleware, and frontend services, as well as how they integrate with Azure Key Vault and other Azure services.\\r\\n\\r\\n![architecture diagram of the key components and their interactions, including the backend, middleware, and frontend services, as well as how they integrate with Azure Key Vault and other Azure services](../../static/img/30-days-of-ia-2024/blogs/2024-10-03/1-3a-1.png)\\r\\n\\r\\n**In the diagram:**\u202f \\r\\n\\r\\n- **Frontend Service:** Users interact with this component through the web interface. It communicates with the backend and middleware services.\\r\\n- **Middleware Service:** Acts as an intermediary, handling requests between the frontend and backend services.\\r\\n- **Backend Service:** Contains the core logic and data access layers for the content generation functionality.\\r\\n- **Azure Key Vault:** Stores and manages secrets used by the services for secure access to configuration and credentials.\\r\\n- **Azure Cosmos DB:** Database service used for storing and retrieving content data.\\r\\n- **Azure Storage:** Manages storage of files and other data used by the application.\\r\\n- **Azure OpenAI:** Provides AI-based services for content generation and embedding.\\r\\n\\r\\nNow that you have a high-level understanding of the architecture, let\u2019s proceed with the steps to set up and run the application locally.\\r\\n\\r\\n## Step 1. Clone the GitHub repository\\r\\n\\r\\nBegin by cloning the repository for the **Java AI-Based Content Generator**.\\r\\n\\r\\n```\\r\\ngit clone https://github.com/Azure-Samples/Java-AI-Based-Content-Generator\\r\\n```\\r\\n\\r\\n:::info\\r\\n[Ingest your own content](https://aka.ms/demo-bytes/ep13?ocid=biafy25h1_30daysofia_webpage_azuremktg) using the Azure Functions OpenAI extension into a Cosmos DB vector database to enable OpenAI query on your data.\\r\\n:::\\r\\n\\r\\n## Step 2: Set Up Azure Key Vault Secrets and User Identity (Local Setup)\\r\\n\\r\\n### 1. Set Key Vault URL and Authentication Environment Variables\\r\\n\\r\\nBefore running the services, you must set the environment variables required to access Azure Key Vault securely.\\r\\n\\r\\n- **Azure Key Vault URL**:\\r\\n  - Set this in your environment as `AZURE_KEYVAULT_URI` using the URL of your Key Vault.\\r\\n- **Configure Spring Cloud Azure**:\\r\\n  - Ensure that you have the [Spring Cloud Azure](https://spring.io/projects/spring-cloud-azure#overview) dependencies added to your project. Spring Cloud Azure provides integration with Azure services and supports using different credential types.\\r\\n  - By default, Spring Cloud Azure will attempt to use multiple credential builders to authenticate, including:\\r\\n    - `EnvironmentCredential`\\r\\n    - `WorkloadIdentityCredential`\\r\\n    - `ManagedIdentityCredential`\\r\\n    - `SharedTokenCacheCredential`\\r\\n    - `IntelliJCredential`\\r\\n    - `VSCodeCredential`\\r\\n    - `AzureCliCredential`\\r\\n  - For local development, the application will use `AzureCliCredential` if no other credentials are configured. This ensures that your local environment can authenticate and interact with Azure services seamlessly.\\r\\n\\r\\nFor more details on configuring and using Spring Cloud Azure with Key Vault, refer to the [Spring Cloud Azure authentication documentation](https://learn.microsoft.com/azure/developer/java/spring-framework/authentication?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n\\r\\n![image of the application properties variables](../../static/img/30-days-of-ia-2024/blogs/2024-10-03/1-3a-2.png)\\r\\n\\r\\n### 2. Assign Key Vault Administrator Role\\r\\n\\r\\n- Go to the **Azure Portal**.\\r\\n- In the left-hand menu, select **Resource groups** and choose the resource group that contains your Key Vault.\\r\\n- Select your **Key Vault** from the list of resources.\\r\\n- In the Key Vault menu, navigate to **Access control (IAM)**.\\r\\n- Click on the **+ Add button** at the top and select Add role assignment.\\r\\n- In the **Role** dropdown, search for and select **Key Vault Administrator**.\\r\\n- In the **Assign access to** field, choose **User, group, or service principal**.\\r\\n- Search for your user (or the user who will manage secrets) and click **Select**.\\r\\n- Finally, click **Review + assign**.\\r\\n\\r\\nThis role gives the user permission to manage secrets in the Key Vault.\\r\\n\\r\\n### Configure User Identity for Local Development\\r\\n\\r\\nFor local development, you can use Azure CLI credentials to authenticate with Azure Key Vault. Follow these steps:\\r\\n\\r\\n1. **Install Azure CLI:** Ensure that the [Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli?ocid=biafy25h1_30daysofia_webpage_azuremktg) is installed on your local machine.\\r\\n2. Open your command-line interface (CLI) and run the following command to login:\\r\\n\\r\\n    ```\\r\\n    az login\\r\\n    ```\\r\\n\\r\\n3. Follow the prompts to complete the authentication process. This command authenticates your local CLI session and stores the necessary credentials.\\r\\n4. **Access Key Vault Secrets:** After running `az login`, your application will use the Azure CLI session to authenticate with Azure Key Vault and retrieve secrets during local development.\\r\\n\\r\\n:::info\\r\\nJoin live experts to dive into [operational excellence with AKS](https://aka.ms/learn-live/ep3?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n:::\\r\\n\\r\\n## Summary\\r\\n\\r\\nIn this blog, we cloned our example app code onto your local development machine, and we set up the required environment variables needed to run the app. In addition, we configured the Azure Key Vault settings to securely store the secrets, such as connection strings and keys, that you\u2019ll use when running the app.\u202f\u202f \\r\\n\\r\\nIn our next blog, we\u2019ll walk through adding those secrets to your key vault and then we\u2019ll build and run the app for the first time in your local development environment."},{"id":"setting-up-your-development-environment-2","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2","source":"@site/blog-30-days-of-ia-2024/2024-09-20/setting-up-your-development-environment-2.md","title":"1.2b Setting Up Your Development Environment Part 2","description":"Learn how to create and configure the Azure OpenAI Service resource that we\u2019ll use in our example app.","date":"2024-09-24T09:00:00.000Z","formattedDate":"September 24, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":10.59,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-09-24T09:00","slug":"setting-up-your-development-environment-2","title":"1.2b Setting Up Your Development Environment Part 2","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Learn how to create and configure the Azure OpenAI Service resource that we\u2019ll use in our example app.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.3a Build Content Generation App Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/build-content-generation-app-part-1"},"nextItem":{"title":"1.2a Setting up your development environment Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/setting-up-your-development-environment-2\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\n## 1.2b. Setting up your development environment\\r\\n\\r\\n## Part 2. Preparing the Azure OpenAI Service resource\\r\\nLearn how to create and configure the Azure OpenAI Service resource that we\u2019ll use in our example app.\\r\\n\\r\\n### What we cover:\\r\\n- Creating an Azure OpenAI instance\\r\\n- Setting up Azure API Management\\r\\n- Exploring the options for creating our app hosting environments on Azure\\r\\n\\r\\n## Introduction\\r\\nIn our [previous post](https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1), we discussed setting up your local development environment and creating the Azure-based database, storage, and secret management services that you\u2019ll use when running our application. In this post, we set up the Azure OpenAI instance that provides the core of our content generation capabilities. After you\u2019ve created the Azure OpenAI instance, we\u2019ll finish our preparation tasks by setting up Azure API Management and then finally creating our preferred app hosting resources (Azure Kubernetes Service [AKS] or Azure App Service).\\r\\n\\r\\n## Step 1. Set up Azure OpenAI\\r\\nCreate two Azure OpenAI deployments\u2014one for **GPT-4o** (chat completion) and another for **text embedding**.\\r\\n\\r\\n1. **Create a new Azure OpenAI resource**. Go to the Azure portal, and search for **Azure OpenAI**.\\r\\n2. Deploy two separate instances:\\r\\n   - **Chat completion (GPT-4o)** for generating content.\\r\\n   - **Embedding model** for semantic search functionality.\\r\\n\\r\\n### Create the Azure OpenAI resource\\r\\n\\r\\n#### Azure portal instructions\\r\\n1. Use the Azure portal to deploy **Azure OpenAI**.\\r\\n\\r\\n   ![The \\"Create Azure OpenAI\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-1.png)\\r\\n\\r\\n2. After provisioning Azure, open Azure OpenAI and go to **Azure OpenAI Studio**.\\r\\n\\r\\n   ![The \\"aistudy-chatcompletion\\" screen in the Azure portal, with the focus on \\"Go to Azure OpenAI Studio.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-2.png)\\r\\n\\r\\n3. Go to **Deployments**, and then deploy the models.\\r\\n\\r\\n   ![The \\"Manage deployments of your models...\\" screen in the Azure portal, with the focus on \\"Deployments\\" and \\"Deploy base model.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-3.png)\\r\\n\\r\\n4. Search **GPT-4o** for chat completion. Set tokens-per-minute rate limit (depending on response length), and deploy.\\r\\n\\r\\n   ![alt: The \\"Deploy model gpt-4o\\" screen in the Azure portal, with the focus on \\"Tokens per Minute Rate Limit.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-4.png)\\r\\n\\r\\n   Make sure to save the **Target URI** and **Key** for future use.\\r\\n\\r\\n   ![The \\"gpt-4o\\" screen in the Azure portal, with the focus on \\"Endpoint.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-5.png)\\r\\n\\r\\n   Deploy the **text-embedding-3-small** model to embed the data in the same way.\\r\\n\\r\\n   ![The \\"text-embedding-3-small\\" screen in the Azure portal, with the focus on \\"Endpoint.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-6.png)\\r\\n\\r\\n#### CLI instructions\\r\\nUse the following script when performing these instructions:\\r\\n\\r\\nShell script: `create-openai-resource.sh`\\r\\n\\r\\n```\\r\\n#!/bin/bash\\r\\n\\r\\n# Function to display help\\r\\nfunction display_help() {\\r\\n  echo \\"Usage: $0 --name <OpenAI Account Name> --resource-group <Resource Group Name> --location <Location> [--help]\\"\\r\\n  echo\\r\\n  echo \\"Options:\\"\\r\\n  echo \\"  --name              The display name of the Azure OpenAI account.\\"\\r\\n  echo \\"  --resource-group    The name of the Azure resource group.\\"\\r\\n  echo \\"  --location          The Azure region/location for the resource. (e.g., eastus, westus)\\"\\r\\n  echo \\"  --help              Display this help message and exit.\\"\\r\\n  echo\\r\\n  exit 0\\r\\n}\\r\\n\\r\\n# Function to check if the user is logged in\\r\\nfunction check_azure_login() {\\r\\n  echo \\"Checking Azure CLI login status...\\"\\r\\n  az account show &> /dev/null\\r\\n  if [ $? -ne 0 ]; then\\r\\n    echo \\"You are not logged in. Logging in now...\\"\\r\\n    az login\\r\\n    if [ $? -ne 0 ]; then\\r\\n      echo \\"Azure login failed. Exiting script.\\"\\r\\n      exit 1\\r\\n    fi\\r\\n  else\\r\\n    echo \\"You are already logged in.\\"\\r\\n  fi\\r\\n}\\r\\n\\r\\n# Parse command line arguments\\r\\nOPENAI_ACCOUNT_NAME=\\"\\"\\r\\nRESOURCE_GROUP=\\"\\"\\r\\nLOCATION=\\"\\"\\r\\n\\r\\nwhile [[ $# -gt 0 ]]; do\\r\\n  case \\"$1\\" in\\r\\n    --name)\\r\\n      OPENAI_ACCOUNT_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --resource-group)\\r\\n      RESOURCE_GROUP=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --location)\\r\\n      LOCATION=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --help)\\r\\n      display_help\\r\\n      ;;\\r\\n    *)\\r\\n      echo \\"Unknown option: $1\\"\\r\\n      display_help\\r\\n      ;;\\r\\n  esac\\r\\ndone\\r\\n\\r\\n# Ensure required arguments are provided\\r\\nif [[ -z \\"$OPENAI_ACCOUNT_NAME\\" || -z \\"$RESOURCE_GROUP\\" || -z \\"$LOCATION\\" ]]; then\\r\\n  echo \\"Error: --name, --resource-group, and --location are required.\\"\\r\\n  display_help\\r\\nfi\\r\\n\\r\\n# Step 0: Check if logged in\\r\\ncheck_azure_login\\r\\n\\r\\n# Step 1: Create resource group (if not exists)\\r\\necho \\"Creating resource group $RESOURCE_GROUP (if it doesn\'t already exist)...\\"\\r\\naz group create --name \\"$RESOURCE_GROUP\\" --location \\"$LOCATION\\"\\r\\n\\r\\n# Step 2: Create OpenAI resource\\r\\necho \\"Creating Azure OpenAI resource...\\"\\r\\naz cognitiveservices account create \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\\r\\n  --kind OpenAI \\\\\\r\\n  --sku S0 \\\\\\r\\n  --location \\"$LOCATION\\" \\\\\\r\\n  --yes\\r\\n\\r\\n# Step 3: Deploy GPT-4o model with increased token limit (10K capacity)\\r\\necho \\"Deploying GPT-4o model...\\"\\r\\naz cognitiveservices account deployment create \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\\r\\n  --deployment-name \\"gpt-4o-deployment\\" \\\\\\r\\n  --model-name \\"gpt-4o\\" \\\\\\r\\n  --model-version \\"2024-05-13\\" \\\\\\r\\n  --model-format OpenAI \\\\\\r\\n  --sku-capacity 10 \\\\\\r\\n  --sku-name \\"Standard\\"\\r\\n\\r\\n# Step 4: Deploy text-embedding-3-small model\\r\\necho \\"Deploying text-embedding-3-small model...\\"\\r\\naz cognitiveservices account deployment create \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\\r\\n  --deployment-name \\"text-embedding-3-small-deployment\\" \\\\\\r\\n  --model-name \\"text-embedding-3-small\\" \\\\\\r\\n  --model-version \\"1\\" \\\\\\r\\n  --model-format OpenAI \\\\\\r\\n  --sku-name \\"Standard\\" \\\\\\r\\n  --sku-capacity 120 \\\\\\r\\n\\r\\n# Verify deployments\\r\\necho \\"Listing deployed models...\\"\\r\\naz cognitiveservices account deployment list \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\"\\r\\n\\r\\n```\\r\\n\\r\\nRun the script.\\r\\n\\r\\n**Save the script**. Save the script as `create-openai-resource.sh`.\\r\\n\\r\\nMake the script executable:\\r\\n\\r\\n```\\r\\nchmod +x create-openai-resource.sh \\r\\n```\\r\\n\\r\\nRun the script: \\r\\n\\r\\n```\\r\\n./create-openai-resource.sh --name <NAME> --resource-group <RESOURCE_GROUP_NAME> --location <LOCATION>\\r\\n```\\r\\n\\r\\n![Create OpenAI Resource](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-7.png)\\r\\n\\r\\n:::info\\r\\nJoin the next snackable AI Demo Bytes to explore how to [apply auto-scaling and load testing to your AI applications](https://aka.ms/demo-bytes/ep6?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Step 2. Set up Azure API Management\\r\\nAPI Management serves as the gateway between your front-end, middleware, and back-end services.\\r\\n\\r\\n1. **Create an API Management instance**. Search for **API Management**, and create a new instance.\\r\\n2. **Configure two services (back-end service API Management and middleware service API Management)**:\\r\\n   - Back end for data management (Azure Cosmos DB, storage account)\\r\\n   - Middleware for Azure OpenAI Service\\r\\n\\r\\n### Azure portal instructions\\r\\n1. In the Azure portal, search for **API Management**.\\r\\n2. Choose **Create**, and complete the resource creation wizard.\\r\\n3. Select **Create** to deploy the API Management service.\\r\\n\\r\\n![The \\"Create API Management service\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-8.png)\\r\\n\\r\\n#### CLI instructions\\r\\n1. Create a resource group (optional).\\r\\n\\r\\n   If you need to create a resource group, use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope):\\r\\n\\r\\n```\\r\\naz group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n2. Create the API Management service using the following command:\\r\\n\\r\\n```\\r\\naz apim create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --name <your-apim-name> \\\\\\r\\n  --publisher-email <your-email-address> \\\\\\r\\n  --publisher-name <your-publisher-name> \\\\\\r\\n  --location <your-location> \\\\\\r\\n  --sku-name <sku-type>\\r\\n```\\r\\n\\r\\n**Parameters**\\r\\n\\r\\n* `--resource-group`: The name of the resource group where the API Management instance will be created. \\r\\n* `--name`: The name of your API Management instance. \\r\\n* `--publisher-email`: The email address of the API publisher. \\r\\n* `--publisher-name`: The name of the API publisher. \\r\\n* `--location`: The region where your API Management service will be deployed. \\r\\n* `--sku-name`: The pricing tier for the API Management instance (`Developer`, `Basic`, `Standard`, or `Premium`). Default value is `Developer`.\\r\\n\\r\\n**SKUs**\\r\\n\\r\\n* `Developer`: Best for non-production use.\\r\\n* `Basic`: Entry-level production tier.\\r\\n* `Standard`: Mid-range production tier.\\r\\n* `Premium`: Enterprise-level tier with additional features like multiregion support.\\r\\n\\r\\n![Code lines: Last login](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-9.png)\\r\\n\\r\\n![Code lines: az apim create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-10.png)\\r\\n\\r\\n## Step 3. Prepare your app hosting environments\u2014AKS or App Service\\r\\n\\r\\nWith the Azure OpenAI instance in place and our API Management configuration created, we have one more piece to set up before we can start building and deploying our app. We need to determine what type of service we\u2019re going to use in Azure for hosting the front-end, middleware, and back-end app code.\\r\\n\\r\\n### Choose your deployment technology\\r\\n\\r\\nDepending on your preferences or business requirements, you can choose either **Azure Kubernetes Service (AKS)** or **Azure App Service** when deploying your app to Azure.\\r\\n\\r\\nTo recap, here\u2019s a quick high-level overview of the **AKS** versus **App Service**.\\r\\n\\r\\n| Feature      | AKS                                    | App Service                                   |\\r\\n|--------------|----------------------------------------|-----------------------------------------------|\\r\\n| Flexibility  | More control, containerized apps       | Simplified, fully managed                     |\\r\\n| Scalability  | High customization and scalability     | Easy scaling for small to medium-sized apps   |\\r\\n| Use case     | Ideal for complex, enterprise apps     | Ideal for rapid deployment                    |\\r\\n\\r\\nBoth are robust options, and you can select the one that best fits your business needs.\\r\\n\\r\\n### Use the Azure App Service path\\r\\n\\r\\nCreate a separate App Service instance for the front-end, middleware, and back-end services.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n**Create a web app**. In the Azure portal, search for **App Service** and create a new app. \\r\\n\\r\\nIn the first section of the resource creation wizard, select the correct **Runtime stack**:  \\r\\n\\r\\n* For the back-end service, select **Java 21**.\\r\\n* For the middleware service, select **Java 17**.\\r\\n* For the front-end service, select **Node 20 LTS**.\\r\\n\\r\\nComplete the resource creation wizard, and select **Create** to deploy the App Service instance.\\r\\n\\r\\n![The \\"Create Web App\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-11.png)\\r\\n\\r\\n### CLI instructions\\r\\n\\r\\n  1. Create a resource group (optional).\\r\\n\\r\\n   If you need to create a resource group, use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope):\\r\\n\\r\\n```\\r\\naz group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n  2. Create an App Service plan.\\r\\n\\r\\n   First, create an App Service plan, which defines the region, pricing tier, and scaling options of your App Service instance:\\r\\n\\r\\n```\\r\\naz appservice plan create \\\\\\r\\n  --name <your-app-service-plan-name> \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --sku B1 \\\\\\r\\n  --is-linux \\r\\n```\\r\\n\\r\\n* `--sku B1`: Specifies the pricing tier (Basic B1).\\r\\n* `--is-linux`: Specifies that the app will run on Linux.\\r\\n\\r\\n![Code lines: az appservice plan create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-12.png)\\r\\n\\r\\n3. Create a web app.\\r\\n\\r\\n   To create a web app, use the following command:\\r\\n\\r\\n```\\r\\naz webapp create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --plan <your-app-service-plan-name> \\\\\\r\\n  --name <your-backend-app-service-name> \\\\\\r\\n  --runtime \\"JAVA:21-java21\\"\\r\\n```\\r\\n\\r\\n  **Runtime specifications** \\r\\n\\r\\n  * Back end:\\r\\n  `--runtime \\"JAVA:21-java21\\"`: Specifies the Java 21 runtime.\\r\\n  * Middleware:\\r\\n  `--runtime \\"JAVA:17-java17\\"`: Specifies the Java 17 runtime. \\r\\n  * Front end:\\r\\n  `--runtime \\"NODE:22-lts\\"`: Specifies the Node.js 22 runtime. \\r\\n\\r\\n  Use these runtime values in your `az webapp` create commands when setting up the respective services for back-end, middleware, and front-end applications. \\r\\n\\r\\n![Code lines: az webapp create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-13.png)\\r\\n\\r\\n### Use the Azure Kubernetes Service (AKS) path\\r\\nTo deploy your Kubernetes-based resources, you need to perform two actions: \\r\\n\\r\\n1. Set up a **container registry** to host your application\u2019s container images.\\r\\n2. **Create a Kubernetes cluster**.\\r\\n\\r\\n#### Azure portal instructions\\r\\nCreate a container registry. \\r\\n\\r\\n1. In the Azure portal, search for **Kubernetes Service** and create a new AKS cluster.\\r\\n2. Complete the resource creation wizard, and select **Create** to deploy the container registry.\\r\\n\\r\\n![The \\"Create container registry\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-14.png)\\r\\n\\r\\nCreate a Kubernetes cluster. \\r\\n\\r\\n1. In the Azure portal, search for **Kubernetes Service** and create a new Kubernetes cluster.\\r\\n2. Complete the resource creation wizard, and select **Create** to deploy the cluster.\\r\\n\\r\\n![The \\"Create Kubernetes cluster\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-15.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Create a resource group (optional).\\r\\n  \\r\\n   If you need to create a resource group, use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope): \\r\\n\\r\\n```\\r\\naz group create --name <resource-group-name> --location <location> \\r\\n```\\r\\n\\r\\n2. Create an Azure container registry. \\r\\n\\r\\n```\\r\\n  az acr create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --name <your-acr-name> \\\\\\r\\n  --sku Standard \\\\\\r\\n  --admin-enabled true \\r\\n``` \\r\\n\\r\\n   Replace `<your-acr-name>` with the name you want for your container registry. The `--sku Standard` specifies the Azure Container Registry tier, and `--admin-enabled true` enables admin access. \\r\\n\\r\\n   **Command parameters** \\r\\n\\r\\n* `--sku Standard`: Specifies the pricing tier for the Azure container registry. (**Standard** is a good default option.)\\r\\n* `--admin-enabled true`: Enables admin access for easier management of the Azure container registry.\\r\\n\\r\\n  ![Code lines: az acr create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-16.png)\\r\\n\\r\\n3. Create an AKS cluster:\\r\\n\\r\\n```\\r\\naz aks create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --name <your-frontend-aks-cluster-name> \\\\\\r\\n  --node-count 3 \\\\\\r\\n  --enable-addons monitoring \\\\\\r\\n  --generate-ssh-keys \\\\\\r\\n  --node-vm-size Standard_DS2_v2\\r\\n```\\r\\n\\r\\n![Code lines: az aks create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-17.png)\\r\\n\\r\\n![Second set of code lines: az aks create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-18.png)\\r\\n\\r\\n![Third set of code lines: az aks create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-19.png)\\r\\n\\r\\n:::info\\r\\nLearn more on Technical leaders\u2019 [guide to building intelligent apps](https://aka.ms/AAI_TDMApps_Plan?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Summary\\r\\n\\r\\nIn this post, we walked through creating the Azure OpenAI instance that will serve as the core of our app\u2019s content generation capabilities. We finished up our setup tasks by configuring Azure API Management, and then we created the hosting resources we need to deploy our app to Azure.\\r\\n\\r\\nIn our next post, we\u2019ll discuss how you can start building and running the app on your local dev machine.\\r\\n\\r\\n### Additional resources\\r\\n* [Register for Demo Bytes](https://developer.microsoft.com/reactor/series/S-1381/?ocid=biafy25h1_30daysofia_webpage_azuremktg), a snackable playlist of demos designed to help you skill up on AI powered app development."},{"id":"setting-up-your-development-environment-1","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1","source":"@site/blog-30-days-of-ia-2024/2024-09-20/setting-up-your-development-environment-1.md","title":"1.2a Setting up your development environment Part 1","description":"Learn what you need to set up and configure your development environment before we start to build our example generative AI app.","date":"2024-09-23T09:00:00.000Z","formattedDate":"September 23, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":14.01,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-09-23T09:00","slug":"setting-up-your-development-environment-1","title":"1.2a Setting up your development environment Part 1","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Learn what you need to set up and configure your development environment before we start to build our example generative AI app.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.2b Setting Up Your Development Environment Part 2","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2"},"nextItem":{"title":"1.1 Use Generative AI to build intelligent apps","permalink":"/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/setting-up-your-development-environment-1\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\nLearn what you need to set up and configure your development environment before we start to build our example generative AI app.\\r\\n\\r\\n### What we cover:\\r\\n\\r\\n- Installing required development tools and services on your local machine\\r\\n- Configuring the Azure Cosmos DB that the back-end application uses\\r\\n- Setting up the Azure Key Vault that will store application secrets\\r\\n- Creating a Microsoft Entra ID app registration to enable Microsoft Account sign-in for our app\\r\\n\\r\\n## Introduction\\r\\n\\r\\nAs we introduced in the previous post, this series walks you through building an example AI-powered content generation app for **Best For You Organics Company**. This app will help our fictitious company support a new skin-care product by generating a variety of marketing materials, including social media posts, blog articles, and email campaigns. Tailored specifically for the skin-care industry, the app will allow them to efficiently create and customize content for different platforms, enabling them to more effectively reach their target audience.\\r\\n\\r\\nIn this blog, we take you through setting up your local development environment and configuring several essential services in the Azure portal. You install tools, such as Git, Java, and Node.js, and set up Azure resources, such as Azure Cosmos DB and Azure Key Vault.\\r\\n\\r\\n## Local machine setup\\r\\n\\r\\nBefore diving into the Azure components, let\u2019s ensure that your local development machine is equipped with all the tools you need to build the app.\\r\\n\\r\\n### Step 1. Install Git.\\r\\n\\r\\nGit is essential for version control and managing your project\u2019s source code.\\r\\n\\r\\n1. **Download Git**. Go to [Install and set up Git](https://learn.microsoft.com/devops/develop/git/install-and-set-up-git?ocid=biafy25h1_30daysofia_webpage_azuremktg), and download the installer for your operating system.\\r\\n2. **Installation**. Run the installer. Unless you have specific preferences, use the default settings.\\r\\n3. **Verify installation**. Open your terminal and run:\\r\\n\\r\\n```\\r\\n   git --version\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-1.png)\\r\\n\\r\\n### Step 2. Install Java (17 and 21).\\r\\n\\r\\nYour Spring Boot back end requires both Java 17 and 21.\\r\\n\\r\\n1. **Download**. Obtain both versions from [Download the Microsoft Build of OpenJDK](https://learn.microsoft.com/java/openjdk/download?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n2. **Configure**. You can manage multiple Java versions using update alternatives (Linux) or SDKMAN (for Linux/Mac). For Windows, use Java Development Kit (JDK) tools, like JDKTool.\\r\\n3. **Verify installation**. Open your terminal and run:\\r\\n\\r\\n```\\r\\n   java -version\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-2.gif)\\r\\n\\r\\n### Step 3. Install the Azure CLI.\\r\\n\\r\\nThe Azure CLI is essential for managing your Azure resources from the terminal.\\r\\n\\r\\n1. **Download the Azure CLI**. Follow the instructions in [How to install the Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n2. **Sign in to Azure**. After installing the Azure CLI, sign in. Open your terminal and run:\\r\\n\\r\\n```\\r\\n   az login\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-3.png)\\r\\n\\r\\n### Step 4. Install Node.js and set up React.\\r\\n\\r\\nWe use Node.js for managing front-end dependencies and running the React development server.\\r\\n\\r\\n1. **Install Node.js**. Go to [Node.js](https://nodejs.org/), and download the appropriate version for your system.\\r\\n2. **Verify installation**. Confirm that Node.js is correctly installed. Open your terminal and run:\\r\\n```\\r\\n   node -v && npm -v\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-4.png)\\r\\n\\r\\n### Step 5. Install an integrated development environment.\\r\\n\\r\\nYou can use your preferred integrated development environment (IDE), but we recommend **Visual Studio Code** and **IntelliJ IDEA** for Java and JavaScript development.\\r\\n\\r\\n- [Install Visual Studio Code](https://code.visualstudio.com/).\\r\\n   - or\\r\\n- [Install IntelliJ IDEA](https://www.jetbrains.com/idea/).\\r\\n\\r\\nBoth IDEs support Azure integrations through plugins for managing Azure resources and services.\\r\\n\\r\\n## Azure setup\\r\\n\\r\\nNow that your local environment is ready, let\u2019s configure the Azure resources you need to build and run the app.\\r\\n\\r\\n### Step 1. Set up Azure basics.\\r\\n\\r\\nBefore you start configuring resources, choose the Azure account you want to use. If you want to use the Azure CLI to configure Azure resources, perform a few configuration steps:\\r\\n\\r\\n- **Create a new account\u2014unless you already have one (optional)**.  \\r\\n  If you don\u2019t have an existing Azure account that you want to use when creating Azure resources, create a new one. Go to the [Azure portal](https://portal.azure.com/) and sign up. Choose the subscription plan that fits your business needs.\\r\\n- **Configure the Azure CLI, if you want use it (optional)**.  \\r\\n  The steps throughout this series include instructions for using either the browser-based Azure portal or the command-line Azure CLI tool. If you want to use the Azure CLI but don\u2019t already have it installed, follow these steps:\\r\\n  - Follow the instructions provided at [Install Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n  - Verify the installation. Open your terminal or command prompt and run:\\r\\n\\r\\n```\\r\\naz --version\\r\\n```\\r\\n\\r\\n![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-5.png)\\r\\n\\r\\nAfter installing and verifying the Azure CLI, follow these steps to sign in, list your subscriptions, and select a subscription:\\r\\n\\r\\n1. Sign in to Azure. Run the following command:\\r\\n```\\r\\naz login\\r\\n```\\r\\n\\r\\n   This opens a web browser for you to authenticate your Azure account. After successful authentication, the CLI automatically lists your subscriptions and asks you to select one by number.\\r\\n\\r\\n2. Select a subscription. After you sign in, a prompt is displayed.\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-6.png)\\r\\n\\r\\n3. Type the number corresponding to the subscription you want to select, and press `Enter`. After you select the subscription, it is set as the default for your current session.\\r\\n\\r\\n### Step 2. Create Azure Cosmos DB resource (MongoDB API).\\r\\n\\r\\nCosmos DB will serve as the database for storing your application data, such as customer information and product details.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. **Go to the Azure Portal** and search for **\\"Cosmos DB\\"**.\\r\\n2. Click on **\\"Create\\"** and select **MongoDB API**.\\r\\n3. You will see two options: **Request unit (RU) database account** and **vCore cluster (Recommended)**. Choose Request unit (RU) database account.\\r\\n4. **Configure the Request Units per second (RU/s)** based on your application\'s scale (e.g., 400 RU/s as a starting point for small applications). The RU/s determines how many operations Cosmos DB can handle per second, so adjust it according to your expected load and usage.\\r\\n5. Proceed with the rest of the setup, such as specifying the **resource group**, **region**, and **database name**.\\r\\n6. Once the Cosmos DB account is created, you can add a **database** and **collections** to organize your data.\\r\\n\\r\\n   ![image of Cosmos DB setup in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-7.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Create a resource group (if you don\u2019t already have one) by running the following command:\\r\\n```\\r\\n   az group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-8.png)\\r\\n\\r\\n2. Create an Azure Cosmos DB account with MongoDB API.\\r\\n\\r\\n   Use the following command to create an Azure Cosmos DB account with the MongoDB API, and specify throughput in Request Units per second (RU/s):\\r\\n```\\r\\n   az cosmosdb create \\\\\\r\\n     --name <cosmos-account-name> \\\\\\r\\n     --resource-group <resource-group-name> \\\\\\r\\n     --kind MongoDB \\\\\\r\\n     --locations regionName=<location> failoverPriority=0 isZoneRedundant=False \\\\\\r\\n     --default-consistency-level Eventual \\\\\\r\\n     --enable-automatic-failover false\\r\\n```\\r\\n\\r\\n3. Create a MongoDB database with a specific throughput.\\r\\n\\r\\n   After creating the Azure Cosmos DB account, create a MongoDB database and set the throughput (RU/s):\\r\\n```\\r\\n   az cosmosdb mongodb database create \\\\\\r\\n     --account-name <cosmos-account-name> \\\\\\r\\n     --name <database-name> \\\\\\r\\n     --resource-group <resource-group-name>\\r\\n```\\r\\n\\r\\n![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-9.png)\\r\\n\\r\\n### Step 3. Create Azure Storage account.\\r\\n\\r\\nOur Azure Storage account is used to store any static files (for example, product brochures or images).\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. In the Azure portal, search for **storage account** and create a new one.\\r\\n2. Choose **Blob Storage** for storing documents and media.\\r\\n3. Complete the resource creation wizard, and select **Create** to deploy the storage account.\\r\\n\\r\\n![image of storage account in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-10.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Determine whether resource group exists (optional).\\r\\n\\r\\n   Use the following command:\\r\\n\\r\\n```\\r\\n   az group show --name <resource-group-name>\\r\\n```\\r\\n\\r\\n   - If the resource group exists, it returns the details.\\r\\n   - If it doesn\'t exist, it throws an error.\\r\\n\\r\\n2. Create the resource group (optional).\\r\\n\\r\\n   If the resource group doesn\'t exist, create it using the following command, replacing `<resource-group-name>` with your desired name for the resource group and `<location>` with the Azure region where you want to deploy the resource, (for example, eastus, westus):\\r\\n```\\r\\n   az group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n3. Create the storage account.\\r\\n\\r\\n   Use the following command to create the Azure Storage account, replacing `<storage-account-name>` with a globally unique name for your storage account; replacing `<resource-group-name>` with the name of the resource group you created or chose; and replacing `<location>` with the Azure region where you want to deploy the storage account (for example, eastus, westeurope):\\r\\n```\\r\\n   az storage account create \\\\\\r\\n     --name <storage-account-name> \\\\\\r\\n     --resource-group <resource-group-name> \\\\\\r\\n     --location <location> \\\\\\r\\n     --sku Standard_LRS \\\\\\r\\n     --kind StorageV2\\r\\n```\\r\\n\\r\\n   ![image of terminal response to creating the Azure Storage account](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-11.png)\\r\\n\\r\\n4. Verify storage account creation.\\r\\n\\r\\n   To ensure that the storage account was created successfully, list all storage accounts in the resource group:\\r\\n```\\r\\n   az storage account list --resource-group <resource-group-name> --output table\\r\\n```\\r\\n\\r\\n   ![image of terminal response to verify storage account creation](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-12.png)\\r\\n\\r\\n### Step 4. Set up Azure Key Vault.\\r\\n\\r\\nTo securely store our secrets, like API keys and connection strings, we use Azure Key Vault.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. **Create a key vault**. In the portal, search for key vault and create one.\\r\\n2. **Register an application**. In Microsoft Entra ID, register your application to grant it access to the key vault.\\r\\n3. **Assign managed identity**. Enable Managed Identity to allow secure access from your application.\\r\\n4. Complete the resource creation wizard, and select **Create** to deploy the key vault.\\r\\n\\r\\n   ![image of key vault in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-13.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Create a resource group (optional).\\r\\n\\r\\n   If you need to create a resource group (like we did in the Azure Cosmos DB steps), use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope):\\r\\n```\\r\\n   az group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n2. Create the Azure key vault.\\r\\n\\r\\n   Now, use the following command to create the Azure key vault, replacing `<key-vault-name>` with a globally unique name for the key vault; replacing `<resource-group-name>` with the name of the resource group created or selected in the previous step; and replacing `<location>` with your preferred Azure region. Note that \u201c--sku standard\u201d is a common pricing tier. You can also use premium if you need additional features like Hardware Security Module (HSM) support.\\r\\n\\r\\n```\\r\\n   az keyvault create \\\\\\r\\n     --name <key-vault-name> \\\\\\r\\n     --resource-group <resource-group-name> \\\\\\r\\n     --location <location> \\\\\\r\\n     --sku standard\\r\\n```\\r\\n\\r\\n   ![image of terminal response to creating the Azure key vault](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-14.png)\\r\\n\\r\\n3. Verify key vault creation.\\r\\n\\r\\n   To verify that the key vault was created, you can list all key vaults in the specified resource group:\\r\\n\\r\\n```\\r\\n   az keyvault list --resource-group <resource-group-name> --output table\\r\\n```\\r\\n\\r\\n   ![image of terminal response to verifying key vault creation](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-15.png)\\r\\n\\r\\n:::info\\r\\n\\r\\nJoin the next snackable AI Demo Bytes to explore how to [add generative AI capabilities to your web apps](https://aka.ms/demo-bytes/ep5?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n\\r\\n:::\\r\\n\\r\\n### Step 5. Use Microsoft Entra ID to create an app registration for Microsoft account sign-in.\\r\\n\\r\\nTo support multi-user access, including sign-in from any Microsoft account, register your application in Microsoft Entra ID.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. Navigate to Microsoft Entra ID.  \\r\\n   - In the Azure portal, search for **Microsoft Entra ID**, and select **Manage \u2192 App registrations**.\\r\\n2. Register a new application.\\r\\n   1. Select **New registration**.\\r\\n   2. **Name**. Enter a name for your application (for example, **ContentGenApp**).\\r\\n   3. **Supported account types**. Select **Accounts in any organizational directory (Any Microsoft Entra ID tenant - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)**.\\r\\n   4. **Redirect URI**. Set this to the front end\'s callback URL.\\r\\n      - For local development (React app running locally), use [http://localhost:3000](http://localhost:3000).\\r\\n      - For production (when deployed on [Azure Kubernetes Service (AKS)](https://learn.microsoft.com/azure/aks/what-is-aks?ocid=biafy25h1_30daysofia_webpage_azuremktg) or [Azure App Service](https://learn.microsoft.com/azure/app-service/overview/?ocid=biafy25h1_30daysofia_webpage_azuremktg)), add the URL for the App Service or AKS deployment you plan to create for this app (We\u2019ll create these in our next post). For example, [https://your-app.azurewebsites.net](https://your-app.azurewebsites.net) for App Service or [https://your-aks-domain.com](https://your-aks-domain.com) for AKS.\\r\\n      - If you plan to use a custom domain for your application, add that domain here (for example, [https://your-custom-domain.com](https://your-custom-domain.com)).\\r\\n\\r\\n   **Important**: Ensure that all potential URLs (local, deployed, and custom domain) are listed as redirect URIs.\\r\\n\\r\\n   ![image of application registration in Microsoft Entra ID](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-16.png)\\r\\n\\r\\n3. Configure API permissions.\\r\\n   1. Go to the **API permissions** tab, and select **Add a permission**.\\r\\n   2. Choose **Microsoft Graph \u2192 Delegated permissions**, and then select the following permissions:\\r\\n      - **User.Read**. Allows users to sign in and read their profile.\\r\\n   3. **Grant admin consent**. After permissions are added, select **Grant admin consent** for your organization.\\r\\n\\r\\n   ![image of API permissions configuration](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-17.png)\\r\\n\\r\\n4. Configure authentication settings.\\r\\n   1. Go to the **Authentication** tab, and add your **redirect URIs** (both local and production URLs).\\r\\n   2. Enable **ID tokens** to authenticate users.\\r\\n\\r\\n   ![image in Azure Portal of authentication settings configuration](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-18.png)\\r\\n\\r\\nThis revision integrates **Microsoft Entra ID** and highlights the navigation flow for app registration through the **Manage** section. It also ensures that you\'re set up for both local development and production environments using **AKS**, **App Service**, or a **custom domain**.\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\nYou\u2019ll use the following script when performing these instructions.\\r\\n\\r\\nShell script: `create-azure-ad-app.sh`\\r\\n\\r\\n```\\r\\n#!/bin/bash\\r\\n\\r\\n# Function to display help\\r\\nfunction display_help() {\\r\\n  echo \\"Usage: $0 --name <App Name> --redirect-uris <Redirect URI 1> <Redirect URI 2> ... [options]\\"\\r\\n  echo\\r\\n  echo \\"Options:\\"\\r\\n  echo \\"  --name              The display name of the Azure AD App.\\"\\r\\n  echo \\"  --redirect-uris     Space-separated list of redirect URIs to configure.\\"\\r\\n  echo \\"  --help              Display this help message and exit.\\"\\r\\n  echo\\r\\n  exit 0\\r\\n}\\r\\n\\r\\n# Function to check if the user is logged in\\r\\nfunction check_azure_login() {\\r\\n  echo \\"Checking Azure CLI login status...\\"\\r\\n  az account show &> /dev/null\\r\\n  if [ $? -ne 0 ]; then\\r\\n    echo \\"You are not logged in. Logging in now...\\"\\r\\n    az login\\r\\n    if [ $? -ne 0 ]; then\\r\\n      echo \\"Azure login failed. Exiting script.\\"\\r\\n      exit 1\\r\\n    fi\\r\\n  else\\r\\n    echo \\"You are already logged in.\\"\\r\\n  fi\\r\\n}\\r\\n\\r\\n# Parse command line arguments\\r\\nAPP_NAME=\\"\\"\\r\\nREDIRECT_URIS=()\\r\\n\\r\\nwhile [[ $# -gt 0 ]]; do\\r\\n  case \\"$1\\" in\\r\\n    --name)\\r\\n      APP_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --redirect-uris)\\r\\n      shift\\r\\n      while [[ $# -gt 0 && ! \\"$1\\" =~ ^-- ]]; do\\r\\n        REDIRECT_URIS+=(\\"$1\\")\\r\\n        shift\\r\\n      done\\r\\n      ;;\\r\\n    --help)\\r\\n      display_help\\r\\n      ;;\\r\\n    *)\\r\\n      echo \\"Unknown option: $1\\"\\r\\n      display_help\\r\\n      ;;\\r\\n  esac\\r\\ndone\\r\\n\\r\\n# Ensure required arguments are provided\\r\\nif [[ -z \\"$APP_NAME\\" || ${#REDIRECT_URIS[@]} -eq 0 ]]; then\\r\\n  echo \\"Error: Both --name and --redirect-uris are required.\\"\\r\\n  display_help\\r\\nfi\\r\\n\\r\\n# Step 0: Check if logged in\\r\\ncheck_azure_login\\r\\n\\r\\nAPI_PERMISSION=\\"e1fe6dd8-ba31-4d61-89e7-88639da4683d\\"  # User.Read permission ID\\r\\nGRAPH_API=\\"00000003-0000-0000-c000-000000000000\\"        # Microsoft Graph API ID\\r\\nSIGN_IN_AUDIENCE=\\"AzureADandPersonalMicrosoftAccount\\"    # Supported account types\\r\\n\\r\\n# Define the required resource accesses in JSON format\\r\\nREQUIRED_RESOURCE_ACCESS=$(cat <<EOF\\r\\n[\\r\\n  {\\r\\n    \\"resourceAppId\\": \\"$GRAPH_API\\",\\r\\n    \\"resourceAccess\\": [\\r\\n      {\\r\\n        \\"id\\": \\"$API_PERMISSION\\",\\r\\n        \\"type\\": \\"Scope\\"\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n]\\r\\nEOF\\r\\n)\\r\\n\\r\\n# Step 1: Check if the app already exists\\r\\nAPP_ID=$(az ad app list --filter \\"displayName eq \'$APP_NAME\'\\" --query \\"[0].appId\\" -o tsv)\\r\\n\\r\\nif [ -z \\"$APP_ID\\" ]; then\\r\\n  echo \\"App doesn\'t exist. Creating the app registration...\\"\\r\\n\\r\\n  # Step 2: Create the app registration\\r\\n  APP_ID=$(az ad app create \\\\\\r\\n    --display-name \\"$APP_NAME\\" \\\\\\r\\n    --required-resource-accesses \\"$REQUIRED_RESOURCE_ACCESS\\" \\\\\\r\\n    --web-redirect-uris \\"${REDIRECT_URIS[@]}\\" \\\\\\r\\n    --enable-id-token-issuance true \\\\\\r\\n    --enable-access-token-issuance true \\\\\\r\\n    --sign-in-audience \\"$SIGN_IN_AUDIENCE\\" \\\\\\r\\n    --query appId -o tsv)\\r\\n\\r\\n  if [ -z \\"$APP_ID\\" ]; then\\r\\n    echo \\"App creation failed. Exiting script.\\"\\r\\n    exit 1\\r\\n  fi\\r\\n\\r\\n  echo \\"App created with ID: $APP_ID\\"\\r\\n\\r\\nelse\\r\\n  echo \\"App already exists with ID: $APP_ID. Updating the redirect URIs...\\"\\r\\n\\r\\n  # Step 3: Update the redirect URIs\\r\\n  az ad app update --id \\"$APP_ID\\" \\\\\\r\\n    --web-redirect-uris \\"${REDIRECT_URIS[@]}\\"\\r\\n\\r\\n  if [ $? -ne 0 ]; then\\r\\n    echo \\"Failed to update redirect URIs. Exiting script.\\"\\r\\n    exit 1\\r\\n  fi\\r\\n\\r\\n  echo \\"Redirect URIs updated for app ID: $APP_ID\\"\\r\\nfi\\r\\n\\r\\n# Display the app details\\r\\necho \\"Here are the details of the app:\\"\\r\\naz ad app show --id \\"$APP_ID\\"\\r\\n```\\r\\n\\r\\nRun the script:\\r\\n\\r\\n  1. Save the script. Save the preceding script as create-azure-ad-app.sh. \\r\\n  2. Make the script executable: \\r\\n  ``` \\r\\n  chmod +x create-azure-ad-app.sh\\r\\n  ```\\r\\n \\r\\n  3. Run the script.\\r\\n  ```\\r\\n./create-azure-ad-app.sh --name <YOUR_APP_NAME> --redirect-uris http://localhost:3000 https://your-custom-domain.com\\r\\n```\\r\\n\\r\\n![image of terminal response after running the script](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-19.png)\\r\\n\\r\\n:::info\\r\\n\\r\\nJoin live experts to dive into [operational excellence with AKS](https://aka.ms/learn-live/ep3?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n\\r\\n:::\\r\\n\\r\\n## Summary\\r\\n\\r\\nIn this blog, we\u2019ve covered setting up your local development environment and creating the Azure-based database, storage, and secret management services you\u2019ll use when running an AI powered content generation sample application in Java. However, there\u2019s still one critical piece of infrastructure to provision before you can start building and deploying the app.\\r\\n\\r\\nIn the next blog, we\u2019ll cover how to set up and configure [Azure OpenAI Service](https://learn.microsoft.com/azure/ai-services/openai/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg) to power this sample app.\\r\\n\\r\\n## Additional resources\\r\\n* [Register for Demo Bytes](https://developer.microsoft.com/reactor/series/S-1381/?ocid=biafy25h1_30daysofia_webpage_azuremktg), a snackable playlist of demos designed to help you skill up on AI powered app development."},{"id":"use-generative-ai-to-build-intelligent-apps","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps","source":"@site/blog-30-days-of-ia-2024/2024-09-19/use-generative-ai-to-build-intelligent-apps.md","title":"1.1 Use Generative AI to build intelligent apps","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","date":"2024-09-19T09:00:00.000Z","formattedDate":"September 19, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":8.305,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-09-19T09:00","slug":"use-generative-ai-to-build-intelligent-apps","title":"1.1 Use Generative AI to build intelligent apps","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.2a Setting up your development environment Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1"},"nextItem":{"title":"Kick-off #30Days of IA","permalink":"/Cloud-Native/30-days-of-ia-2024/kick-off"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\nIn this blog series, discover how you can use Azure services to take advantage of generative AI capabilities to build an intelligent application.\u202f\u202f \\r\\n\\r\\n## What We\u2019ll Cover\\r\\n\\r\\n* Why generative AI?\\r\\n* A high-level overview of our example scenario\\r\\n* An overview of the deployment options\u202f \\r\\n\\r\\n\\r\\n## Why generative AI?\\r\\nUnlike traditional AI systems that follow predefined rules, generative AI models use deep learning techniques to generate outputs such as text, images, music, and even code in a way that mimics human creativity. If you\u2019re reading this, you\u2019re likely interested in how you can harness these capabilities to build new and innovative solutions for your organization or your customers. But what benefits does this new technology bring, and when would you use it?\u202f \\r\\n\\r\\nFor businesses, one of the main benefits of generative AI is enhanced productivity. By automating tasks such as content creation, customer service responses, and data analysis, you can significantly reduce tasks that your teams previously had to do manually, and this automation can result in radically increased efficiency. Marketing teams, for instance, can use generative AI to draft personalized content or generate ideas for campaigns, accelerating time to market. Similarly, customer support teams can make the most of AI-powered chatbots that provide accurate responses based on large datasets, supporting faster and more consistent handling of customer requests or issues.\u202f \\r\\n\\r\\nIn addition to the productivity benefits, intelligent apps built by using generative AI can scale to meet the needs of growing businesses, allowing these businesses to meet increased demand for personalized solutions and messaging. AI helps your business to do this without sacrificing quality or capabilities.\u202f \\r\\n\\r\\nIn this series, we show you how you can combine multiple Azure products and services to effectively build an example generative AI application that supports marketing teams.\u202f \\r\\n\\r\\n\\r\\n## The example application\\r\\nIn our example scenario, we\u2019re building a solution for the **Best For You Organics Company**,\u202fwhich is releasing an innovative, new skin-care product designed to enhance natural beauty and promote skin health. In a competitive market, it\u2019s crucial for marketing efforts to create engaging content that captures the attention of potential customers and aids the marketing team in market penetration.\u202f \\r\\n\\r\\nThrough this blog series, you can learn to use Azure services to build an application that supports the Best For You Organics Company marketing team, making the most of the capabilities of Azure to create exceptional customer experiences and generate engaging marketing content.\u202f\u202f \\r\\n\\r\\nOur solution generates the following types of content to assist the marketing team:\u202f \\r\\n* **Social media posts**. Announcements, product highlights, customer testimonials, and promotional offers, with the hashtags #Skincare #NaturalBeauty #BestForYouOrganics\u202f \\r\\n\\r\\n* **Blog articles**. In-depth articles on skin-care tips, the benefits of natural ingredients, and product usage guides\u202f \\r\\n\\r\\n* **Email content**. Product launches, exclusive offers, skin-care routines, and collateral\u202f \\r\\n\\r\\nThe application is built using a three-part architecture consisting of a **back end**, **middleware**, and **front end**, deployed on either **Azure Kubernetes Service (AKS)** or **Azure App Service**. This architecture forms the foundation for integrating modern cloud and AI technologies, which is our focus throughout this case study.\u202f \\r\\n\\r\\n:::info\\r\\n\\r\\n### AI and .Net\\r\\nIn this series, we\u2019ll walk through the basics of building a Java based content generation application. However, if you\u2019re also interested in building intelligent apps using .Net, you can learn more from the following resources:\u202f \\r\\n\\r\\n* [AI for .NET Developers | Microsoft Learn](https://learn.microsoft.com/dotnet/ai?ocid=biafy25h1_30daysofia_webpage_azuremktg)\u202f \\r\\n* [Building Generative AI apps with .NET 8 | .Net Blog](https://devblogs.microsoft.com/dotnet/build-gen-ai-with-dotnet-8/?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n* [Develop Generative AI solutions with Azure OpenAI Service - Training | Microsoft Learn](https://learn.microsoft.com/training/paths/develop-ai-solutions-azure-openai/?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n* [Dive deeper into .NET + AI collection | Microsoft Learn](https://learn.microsoft.com/collections/qp6xfmodr6q6px?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n* [Develop AI agents using Azure OpenAI and the Semantic Kernel SDK - Training | Microsoft Learn](https://learn.microsoft.com/training/paths/develop-ai-agents-azure-open-ai-semantic-kernel-sdk/?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n* [Add AI to Your .NET Apps Easily with Prompty | .Net Blog](https://devblogs.microsoft.com/dotnet/add-ai-to-your-dotnet-apps-easily-with-prompty/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\u202f\u202f \\r\\n* [Using Phi-3 & C# with ONNX for text and vision samples | .Net Blog](https://devblogs.microsoft.com/dotnet/using-phi3-csharp-with-onnx-for-text-and-vision-samples-md/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\u202f\u202f \\r\\n* [AI Samples for .NET | GitHub](https://github.com/dotnet/ai-samples)\u202f \\r\\n* [Azure Samples: ChatGPT + Enterprise data with Azure OpenAI and Azure AI Search (.NET) | GitHub](https://github.com/Azure-Samples/azure-search-openai-demo-csharp)\u202f\u202f \\r\\n* [.NET AI Community Standup playlist | YouTube](https://www.youtube.com/playlist?list=PLdo4fOcmZ0oX0Hrq9KqhQfZNAcDF5VPNt)\u202f \\r\\n\\r\\n:::\\r\\n\\r\\n#### Application flow\\r\\nThe content generation process in the application is simple yet powerful. Here\'s how the flow works, from the user\'s perspective:\u202f \\r\\n\\r\\n1. **User input**. The user provides details, such as the type of content they need\u2014whether it\'s an email campaign, social media post, or blog article (steps 1-4 in the diagram below).\u202f \\r\\n\\r\\n1. **Back-end processing**. The system retrieves necessary data, such as customer demographics, product details, and relevant information stored in the back end (steps 5-6 in the diagram).\u202f \\r\\n\\r\\n1. **Content generation**. The **middleware** communicates with **Azure OpenAI Service** to generate content based on the provided input and back-end data, helping to ensure that the content is contextually relevant (steps 7-9 in the diagram).\u202f \\r\\n\\r\\n1. **Result display**. The generated content is then displayed on the **ReactJS front end**, where the user can review, copy, and implement it directly into their marketing campaigns (step 10 in diagram).\u202f \\r\\n\\r\\nLet\u2019s now look at the data flow for this application flow to understand how Azure OpenAI can be used in a Retrieval-Augmented Generation (RAG) architecture pattern.\u202f \\r\\n\\r\\n\\r\\n![diagram of data flow for this application](../../static/img/30-days-of-ia-2024/blogs/2024-09-19/1-1.png)\\r\\n\\r\\nThis flow allows for fast and efficient content creation while tailoring the output to specific campaign needs, all powered by AI.\u202f \\r\\n\\r\\n#### GitHub repository\\r\\n\\r\\nThe project\u2019s full source code can be found in the [GitHub repository for the Java AI-based content generator](https://github.com/Azure-Samples/Java-AI-Based-Content-Generator).\\r\\n\\r\\n#### Technologies used\u202f\\r\\nOur application makes the most of several cutting-edge technologies, each serving a critical role in the system:\u202f \\r\\n\u202f \\r\\n\\r\\n* [Azure OpenAI Service](https://learn.microsoft.com/azure/ai-services/openai/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). At the core of content generation is Azure OpenAI, which uses GPT models to create coherent and relevant content based on user input. The Chat Completion API (GPT-4o) generates the text, while the embedding model helps ensure that data retrieved for content is semantically relevant to the user\'s needs.\u202f \\r\\n* [Azure Key Vault](https://learn.microsoft.com/azure/key-vault/general/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). For secure storage of secrets such as API keys, credentials, and sensitive configuration data, Key Vault is integrated into the system. This helps ensure that all sensitive data is stored securely and retrieved only when needed.\u202f \\r\\n* [Microsoft Entra ID](https://learn.microsoft.com/entra/fundamentals/whatis?ocid=biafy25h1_30daysofia_webpage_azuremktg) (formerly Azure Active Directory). Microsoft Entra ID is used for authentication and identity management, supporting secure access to the back end and to APIs. It helps effectively manage user roles and access permissions.\u202f \\r\\n* [Managed identity](https://learn.microsoft.com/entra/identity/managed-identities-azure-resources/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). The application uses managed identity to securely access Azure resources without hard-coding credentials. This simplifies the authentication process when interacting with services like Key Vault and Azure Cosmos DB.\u202f \\r\\n* [Azure App Service](https://learn.microsoft.com/azure/app-service/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg) and [Azure Kubernetes Service (AKS)](https://learn.microsoft.com/azure/aks/what-is-aks?ocid=biafy25h1_30daysofia_webpage_azuremktg).The application supports two deployment models: App Service and AKS. Both provide scalable infrastructure but differ in flexibility and complexity (more on this in the \\"[Choosing the right deployment technology](#choosing-the-right-deployment-technology-for-you) for you\\" section).\u202f \\r\\n* [Azure API Management](https://learn.microsoft.com/azure/api-management/api-management-key-concepts?ocid=biafy25h1_30daysofia_webpage_azuremktg). API Management manages the API gateway, controlling access between the front end, middleware, and back end. With features like Cross-Origin Resource Sharing (CORS), throttling, rate limiting, and authentication, API Management supports efficient communication and security across the system.\\r\\n\\r\\n:::info\\r\\n\\r\\nLearn more on Technical leaders\u2019 [guide to building intelligent apps](https://aka.ms/AAI_TDMApps_Plan?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n\\r\\n:::\\r\\n\\r\\n## Choosing the right deployment technology for you\\r\\n\\r\\nThe application can be deployed by using either **Azure App Service** or **Azure Kubernetes Service (AKS)**, depending on your business needs. Both options provide advantages, but the choice often depends on the application\u2019s complexity and scale.\\r\\n\\r\\n#### Azure App Service\\r\\n* **Simplicity**. App Service is a fully managed platform as a service (PaaS) that abstracts the underlying infrastructure. This allows for quick deployments with less overhead.\u202f \\r\\n\\r\\n* **Cost-effective**. For small to medium-sized applications, App Service can reduce operational costs by automating much of the infrastructure management.\u202f \\r\\n\\r\\n* **Use case**. The service is ideal for businesses looking for rapid deployment without the need for extensive control over infrastructure. It works well for straightforward applications with predictable workloads.\\r\\n\\r\\n![architecture diagram using Azure App Service](../../static/img/30-days-of-ia-2024/blogs/2024-09-19/1-2.png)\\r\\n\\r\\n#### Azure Kubernetes Service (AKS)\\r\\n* **Flexibility**. AKS offers more control over infrastructure, allowing for fine-tuned customization of containerized microservices.\u202f \\r\\n\\r\\n* **Scalability**. The service is ideal for applications with large-scale operations or high customization requirements. It allows for horizontal scaling and integration with multiple cloud-native tools.\u202f \\r\\n\\r\\n* **Use case**. AKS is best suited for enterprise-level applications or businesses requiring multi-container orchestration and complex workloads.\\r\\n\\r\\n![architecture diagram using Azure Kubernetes Service](../../static/img/30-days-of-ia-2024/blogs/2024-09-19/1-3.png)\\r\\n\\r\\nBoth options are scalable and robust, and businesses can select the one that aligns best with their operational needs and scale of application.\u202f \\r\\n\\r\\n## Summary\\r\\nIn today\u2019s post, we introduced you to the example app that we\u2019ll build in this series\u2014the Best For You Organics content generation app. We discussed our goals, overall approach, and the architecture that we\u2019re using to create this app.\\r\\n\\r\\nIn our next post, we cover the **environment you\u2019ll set up** to prepare for the development of the application. Learn how to configure your local environment; set up Java, Spring Boot, and ReactJS; and integrate with Azure services, like Azure OpenAI, Key Vault, and more.\\r\\n\\r\\nEach subsequent post will dive deeper into the specific technologies that power this AI-driven application. Stay tuned as we explore everything from back-end data management to deploying on AKS or App Service.\\r\\n\\r\\n## Additional resources\\r\\n* To help you build the skills you need to create intelligent apps by using Azure OpenAI, complete the [Get started with Azure OpenAI Service](https://learn.microsoft.com/training/modules/get-started-openai/?ocid=biafy25h1_30daysofia_webpage_azuremktg) module.\u202f \\r\\n\\r\\n* Register for live learning or a demo playlist on [Build Intelligent Apps](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg) on Azure."},{"id":"kick-off","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/kick-off","source":"@site/blog-30-days-of-ia-2024/2024-09-10/kickoff-blog.md","title":"Kick-off #30Days of IA","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","date":"2024-09-10T09:00:00.000Z","formattedDate":"September 10, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":6.035,"hasTruncateMarker":false,"authors":[{"name":"Devanshi Joshi","title":"Senior Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://github.com/devanshidiaries.png","key":"devanshi"}],"frontMatter":{"date":"2024-09-10T09:00","slug":"kick-off","title":"Kick-off #30Days of IA","authors":["devanshi"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.1 Use Generative AI to build intelligent apps","permalink":"/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps"}},"content":"<head> \\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/kick-off\\"/>\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\n  <meta property=\\"og:title\\" content=\\"Build Intelligent Apps | AI Apps on Azure\\"/>\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/kick-off\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Build Intelligent Apps | AI Apps on Azure\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/kick-off\\" />\\n</head>\\n\\n\x3c!-- End METADATA --\x3e\\n\\nIn today\u2019s fast-paced digital world, staying ahead means harnessing the power of technology to create smarter, more responsive applications. We\u2019re excited to introduce you to our new edition of Build \'#IntelligentApps\', your go-to destination for skilling up on how to leverage AI to transform your applications and drive innovation.\\n\\nWe\u2019re bringing together a comprehensive suite of content designed to guide you through the latest in AI powered application development. Our goal is to empower developers, data scientists, and business leaders with the knowledge and tools needed to leverage AI effectively. Follow along for a sneak peek at what to expect.\\n\\n## What We\u2019ll Cover\\n\\n* What is Build Intelligent Apps?\\n* How can you *participate*?\\n* How can you *skill up*? (in just 30 Days)\\n\\n![Build intelligent apps](../../static/img/30-days-of-ia-2024/30-days-of-ia-2024-build-ia-banner.jpg)\\n\\n## Get Ready to Build #IntelligentApps starting September 16!\\n\\nToday, we kick-off with new content and activities for you to skill up on all things Intelligent Apps on Azure with \u201chow-to\u201d blogs, events, and community interactions! Read on to learn about what is coming!\\n\\n## Explore Our Initiatives\\n\\nWe have a number of initiatives exclusively curated to build an engaging learning journey for you to skill up on relevant technologies for building intelligent apps.\\n\\n* [#30Days of IA](https://azure.github.io/Cloud-Native/30-days-of-ia-2024) - 4 themed weeks of blogs on AI led application development in Java or Python using Azure Application Platform, Azure Data Platform and Azure AI.\\n* [Learn Live Series](https://aka.ms/FallForIA/LearnLive) \u2013 5 weekly livestream episodes on AI app development in Python or .NET.\\n* [Demo Bytes](https://azure.github.io/Cloud-Native/Build-IA/DemoBytes) \u2013 snackable demo playlist on building intelligent apps in Java, Python, .NET and using GitHub Copilot.\\n* [AI Skills Challenge](https://aka.ms/build-ia/csc) \u2013 show your skills by competing with peers to complete learn modules and earn a badge.\\n\\n![Build intelligent apps](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/30-days-of-ia-2024-cloud-skills-modules.jpg)\\n\\n:::info\\n\\n## [Register for the events!](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n\\nWhat are 4 things you can do today, to jumpstart your learning journey?\\n\\n* **Register**  for [Learn Live](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg) (free, online) \u2013 weekly live learning with SMEs\\n  * September 12 | Episode 1: [Data-driven AI applications and multi-modal search](https://developer.microsoft.com/reactor/events/23495/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 18 | Episode 2: [Containerizing and Deploying AI Workloads on AKS](https://developer.microsoft.com/reactor/events/23702/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 25 | Episode 3: [Operational Excellence with AKS](https://developer.microsoft.com/reactor/events/23497/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 2 | Episode 4: [Get Started Incorporating AI into Your .NET Applications and Service](https://developer.microsoft.com/reactor/events/23656/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 9 | Episode 5: [Modernize Your Apps Using GenAI Without Rewriting the Code](https://developer.microsoft.com/reactor/events/23657/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n\\n* **Register** for [Demo Bytes](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg) (free, online) - snackable demo playlist\\n  * September 16 | Episode 1: [AKS Automated Deployments - Streamlining Kubernetes Deployments](https://developer.microsoft.com/reactor/events/23702/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 17 | Episode 2: [Deliver AI infused app innovation with Open Liberty on AKS](https://developer.microsoft.com/reactor/events/23587/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 19 | Episode 3: [Fine-tuning open-source models made easy with KAITO](https://developer.microsoft.com/reactor/events/23697/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 23 | Episode 4: [Get your on-prem apps AI-ready using GitHub Copilot](https://developer.microsoft.com/reactor/events/23588/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 24 | Episode 5: [Add Generative AI Capabilities to your Web Apps](https://developer.microsoft.com/reactor/events/23590/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 26 | Episode 6: [Apply Auto-Scaling and Load Testing to your AI Applications](https://developer.microsoft.com/reactor/events/23592/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 30 | Episode 7: [Configure & Deploy Intelligent Java SpringBoot Apps on Azure App Service](https://developer.microsoft.com/reactor/events/23593/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 1 | Episode 8: [End-to-End AI application deployments with GitHub Copilot](https://developer.microsoft.com/reactor/events/23594/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 3 | Episode 9: [Extending GitHub Copilot to chat with your Postgres Database](https://developer.microsoft.com/reactor/events/23595/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 7 | Episode 10: [Architecting a Unified AI Stack: Secure, Responsible, and Scalable](https://developer.microsoft.com/reactor/events/23596/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 8 | Episode 11: [10x Developer with GitHub Copilot](https://developer.microsoft.com/reactor/events/23597/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 10 | Episode 12: [Building and Running Intelligent Spring Apps on Azure Container Apps](https://developer.microsoft.com/reactor/events/23598/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 14 | Episode 13: [Ingest your own content using Azure Functions OpenAI Triggers & Bindings](https://developer.microsoft.com/reactor/events/23599/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 15 | Episode 14: [GenAI Gateway Capabilities in Azure API Management](https://developer.microsoft.com/reactor/events/23600/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 17 | Episode 15: [Elevate Policy Authoring Experience in API Management](https://developer.microsoft.com/reactor/events/23601/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n\\n* **Register** for the [AI Skills Challenge](https://aka.ms/intelligent-apps/csc?ocid=biafy25h1_30daysofia_webpage_azuremktg) to earn a Microsoft Learn badge \u2013 ends on *November 1*!.\\n\\n:::\\n\\n## #30Days Of Intelligent Apps\\n\\n[#30Days of IA](https://azure.github.io/Cloud-Native/30-days-of-ia-2024) is a series of \u201chow-to\u201d blog posts grouped into themed weeks - taking you from core concepts to end-to-end solution examples in 30 days. Each blog will provide conceptual lessons paired with exercises and resources to help you reinforce learnings and take next steps.\\n\\nThis series takes you through learning journey in\u202f**four stages**, each building on the previous week to help you skill up in a beginner-friendly way:\\n\\n* **Week 1**: Build AI powered content generation [intelligent app in Java on Azure Kubernetes Service (AKS)](https://azure.microsoft.com/blog/build-next-generation-ai-powered-applications-on-microsoft-azure/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n* **Week 2**: Build AI powered content generation [intelligent app in Java on Azure App Service](https://azure.microsoft.com/blog/build-next-generation-ai-powered-applications-on-microsoft-azure/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n* **Week 3**: Build your own copilot with [Azure AI Studio](https://azure.microsoft.com/products/ai-studio/?msockid=115fb720d83d62ad12f8a380d9876328&ocid=biafy25h1_30daysofia_webpage_azuremktg), [Prompty](https://github.com/microsoft/prompty) and AKS\\n* **Week 4**: Infuse AI-assisted development tools to [enhance your efforts](https://www.microsoft.com/research/publication/the-space-of-developer-productivity-theres-more-to-it-than-you-think/?msockid=115fb720d83d62ad12f8a380d9876328&ocid=biafy25h1_30daysofia_webpage_azuremktg) and experience.\\n\\nWe will start with defining intelligent apps and then expand on how to build with cloud technologies like [Azure Kubernetes Service (AKS)](https://azure.microsoft.com/products/kubernetes-service/?ocid=biafy25h1_30daysofia_webpage_azuremktg), [Azure App Service](https://azure.microsoft.com/products/app-service/?ocid=biafy25h1_30daysofia_webpage_azuremktg), [Secure API Management](https://azure.microsoft.com/products/api-management/?ocid=biafy25h1_30daysofia_webpage_azuremktg), and [GitHub Copilot](https://github.com/features/copilot?ef_id=_k_77f1fde05f071240ccbe9b3b760f8c57_k_&OCID=AIDcmmb150vbv1_SEM__k_77f1fde05f071240ccbe9b3b760f8c57_k_&msclkid=77f1fde05f071240ccbe9b3b760f8c57) as well as integrate AI and cloud-scale data. You will learn how to build end-to-end scenarios for real world application development based on [reference architectures](https://learn.microsoft.com/azure/architecture/?ocid=biafy25h1_30daysofia_webpage_azuremktg). Before we dive deep on intelligent apps, here is a high-level overview of the **Intelligent Apps** landscape on Azure for you to leverage the most comprehensive, trusted cloud to prime the customer and employee experiences.\\n\\n![diagram of intelligent apps on Azure AI application platform](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/azure-ai-application-platform.jpeg)\\n\\nThe Azure application platform is designed to help you deliver on the promise of intelligent applications. It\u2019s an [integrated platform](https://azure.microsoft.com/solutions/build-modernize-intelligent-apps?ocid=biafy25h1_30daysofia_webpage_azuremktg) that encompasses developer services, application services, databases, and [AI](https://azure.microsoft.com/solutions/ai/?ocid=biafy25h1_30daysofia_webpage_azuremktg) services. Leveraging Azure\u2019s robust security capabilities and principles around governance and [responsible AI](https://www.microsoft.com/ai/responsible-ai?ocid=biafy25h1_30daysofia_webpage_azuremktg), the platform supports what you already use to help you make your apps intelligent. The developer stack on Azure also integrates AI, enhancing productivity for developers\u2019 efficiency.\\n\\nThere are eight key areas in which you can reinvent experiences for external customers as well as reshape internal processes to derive high productivity.\\n\\n![image of use cases for reinventing customer experiences with intelligent apps](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/customer-experiences.jpeg)\\n\\n![image of use cases for reshaping business processes with intelligent apps](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/reshaping-business-processes.jpeg)\\n\\nBring your applications to a modern application platform in the cloud for AI, which leverages a cloud data platform at scale, and agile development methods with DevOps. Embrace the most effective approaches to enhance both customer and employee experiences. Azure offers the latest apps, data, AI and is the most comprehensive, trusted cloud.\\n\\nTo start with the basics for understanding AI app development concepts, explore [#30Days of IA (2023)](https://azure.github.io/Cloud-Native/30DaysOfIA/)\u202fand [#60Days of IA](https://azure.github.io/Cloud-Native/60DaysOfIA/).\\n\\n## Let\u2019s Get Started\\n\\nNow you know everything! We hope you are as excited as we are to dive into a full month of active learning and doing! Don\'t forget to\u202f[subscribe](https://azure.github.io/Cloud-Native/30-days-of-ia-2024/rss.xml) for updates in your favorite feed reader.\u202f**And, look out for our first Intelligent Apps blog.**"}]}')}}]);