"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2986],{40880:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(85893),r=t(11151);const a={date:"2024-03-08T09:00",slug:"dynamic-repricing-of-products-using-intelligent-apps-part-2",title:"3.2 Dynamic Repricing of Products Using Intelligent Apps Part 2",authors:["cnteam"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["Cloud-Scale","Data","AI","AI/ML","intelligent apps","cloud-native","60-days","enterprise apps","digital experiences","app modernization"],image:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png",description:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable.",tags:["Build-Intelligent-Apps","60-days-of-IA","learn-live","hack-together","community-buzz","ask-the-expert","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},s=void 0,o={permalink:"/Cloud-Native/60DaysOfIA/dynamic-repricing-of-products-using-intelligent-apps-part-2",source:"@site/blog-60daysofIA/2024-03-08/dynamic-repricing-of-products-using-intelligent-apps-part-2.md",title:"3.2 Dynamic Repricing of Products Using Intelligent Apps Part 2",description:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable.",date:"2024-03-08T09:00:00.000Z",formattedDate:"March 8, 2024",tags:[{label:"Build-Intelligent-Apps",permalink:"/Cloud-Native/60DaysOfIA/tags/build-intelligent-apps"},{label:"60-days-of-IA",permalink:"/Cloud-Native/60DaysOfIA/tags/60-days-of-ia"},{label:"learn-live",permalink:"/Cloud-Native/60DaysOfIA/tags/learn-live"},{label:"hack-together",permalink:"/Cloud-Native/60DaysOfIA/tags/hack-together"},{label:"community-buzz",permalink:"/Cloud-Native/60DaysOfIA/tags/community-buzz"},{label:"ask-the-expert",permalink:"/Cloud-Native/60DaysOfIA/tags/ask-the-expert"},{label:"azure-kubernetes-service",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-kubernetes-service"},{label:"azure-functions",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-functions"},{label:"azure-openai",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-openai"},{label:"azure-container-apps",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-container-apps"},{label:"azure-cosmos-db",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-cosmos-db"},{label:"github-copilot",permalink:"/Cloud-Native/60DaysOfIA/tags/github-copilot"},{label:"github-codespaces",permalink:"/Cloud-Native/60DaysOfIA/tags/github-codespaces"},{label:"github-actions",permalink:"/Cloud-Native/60DaysOfIA/tags/github-actions"}],readingTime:6.785,hasTruncateMarker:!1,authors:[{name:"#60Days Of IA",title:"BuildIA Content Team",url:"https://azure.github.io/Cloud-Native/Build-IA/",imageURL:"https://azure.github.io/Cloud-Native/img/logo-2024.png",key:"cnteam"}],frontMatter:{date:"2024-03-08T09:00",slug:"dynamic-repricing-of-products-using-intelligent-apps-part-2",title:"3.2 Dynamic Repricing of Products Using Intelligent Apps Part 2",authors:["cnteam"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["Cloud-Scale","Data","AI","AI/ML","intelligent apps","cloud-native","60-days","enterprise apps","digital experiences","app modernization"],image:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png",description:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable.",tags:["Build-Intelligent-Apps","60-days-of-IA","learn-live","hack-together","community-buzz","ask-the-expert","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},unlisted:!1,prevItem:{title:"3. Cosmos DB and Intelligent Apps: A Match Made for Innovation",permalink:"/Cloud-Native/60DaysOfIA/cosmos-db-and-intelligent-apps-a-match-made-for-innovation"},nextItem:{title:"3.1 Dynamic Repricing of Products Using Intelligent Apps Part 1",permalink:"/Cloud-Native/60DaysOfIA/dynamic-repricing-of-products-using-intelligent-apps-part-1"}},l={authorsImageUrls:[void 0]},c=[{value:"Dynamic Repricing of Products Using Intelligent Apps Part 2: Price Forecasting with AI/ML",id:"dynamic-repricing-of-products-using-intelligent-apps-part-2-price-forecasting-with-aiml",level:2},{value:"Analyzing Price Trends to Predict Future Prices",id:"analyzing-price-trends-to-predict-future-prices",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Extract Historical Pricing Data from Cosmos DB",id:"extract-historical-pricing-data-from-cosmos-db",level:4},{value:"Preprocess Data and Split into Training and Testing",id:"preprocess-data-and-split-into-training-and-testing",level:4},{value:"Train a Forecasting Model Using Azure Machine Learning",id:"train-a-forecasting-model-using-azure-machine-learning",level:4},{value:"Evaluate and Integrate the Model",id:"evaluate-and-integrate-the-model",level:4},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Head:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a,{children:[(0,i.jsx)("meta",{property:"og:url",content:"https://azure.github.io/cloud-native/60daysofia/dynamic-repricing-of-products-using-intelligent-apps-part-2"}),(0,i.jsx)("meta",{property:"og:type",content:"website"}),(0,i.jsx)("meta",{property:"og:title",content:"Build Intelligent Apps | AI Apps on Azure"}),(0,i.jsx)("meta",{property:"og:description",content:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable."}),(0,i.jsx)("meta",{property:"og:image",content:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png"}),(0,i.jsx)("meta",{name:"twitter:url",content:"https://azure.github.io/Cloud-Native/60daysofIA/dynamic-repricing-of-products-using-intelligent-apps-part-2"}),(0,i.jsx)("meta",{name:"twitter:title",content:"Build Intelligent Apps | AI Apps on Azure"}),(0,i.jsx)("meta",{name:"twitter:description",content:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable."}),(0,i.jsx)("meta",{name:"twitter:image",content:"https://azure.github.io/Cloud-Native/img/ogImage.png"}),(0,i.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,i.jsx)("meta",{name:"twitter:creator",content:"@devanshidiaries"}),(0,i.jsx)("link",{rel:"canonical",href:"https://azure.github.io/Cloud-Native/60daysofIA/dynamic-repricing-of-products-using-intelligent-apps-part-2"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Dynamic Repricing of Products Using Intelligent Apps Part 2: Price Forecasting with AI/ML",src:t(94918).Z+"",width:"624",height:"380"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"This three-part series demonstrates how to use Azure Cosmos DB to build an Intelligent App that uses historical pricing and product data to forecast future price fluctuations for specific products. In this installment, you\u2019ll use artificial intelligence and machine learning to build the price forecasting model."})}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-repricing-of-products-using-intelligent-apps-part-2-price-forecasting-with-aiml",children:"Dynamic Repricing of Products Using Intelligent Apps Part 2: Price Forecasting with AI/ML"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://azure.github.io/Cloud-Native/60DaysOfIA/dynamic-repricing-of-products-using-intelligent-apps-part-1",children:"In Part 1 of this series"}),", you set up and populated an ",(0,i.jsx)(n.a,{href:"https://azure.microsoft.com/free/cosmos-db?ocid=buildia24_60days_blogs",children:"Azure Cosmos DB"})," database, laying the groundwork for your Intelligent Application. You also imported your data to a Cosmos DB instance."]}),"\n",(0,i.jsx)(n.p,{children:"In this second article, you\u2019ll use this data alongside Azure\u2019s machine learning (ML) and artificial intelligence (AI) capabilities to build a model that analyzes pricing trends and predicts future prices for a fictional e-commerce business."}),"\n",(0,i.jsx)(n.h3,{id:"analyzing-price-trends-to-predict-future-prices",children:"Analyzing Price Trends to Predict Future Prices"}),"\n",(0,i.jsx)(n.p,{children:"The ability to forecast pricing is a game-changer. With the power of foresight, businesses can preemptively adjust their pricing strategies in line with market expectations."}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial, we\u2019ll give you a step-by-step guide to generating a predictive ML model for an e-commerce business, using Azure\u2019s suite of ML tools."}),"\n",(0,i.jsx)(n.h4,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before you begin, make sure you have the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["An active ",(0,i.jsx)(n.a,{href:"https://azure.microsoft.com/free/?ocid=buildia24_60days_blogs",children:"Azure Account"})]}),"\n",(0,i.jsxs)(n.li,{children:["A Cosmos DB instance with the ",(0,i.jsx)(n.a,{href:"https://www.kaggle.com/datasets/sujaykapadnis/price-quote-data/data",children:"pricing data"})," you set up in Part 1"]}),"\n",(0,i.jsxs)(n.li,{children:["Access to ",(0,i.jsx)(n.a,{href:"https://studio.azureml.net/",children:"Azure Machine Learning Studio"})]}),"\n",(0,i.jsxs)(n.li,{children:["An ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/azure/machine-learning/tutorial-azure-ml-in-a-day?view=azureml-api-2&ocid=buildia24_60days_blogs",children:"Azure Machine Learning workspace"})]}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/azure/machine-learning/quickstart-create-resources?view=azureml-api-2#create-a-new-notebook&ocid=buildia24_60days_blogs",children:"Jupyter notebook set up"})," in your workspace"]}),"\n",(0,i.jsxs)(n.li,{children:["Familiarity with ",(0,i.jsx)(n.a,{href:"https://azure.microsoft.com/products/machine-learning?ocid=buildia24_60days_blogs",children:"Azure Machine Learning"})," concepts"]}),"\n",(0,i.jsx)(n.li,{children:"Basic Python programming knowledge and understanding of ML concepts"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": You should add and run all code in this article into your Jupyter Notebook in the order in which it appears."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Check out the Azure ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://aka.ms/intelligent-apps/ate-cosmos?ocid=buildia24_60days_blogs",children:"Cosmos DB Ask The Expert"})})," session to learn how to build RAG solutions, manage chat history by seamlessly connecting with ",(0,i.jsx)(n.em,{children:"Azure OpenAI"}),", as well as explore the power of ",(0,i.jsx)(n.em,{children:"Azure Cosmos DB's copilot"}),". The experts will also cover how to seamlessly integrate your operational and transactional data with AI frameworks and sdks like Semantic Kernel, Langchain, and LlamaIndex."]})}),"\n",(0,i.jsx)(n.h4,{id:"extract-historical-pricing-data-from-cosmos-db",children:"Extract Historical Pricing Data from Cosmos DB"}),"\n",(0,i.jsxs)(n.p,{children:["Start by extracting historical pricing data from Cosmos DB, where you stored it in Part 1. For this tutorial, you\u2019ll extract items with names ending in ",(0,i.jsx)(n.code,{children:"JACKET"}),". Because the dataset is relatively small, a simple ",(0,i.jsx)(n.code,{children:"like"})," query will do. However, when working with larger data sets, you should consider additional upfront data cleaning and categorizing, to ensure you can query your database efficiently."]}),"\n",(0,i.jsx)(n.p,{children:"Run the code below to extract the data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"from azure.cosmos import CosmosClient, exceptions\r\nimport pandas as pd\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Initialize a Cosmos client\r\nendpoint = \"your_cosmos_db_endpoint\"\r\nkey = 'your_cosmos_db_key'\r\nclient = CosmosClient(endpoint, key)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Connect to the database and container\r\ndatabase_name = 'your_database_name'\r\ncontainer_name = 'your_container_name'\r\ndatabase = client.get_database_client(database_name)\r\ncontainer = database.get_container_client(container_name)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Query these items using the SQL query syntax\r\nquery = \"SELECT * FROM c where ITEM_DESC like '%JACKET'\"\r\nitems = list(container.query_items(query=query, enable_cross_partition_query=True))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Convert the query result to a DataFrame\r\npricing_data = pd.DataFrame(items)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"preprocess-data-and-split-into-training-and-testing",children:"Preprocess Data and Split into Training and Testing"}),"\n",(0,i.jsx)(n.p,{children:"Before feeding the data into an ML model, preprocess it and split it into training and testing sets using the code below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"from sklearn.model_selection import train_test_split\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Assume the DataFrame `pricing_data` has columns: 'quote_date', 'price', 'price_relative', 'item_id', etc.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Convert 'quote_date' from string to datetime for proper chronological splitting\r\npricing_data['QUOTE_DATE'] = pd.to_datetime(pricing_data['QUOTE_DATE'], format='%Y%m')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Selecting the features and target for the model\r\nX = pricing_data[['QUOTE_DATE', 'ITEM_ID', 'PRICE_RELATIVE','STRATUM_WEIGHT', 'SHOP_WEIGHT']]\r\ny = pricing_data['price']\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Split the data into training and testing sets\r\n# We'll use a chronological split rather than a random split to maintain the time series integrity\r\nsplit_date = pd.Timestamp('YYYY-MM-DD')  # replace with the appropriate date\r\ntrain = pricing_data.loc[pricing_data['QUOTE_DATE'] <= split_date]\r\ntest = pricing_data.loc[pricing_data['QUOTE_DATE'] > split_date]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"X_train, y_train = train[['ITEM_ID', 'PRICE_RELATIVE', 'STRATUM_WEIGHT', 'SHOP_WIGHT']], train['PRICE']\r\nX_test, y_test = test[['ITEM_ID', 'PRICE_RELATIVE', 'STRATUM_WEIGHT', 'SHOP_WEIGHT']], test['PRICE']\n"})}),"\n",(0,i.jsx)(n.h4,{id:"train-a-forecasting-model-using-azure-machine-learning",children:"Train a Forecasting Model Using Azure Machine Learning"}),"\n",(0,i.jsx)(n.p,{children:"Next, you\u2019ll build and train the forecasting model using Azure Machine Learning. Note that in the code below, you\u2019re using a local compute target, which works on simple datasets like the one used for this tutorial. However, Azure Machine Learning offers more powerful compute targets for more complex models."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"from azureml.core import Workspace, Experiment, Environment\r\nfrom azureml.train.automl import AutoMLConfig\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Connect to your Azure ML workspace\r\nws = Workspace.from_config()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Define your experiment\r\nexperiment_name = 'price_forecasting_experiment'\r\nexperiment = Experiment(ws, experiment_name)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Configure the automated ML job \r\n\r\nautoml_config = AutoMLConfig(\r\n    task='forecasting',\r\n    primary_metric='normalized_root_mean_squared_error',\r\n    experiment_timeout_minutes=30,\r\n    training_data=train,\r\n    label_column_name='PRICE',\r\n    n_cross_validations=5,\r\n    enable_early_stopping=True,\r\n    verbosity=logging.INFO,\r\n    compute_target='local'\r\n) \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Submit the experiment\r\nrun = experiment.submit(automl_config, show_output=True)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"evaluate-and-integrate-the-model",children:"Evaluate and Integrate the Model"}),"\n",(0,i.jsx)(n.p,{children:"Next, check the results of the model by running the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"from azureml.widgets import RunDetails\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Show run details while running\r\nRunDetails(run).show()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Wait for the run to complete\r\nrun.wait_for_completion()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Retrieve the best model from the AutoML run\r\nbest_run, fitted_model = run.get_output()\r\nprint(best_run)\r\nprint(fitted_model)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Evaluate the best model's accuracy using the test data\r\n# Assuming test data is a Pandas DataFrame with the same structure as the training data\r\nX_test = test_data.drop('PRICE', axis=1)  # Features (drop the target column)\r\ny_test = test_data['PRICE']  # True values of the target column\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Predict using the fitted model\r\ny_pred = fitted_model.predict(X_test)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Calculate the accuracy or any other performance metrics\r\nfrom sklearn.metrics import mean_squared_error, r2_score\r\nmse = mean_squared_error(y_test, y_pred)\r\nr2 = r2_score(y_test, y_pred)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'print(f"Mean Squared Error: {mse}")\r\nprint(f"R-squared: {r2}")\n'})}),"\n",(0,i.jsx)(n.p,{children:"With the performance metrics calculated, you can now determine whether the model\u2019s predictions are accurate enough for your needs. If they are, you can integrate the model with a hypothetical e-commerce platform. The easiest way to integrate a model is to deploy it using an Azure Machine Learning endpoint:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ws = Workspace.from_config() \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Register the model from the best run\r\nmodel = best_run.register_model(model_name='price_forecast_model', model_path='outputs/model.pkl') \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Download the scoring file produced by AutoML\r\nbest_run.download_file('outputs/scoring_file_v_1_0_0.py', 'score.py')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Download the environment file produced by AutoML\r\nbest_run.download_file(constants.CONDA_ENV_FILE_PATH, 'environment.yml')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Create the environment\r\nenv = Environment.from_conda_specification(name='forecasting_environment', file_path='environment.yml')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Create the inference configuration\r\ninference_config = InferenceConfig(entry_script='score.py', environment=env)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Create the deployment configuration\r\ndeployment_config = AciWebservice.deploy_configuration(cpu_cores=1, memory_gb=1)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Deploy the model as a web service\r\nservice_name = 'price-forecast-service'\r\nservice = Model.deploy(ws, service_name, [model], inference_config, deployment_config) \r\nservice.wait_for_deployment(show_output=True)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# The web service endpoint URL\r\nprint(service.scoring_uri)\n"})}),"\n",(0,i.jsx)(n.p,{children:"And with that, you\u2019ve deployed your Azure ML endpoint and are ready for Part 3!"}),"\n",(0,i.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial, you extracted data from Cosmos DB, preprocessed it, performed a train/test split, initiated a model training pipeline using Azure Machine Learning, and, finally, tested and deployed the model. These are crucial steps to building a system that can intelligently forecast product prices."}),"\n",(0,i.jsx)(n.p,{children:"In the third and final article of this series, you\u2019ll build a web interface that displays the generated price forecasts using approachable, simple graphs that help businesses easily make data-informed decisions."}),"\n",(0,i.jsxs)(n.p,{children:["To challenge yourself, learn more about Azure\u2019s AI and ML tooling, and put the skills you\u2019ve learned in this tutorial to work, participate in the ",(0,i.jsx)(n.a,{href:"https://azure.github.io/Cloud-Native/Build-IA/CloudSkills",children:"Data Cloud Skill Challenge"}),". You can also register for ",(0,i.jsxs)(n.strong,{children:["AKS ",(0,i.jsx)(n.a,{href:"https://aka.ms/aks-day",children:"Customer"})," and ",(0,i.jsx)(n.a,{href:"https://aka.ms/aks-lab-day",children:"Lab"})," Days"]})," at the premier conference for cloud-native technologies, ",(0,i.jsx)(n.em,{children:"KubeCon EU 2024"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},94918:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/3-2-1-e5a063f4e30bad99d184e8bec1007e72.jpeg"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var i=t(67294);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);