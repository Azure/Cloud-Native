"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31135],{60986:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var n=o(85893),s=o(11151);const r={slug:"28-where-am-i",title:"28. Serverless + Power Platforms",authors:["justin"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["azure","functions","serverless","power platform","custom connector","openapi"],image:"./img/banner.png",description:"Build a Power Platform custom connector with Azure Functions and OpenAPI to read my current GPS location and display it on Google Maps and Naver Map.",tags:["serverless-september","30-days-of-serverless","azure-functions","openapi","power-platform","custom-connector"]},a=void 0,c={permalink:"/Cloud-Native/blog/28-where-am-i",source:"@site/blog/2022-09-28/index.md",title:"28. Serverless + Power Platforms",description:"Build a Power Platform custom connector with Azure Functions and OpenAPI to read my current GPS location and display it on Google Maps and Naver Map.",date:"2022-09-28T00:00:00.000Z",formattedDate:"September 28, 2022",tags:[{label:"serverless-september",permalink:"/Cloud-Native/blog/tags/serverless-september"},{label:"30-days-of-serverless",permalink:"/Cloud-Native/blog/tags/30-days-of-serverless"},{label:"azure-functions",permalink:"/Cloud-Native/blog/tags/azure-functions"},{label:"openapi",permalink:"/Cloud-Native/blog/tags/openapi"},{label:"power-platform",permalink:"/Cloud-Native/blog/tags/power-platform"},{label:"custom-connector",permalink:"/Cloud-Native/blog/tags/custom-connector"}],readingTime:13.635,hasTruncateMarker:!1,authors:[{name:"Justin Yoo",title:"Senior Cloud Advocate @Microsoft",url:"https://github.com/justinyoo",imageURL:"https://github.com/justinyoo.png",key:"justin"}],frontMatter:{slug:"28-where-am-i",title:"28. Serverless + Power Platforms",authors:["justin"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["azure","functions","serverless","power platform","custom connector","openapi"],image:"./img/banner.png",description:"Build a Power Platform custom connector with Azure Functions and OpenAPI to read my current GPS location and display it on Google Maps and Naver Map.",tags:["serverless-september","30-days-of-serverless","azure-functions","openapi","power-platform","custom-connector"]},unlisted:!1,prevItem:{title:"29. Code to Cloud with `azd`",permalink:"/Cloud-Native/blog/29-azure-developer-cli"},nextItem:{title:"\ud83d\ude80 | Monitor + Troubleshoot Apps",permalink:"/Cloud-Native/blog/zero2hero-func-07"}},i={image:o(46105).Z,authorsImageUrls:[void 0]},l=[{value:"What We&#39;ll Cover",id:"what-well-cover",level:2},{value:"What is Power Platform custom connector?",id:"what-is-power-platform-custom-connector",level:2},{value:"Proxy app to Google Maps and Naver Map API",id:"proxy-app-to-google-maps-and-naver-map-api",level:2},{value:"API Management integration",id:"api-management-integration",level:2},{value:"Two ways of building custom connector",id:"two-ways-of-building-custom-connector",level:2},{value:"Export custom connector from API Management",id:"export-custom-connector-from-api-management",level:3},{value:"Import custom connector from OpenAPI document or URL",id:"import-custom-connector-from-openapi-document-or-url",level:3},{value:"Where am I? \u2013 Power Apps app",id:"where-am-i--power-apps-app",level:2},{value:"Custom connector integration",id:"custom-connector-integration",level:3},{value:"Controls",id:"controls",level:3},{value:"Workaround \u2013 Power Automate workflow",id:"workaround--power-automate-workflow",level:3},{value:"Exercise: Try this yourself!",id:"exercise-try-this-yourself",level:2},{value:"Resources: For self-study!",id:"resources-for-self-study",level:2}];function p(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Head:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r,{children:[(0,n.jsx)("meta",{name:"twitter:url",content:"https://azure.github.io/Cloud-Native/blog/28-where-am-i"}),(0,n.jsx)("meta",{name:"twitter:title",content:"#30DaysOfServerless: Serverless Power Platform Custom Connector for GPS Location"}),(0,n.jsx)("meta",{name:"twitter:description",content:"#30DaysOfServerless: How to read my current GPS location and display it on Google Maps and Naver Map using Power Platform custom connector built with Azure Functions and OpenAPI"}),(0,n.jsx)("meta",{name:"twitter:image",content:"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png"}),(0,n.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,n.jsx)("meta",{name:"twitter:creator",content:"@nitya"}),(0,n.jsx)("meta",{name:"twitter:site",content:"@AzureAdvocates"}),(0,n.jsx)("link",{rel:"canonical",href:"https://azure.github.io/Cloud-Native/blog/28-where-am-i"})]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.p,{children:["Welcome to ",(0,n.jsx)(t.code,{children:"Day 28"})," of #30DaysOfServerless!"]}),"\n",(0,n.jsxs)(t.p,{children:["Since it's the serverless end-to-end week, I'm going to discuss how to use a serverless application \u2013 ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-75362-juyoo",children:"Azure Functions"})," with ",(0,n.jsx)(t.a,{href:"https://aka.ms/azfunc-openapi",children:"OpenAPI extension"})," \u2013 to be seamlessly integrated with ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/connectors/custom-connectors/?WT.mc_id=dotnet-75362-juyoo",children:"Power Platform custom connector"})," through ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/azure/api-management/api-management-key-concepts?WT.mc_id=dotnet-75362-juyoo",children:"Azure API Management"})," - in a post I call ",(0,n.jsx)(t.em,{children:'"Where am I? My GPS Location with Serverless Power Platform Custom Connector"'})]}),"\n",(0,n.jsx)(t.p,{children:"OK. Are you ready? Let's get started!"}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"what-well-cover",children:"What We'll Cover"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"What is Power Platform custom connector?"}),"\n",(0,n.jsx)(t.li,{children:"Proxy app to Google Maps and Naver Map API"}),"\n",(0,n.jsx)(t.li,{children:"API Management integration"}),"\n",(0,n.jsx)(t.li,{children:"Two ways of building custom connector"}),"\n",(0,n.jsx)(t.li,{children:"Where am I? \u2013 Power Apps app"}),"\n",(0,n.jsx)(t.li,{children:"Exercise: Try this yourself!"}),"\n",(0,n.jsx)(t.li,{children:"Resources: For self-study!"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:o(43849).Z+"",width:"1600",height:"672"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.admonition,{title:"SAMPLE REPO",type:"info",children:(0,n.jsxs)(t.p,{children:["Want to follow along? Check out the ",(0,n.jsx)(t.a,{href:"https://github.com/justinyoo/google-naver-maps-custom-connector-sample",children:"sample app on GitHub repository"})," used in this post."]})}),"\n",(0,n.jsx)(t.h2,{id:"what-is-power-platform-custom-connector",children:"What is Power Platform custom connector?"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-platform/?WT.mc_id=dotnet-75362-juyoo",children:"Power Platform"})," is a low-code/no-code application development tool for ",(0,n.jsx)(t.a,{href:"https://www.gartner.com/en/articles/why-fusion-teams-matter",children:"fusion teams"})," that consist of a group of people. Those people come from various disciplines, including field experts (domain experts), IT professionals and professional developers, to draw business values successfully. Within the fusion team, the domain experts become citizen developers or low-code developers by Power Platform. In addition, Making Power Platform more powerful is that it offers hundreds of connectors to other Microsoft 365 and third-party services like SAP, ServiceNow, Salesforce, Google, etc."]}),"\n",(0,n.jsxs)(t.p,{children:["However, what if you want to use your internal APIs or APIs not yet offering their official connectors? Here's an example. If your company has an inventory management system, and you want to use it within your ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-apps/powerapps-overview?WT.mc_id=dotnet-75362-juyoo",children:"Power Apps"})," or ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-automate/getting-started?WT.mc_id=dotnet-75362-juyoo",children:"Power Automate"}),". That point is exactly where ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/connectors/custom-connectors/?WT.mc_id=dotnet-75362-juyoo",children:"Power Platform custom connectors"})," is necessary."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Inventory Management System for Power Apps",src:o(66191).Z+"",width:"1980",height:"1720"})}),"\n",(0,n.jsx)(t.p,{children:"Therefore, Power Platform custom connectors enrich those citizen developers' capabilities because those connectors can connect any API applications for the citizen developers to use."}),"\n",(0,n.jsxs)(t.p,{children:["In this post, let's build a custom connector that provides a static map image generated by ",(0,n.jsx)(t.a,{href:"https://developers.google.com/maps",children:"Google Maps API"})," and ",(0,n.jsx)(t.a,{href:"https://www.ncloud.com/product/applicationService/maps",children:"Naver Map API"})," using your GPS location."]}),"\n",(0,n.jsx)(t.h2,{id:"proxy-app-to-google-maps-and-naver-map-api",children:"Proxy app to Google Maps and Naver Map API"}),"\n",(0,n.jsxs)(t.p,{children:["First, let's build an Azure Functions app that connects to Google Maps and Naver Map. Suppose that you've already got the API keys for both services. If you haven't yet, get the keys first by visiting ",(0,n.jsx)(t.a,{href:"https://developers.google.com/maps",children:"here for Google"})," and ",(0,n.jsx)(t.a,{href:"https://www.ncloud.com/product/applicationService/maps",children:"here for Naver"}),". Then, store them to ",(0,n.jsx)(t.code,{children:"local.settings.json"})," within your Azure Functions app."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "Values": {\n    ...\n    "Maps__Google__ApiKey": "<GOOGLE_MAPS_API_KEY>",\n    "Maps__Naver__ClientId": "<NAVER_MAP_API_CLIENT_ID>",\n    "Maps__Naver__ClientSecret": "<NAVER_MAP_API_CLIENT_SECRET>"\n  }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Here's the sample logic to get the static image from Google Maps API. It takes the latitude and longitude of your current location and image zoom level, then returns the static map image. There are a few hard-coded assumptions, though:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"The image size should be 400x400."}),"\n",(0,n.jsxs)(t.li,{children:["The image should be in ",(0,n.jsx)(t.code,{children:".png"})," format."]}),"\n",(0,n.jsx)(t.li,{children:"The marker should show be red and show my location."}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'public class GoogleMapService : IMapService\n{\n    public async Task<byte[]> GetMapAsync(HttpRequest req)\n    {\n        var latitude = req.Query["lat"];\n        var longitude = req.Query["long"];\n        var zoom = (string)req.Query["zoom"] ?? "14";\n\n        var sb = new StringBuilder();\n        sb.Append("https://maps.googleapis.com/maps/api/staticmap")\n          .Append($"?center={latitude},{longitude}")\n          .Append("&size=400x400")\n          .Append($"&zoom={zoom}")\n          .Append($"&markers=color:red|{latitude},{longitude}")\n          .Append("&format=png32")\n          .Append($"&key={this._settings.Google.ApiKey}");\n        var requestUri = new Uri(sb.ToString());\n\n        var bytes = await this._http.GetByteArrayAsync(requestUri).ConfigureAwait(false);\n\n        return bytes;\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"NaverMapService"})," class has a similar logic with the same input and assumptions. Here's the code:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'public class NaverMapService : IMapService\n{\n    public async Task<byte[]> GetMapAsync(HttpRequest req)\n    {\n        var latitude = req.Query["lat"];\n        var longitude = req.Query["long"];\n        var zoom = (string)req.Query["zoom"] ?? "13";\n\n        var sb = new StringBuilder();\n        sb.Append("https://naveropenapi.apigw.ntruss.com/map-static/v2/raster")\n          .Append($"?center={longitude},{latitude}")\n          .Append("&w=400")\n          .Append("&h=400")\n          .Append($"&level={zoom}")\n          .Append($"&markers=color:blue|pos:{longitude}%20{latitude}")\n          .Append("&format=png")\n          .Append("&lang=en");\n        var requestUri = new Uri(sb.ToString());\n\n        this._http.DefaultRequestHeaders.Clear();\n        this._http.DefaultRequestHeaders.Add("X-NCP-APIGW-API-KEY-ID", this._settings.Naver.ClientId);\n        this._http.DefaultRequestHeaders.Add("X-NCP-APIGW-API-KEY", this._settings.Naver.ClientSecret);\n\n        var bytes = await this._http.GetByteArrayAsync(requestUri).ConfigureAwait(false);\n\n        return bytes;\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Let's take a look at the function endpoints. Here's for the Google Maps and Naver Map. As the ",(0,n.jsx)(t.code,{children:"GetMapAsync(req)"})," method returns a byte array value, you need to transform it as ",(0,n.jsx)(t.code,{children:"FileContentResult"}),", with the content type of ",(0,n.jsx)(t.code,{children:"image/png"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'// Google Maps\npublic class GoogleMapsTrigger\n{\n    [FunctionName(nameof(GoogleMapsTrigger.GetGoogleMapImage))]\n    public async Task<IActionResult> GetGoogleMapImage(\n        [HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "google/image")] HttpRequest req)\n    {\n        this._logger.LogInformation("C# HTTP trigger function processed a request.");\n\n        var bytes = await this._service.GetMapAsync(req).ConfigureAwait(false);\n\n        return new FileContentResult(bytes, "image/png");\n    }\n}\n\n// Naver Map\npublic class NaverMapsTrigger\n{\n    [FunctionName(nameof(NaverMapsTrigger.GetNaverMapImage))]\n    public async Task<IActionResult> GetNaverMapImage(\n        [HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "naver/image")] HttpRequest req)\n    {\n        this._logger.LogInformation("C# HTTP trigger function processed a request.");\n\n        var bytes = await this._service.GetMapAsync(req).ConfigureAwait(false);\n\n        return new FileContentResult(bytes, "image/png");\n    }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Then, add the OpenAPI capability to each function endpoint. Here's the example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'// Google Maps\npublic class GoogleMapsTrigger\n{\n    [FunctionName(nameof(GoogleMapsTrigger.GetGoogleMapImage))]\n    // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add decorators provided by the OpenAPI extension \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\n    [OpenApiOperation(operationId: nameof(GoogleMapsTrigger.GetGoogleMapImage), tags: new[] { "google" })]\n    [OpenApiParameter(name: "lat", In = ParameterLocation.Query, Required = true, Type = typeof(string), Description = "The **latitude** parameter")]\n    [OpenApiParameter(name: "long", In = ParameterLocation.Query, Required = true, Type = typeof(string), Description = "The **longitude** parameter")]\n    [OpenApiParameter(name: "zoom", In = ParameterLocation.Query, Required = false, Type = typeof(string), Description = "The **zoom level** parameter &ndash; Default value is `14`")]\n    [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "image/png", bodyType: typeof(byte[]), Description = "The map image as an OK response")]\n    // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add decorators provided by the OpenAPI extension \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\n    public async Task<IActionResult> GetGoogleMapImage(\n        [HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "google/image")] HttpRequest req)\n    {\n        ...\n    }\n}\n\n// Naver Map\npublic class NaverMapsTrigger\n{\n    [FunctionName(nameof(NaverMapsTrigger.GetNaverMapImage))]\n    // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add decorators provided by the OpenAPI extension \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\n    [OpenApiOperation(operationId: nameof(NaverMapsTrigger.GetNaverMapImage), tags: new[] { "naver" })]\n    [OpenApiParameter(name: "lat", In = ParameterLocation.Query, Required = true, Type = typeof(string), Description = "The **latitude** parameter")]\n    [OpenApiParameter(name: "long", In = ParameterLocation.Query, Required = true, Type = typeof(string), Description = "The **longitude** parameter")]\n    [OpenApiParameter(name: "zoom", In = ParameterLocation.Query, Required = false, Type = typeof(string), Description = "The **zoom level** parameter &ndash; Default value is `13`")]\n    [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "image/png", bodyType: typeof(byte[]), Description = "The map image as an OK response")]\n    // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add decorators provided by the OpenAPI extension \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\n    public async Task<IActionResult> GetNaverMapImage(\n        [HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "naver/image")] HttpRequest req)\n    {\n        ...\n    }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Run the function app in the local. Here are the latitude and longitude values for Seoul, Korea."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"latitude: 37.574703"}),"\n",(0,n.jsx)(t.li,{children:"longitude: 126.978519"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Google Map for Seoul",src:o(81054).Z+"",width:"1820",height:"2004"})}),"\n",(0,n.jsx)(t.p,{children:"It seems to be working! Let's deploy it to Azure."}),"\n",(0,n.jsx)(t.h2,{id:"api-management-integration",children:"API Management integration"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://visualstudio.microsoft.com/vs/?WT.mc_id=dotnet-75362-juyoo",children:"Visual Studio 2022"})," provides a built-in deployment tool for ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-75362-juyoo",children:"Azure Functions"})," app onto Azure. In addition, the deployment tool supports seamless integration with ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/azure/api-management/api-management-key-concepts?WT.mc_id=dotnet-75362-juyoo",children:"Azure API Management"}),' as long as your Azure Functions app enables the OpenAPI capability. In this post, I\'m going to use this feature. Right-mouse click on the Azure Functions project and select the "Publish" menu.']}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Visual Studio context menu for publish",src:o(89370).Z+"",width:"914",height:"902"})}),"\n",(0,n.jsx)(t.p,{children:'Then, you will see the publish screen. Click the "\u2795 New" button to create a new publish profile.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create a new publish profile",src:o(15792).Z+"",width:"1127",height:"741"})}),"\n",(0,n.jsx)(t.p,{children:'Choose "Azure" and click the "Next" button.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Choose the target platform for publish",src:o(97495).Z+"",width:"1608",height:"1128"})}),"\n",(0,n.jsx)(t.p,{children:'Select the app instance. This time simply pick up the "Azure Function App (Windows)" option, then click "Next".'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Choose the target OS for publish",src:o(993).Z+"",width:"1608",height:"1128"})}),"\n",(0,n.jsx)(t.p,{children:'If you already provision an Azure Function app instance, you will see it on the screen. Otherwise, create a new one. Then, click "Next".'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Choose the target instance for publish",src:o(30110).Z+"",width:"1608",height:"1128"})}),"\n",(0,n.jsx)(t.p,{children:'In the next step, you are asked to choose the Azure API Management instance for integration. Choose one, or create a new one. Then, click "Next".'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Choose the APIM instance for integration",src:o(38396).Z+"",width:"1608",height:"1128"})}),"\n",(0,n.jsx)(t.p,{children:'Finally, select the publish method \u2013 either local publish or GitHub Actions workflow. Let\'s pick up the local publish method for now. Then, click "Finish".'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Choose the deployment type",src:o(54178).Z+"",width:"1608",height:"1128"})}),"\n",(0,n.jsx)(t.p,{children:'The publish profile has been created. Click "Close" to move on.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Publish profile created",src:o(52814).Z+"",width:"1608",height:"1128"})}),"\n",(0,n.jsx)(t.p,{children:'Now the function app is ready for deployment. Click the "Publish" button and see how it goes.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Publish function app",src:o(29788).Z+"",width:"2192",height:"847"})}),"\n",(0,n.jsx)(t.p,{children:"The Azure function app has been deployed and integrated with the Azure API Management instance."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Function app published",src:o(86845).Z+"",width:"2171",height:"674"})}),"\n",(0,n.jsx)(t.p,{children:"Go to the published function app site, and everything looks OK."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Function app on Azure",src:o(67802).Z+"",width:"3744",height:"1778"})}),"\n",(0,n.jsx)(t.p,{children:"And API Management shows the function app integrated perfectly."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Function app integrated with APIM",src:o(37446).Z+"",width:"3740",height:"2019"})}),"\n",(0,n.jsx)(t.p,{children:"Now, you are ready to create a custom connector. Let's move on."}),"\n",(0,n.jsx)(t.h2,{id:"two-ways-of-building-custom-connector",children:"Two ways of building custom connector"}),"\n",(0,n.jsx)(t.p,{children:"There are two ways to create a custom connector."}),"\n",(0,n.jsx)(t.h3,{id:"export-custom-connector-from-api-management",children:"Export custom connector from API Management"}),"\n",(0,n.jsx)(t.p,{children:'First, you can directly use the built-in API Management feature. Then, click the ellipsis icon and select the "Create Power Connector" menu.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create Power Connector menu",src:o(95037).Z+"",width:"3740",height:"2020"})}),"\n",(0,n.jsx)(t.p,{children:'Then, you are redirected to this screen. While the "API" and "API display name" fields are pre-populated, you need to choose the Power Platform environment tied to your tenant. Choose an environment, click "Authenticate", and click "Create".'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create custom connector screen",src:o(77085).Z+"",width:"3740",height:"2020"})}),"\n",(0,n.jsx)(t.p,{children:"Check your custom connector on Power Apps or Power Automate side."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Custom connector created on Power Apps",src:o(72813).Z+"",width:"3744",height:"2018"})}),"\n",(0,n.jsx)(t.p,{children:"However, there's a caveat to this approach. Because it's tied to your tenant, you should use the second approach if you want to use this custom connector on the other tenant."}),"\n",(0,n.jsx)(t.h3,{id:"import-custom-connector-from-openapi-document-or-url",children:"Import custom connector from OpenAPI document or URL"}),"\n",(0,n.jsx)(t.p,{children:'Click the ellipsis icon again and select the "Export" menu.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Export menu",src:o(97862).Z+"",width:"3740",height:"2020"})}),"\n",(0,n.jsx)(t.p,{children:'On the Export API screen, choose the "OpenAPI v2 (JSON)" panel because Power Platform custom connector currently accepts version 2 of the OpenAPI document.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Select OpenAPI v2",src:o(33298).Z+"",width:"3740",height:"2020"})}),"\n",(0,n.jsx)(t.p,{children:'Download the OpenAPI document to your local computer and move to your Power Apps or Power Automate page under your desired environment. I\'m going to use the Power Automate page. First, go to the "Data" \u27a1\ufe0f "Custom connectors" page. Then, click the "\u2795 New custom connector" \u27a1\ufe0f "Import an OpenAPI file" at the top right corner.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"New custom connector",src:o(39651).Z+"",width:"3744",height:"2018"})}),"\n",(0,n.jsx)(t.p,{children:'When a modal pops up, give the custom connector name and import the OpenAPI document exported above. Then, click "Continue".'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Import custom connector",src:o(32050).Z+"",width:"1520",height:"851"})}),"\n",(0,n.jsx)(t.p,{children:'Actually, that\'s it! Next, click the "\u2714\ufe0f Create connector" button to create the connector.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create custom connector",src:o(82800).Z+"",width:"3744",height:"2018"})}),"\n",(0,n.jsx)(t.p,{children:'Go back to the custom connector page, and you will see the "Maps API" custom connector you just created.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Custom connector imported",src:o(88775).Z+"",width:"3744",height:"2018"})}),"\n",(0,n.jsx)(t.p,{children:"So, you are ready to create a Power Apps app to display your location on Google Maps or Naver Map! Let's move on."}),"\n",(0,n.jsx)(t.h2,{id:"where-am-i--power-apps-app",children:"Where am I? \u2013 Power Apps app"}),"\n",(0,n.jsxs)(t.p,{children:["Open the Power Apps Studio, and create an empty canvas app, named ",(0,n.jsx)(t.code,{children:"Who am I"})," with a phone layout."]}),"\n",(0,n.jsx)(t.h3,{id:"custom-connector-integration",children:"Custom connector integration"}),"\n",(0,n.jsx)(t.p,{children:'To use the custom connector created above, you need to add it to the Power App. Click the cylinder icon on the left and click the "Add data" button.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Add custom connector to data pane",src:o(57888).Z+"",width:"669",height:"1044"})}),"\n",(0,n.jsx)(t.p,{children:'Search the custom connector name, "Maps API", and click the custom connector to add.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Search custom connector",src:o(18691).Z+"",width:"1300",height:"2020"})}),"\n",(0,n.jsx)(t.p,{children:'To use the custom connector, you also need to create a connection to it. Click the "Connect" button and move on.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create connection to custom connector",src:o(74855).Z+"",width:"681",height:"942"})}),"\n",(0,n.jsx)(t.p,{children:"Now, you've got the connection to the custom connector."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Connection to custom connector ready",src:o(12465).Z+"",width:"661",height:"992"})}),"\n",(0,n.jsx)(t.h3,{id:"controls",children:"Controls"}),"\n",(0,n.jsxs)(t.p,{children:["Let's build the Power Apps app. First of all, put three controls \u2013 ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-apps/maker/canvas-apps/controls/control-image?WT.mc_id=dotnet-75362-juyoo",children:"Image"}),", ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-apps/maker/canvas-apps/controls/control-slider?WT.mc_id=dotnet-75362-juyoo",children:"Slider"})," and ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-apps/maker/canvas-apps/controls/control-button?WT.mc_id=dotnet-75362-juyoo",children:"Button"})," onto the canvas."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Power Apps control added",src:o(75764).Z+"",width:"3744",height:"1922"})}),"\n",(0,n.jsxs)(t.p,{children:['Click the "Screen1" control and change the value on the property "OnVisible" to the formula below. The formula stores the current slider value in the ',(0,n.jsx)(t.code,{children:"zoomlevel"})," collection."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"ClearCollect(\n    zoomlevel,\n    Slider1.Value\n)\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Click the "Botton1" control and change the value on the property "OnSelected" to the formula below. It passes the current latitude, longitude and zoom level to the custom connector and receives the image data. The received image data is stored in the ',(0,n.jsx)(t.code,{children:"result"})," collection."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"ClearCollect(\n    result,\n    MAPS.GetGoogleMapImage(\n        Location.Latitude,\n        Location.Longitude,\n        { zoom: First(zoomlevel).Value }\n    )\n)\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Click the "Image1" control and change the value on the property "Image" to the formula below. It gets the image data from the ',(0,n.jsx)(t.code,{children:"result"})," collection."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"First(result).Url\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Click the "Slider1" control and change the value on the property "OnChange" to the formula below. It stores the current slider value to the ',(0,n.jsx)(t.code,{children:"zoomlevel"})," collection, followed by calling the custom connector to get the image data against the current location."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"ClearCollect(\n    zoomlevel,\n    Slider1.Value\n);\nClearCollect(\n    result,\n    MAPS.GetGoogleMapImage(\n        Location.Latitude,\n        Location.Longitude,\n        { zoom: First(zoomlevel).Value }\n    )\n)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["That seems to be OK. Let's click the \"Where am I?\" button. But it doesn't show the image. The ",(0,n.jsx)(t.code,{children:"First(result).Url"})," value is actually similar to this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"appres://blobmanager/1090a86393a843adbfcf428f0b90e91b/1\n"})}),"\n",(0,n.jsx)(t.p,{children:"It's the image reference value somewhere you can't get there."}),"\n",(0,n.jsx)(t.h3,{id:"workaround--power-automate-workflow",children:"Workaround \u2013 Power Automate workflow"}),"\n",(0,n.jsxs)(t.p,{children:['Therefore, you need a workaround using a Power Automate workflow to sort out this issue. Open the Power Automate Studio, create an instant cloud flow with the Power App trigger, and give it the "Where am I" name. Then add input parameters of ',(0,n.jsx)(t.code,{children:"lat"}),", ",(0,n.jsx)(t.code,{children:"long"})," and ",(0,n.jsx)(t.code,{children:"zoom"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Power Apps trigger on Power Automate workflow",src:o(88916).Z+"",width:"1250",height:"700"})}),"\n",(0,n.jsx)(t.p,{children:"Add custom connector action to get the map image."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Select action to get the Google Maps image",src:o(3533).Z+"",width:"1220",height:"880"})}),"\n",(0,n.jsx)(t.p,{children:"In the action, pass the appropriate parameters to the action."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Pass parameters to the custom connector action",src:o(1359).Z+"",width:"1220",height:"385"})}),"\n",(0,n.jsx)(t.p,{children:'Add a "Response" action and put the following values into each field.'}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'"Body" field:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bicep",children:'{\n  "base64Image": <power_automate_expression>\n}\n'})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<power_automate_expression>"})," should be ",(0,n.jsx)(t.code,{children:"concat('data:', body('GetGoogleMapImage')?['$content-type'], ';base64,', body('GetGoogleMapImage')?['$content'])"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'"Response Body JSON Schema" field:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "base64Image": {\n      "type": "string"\n    }\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Format the Response action",src:o(88890).Z+"",width:"1220",height:"1070"})}),"\n",(0,n.jsx)(t.p,{children:"Let's return to the Power Apps Studio and add the Power Automate workflow you created."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Add Power Automate workflow",src:o(6345).Z+"",width:"1300",height:"944"})}),"\n",(0,n.jsx)(t.p,{children:'Select "Button1" and change the value on the property "OnSelect" below. It replaces the direct call to the custom connector with the Power Automate workflow.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"ClearCollect(\n    result,\n    WhereamI.Run(\n        Location.Latitude,\n        Location.Longitude,\n        First(zoomlevel).Value\n    )\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:'Also, change the value on the property "OnChange" of the "Slider1" control below, replacing the custom connector call with the Power Automate workflow call.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"ClearCollect(\n    zoomlevel,\n    Slider1.Value\n);\nClearCollect(\n    result,\n    WhereamI.Run(\n        Location.Latitude,\n        Location.Longitude,\n        First(zoomlevel).Value\n    )\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:'And finally, change the "Image1" control\'s "Image" property value below.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-powerappsfl",children:"First(result).base64Image\n"})}),"\n",(0,n.jsx)(t.p,{children:'The workaround has been applied. Click the "Where am I?" button to see your current location from Google Maps.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Run Power Apps app #1",src:o(91334).Z+"",width:"3744",height:"2018"})}),"\n",(0,n.jsx)(t.p,{children:"If you change the slider left or right, you will see either the zoomed-in image or the zoomed-out image."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Run Power Apps app #2",src:o(30227).Z+"",width:"3744",height:"2018"})}),"\n",(0,n.jsx)(t.p,{children:"Now, you've created a Power Apps app to show your current location using:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Google Maps API through the custom connector, and"}),"\n",(0,n.jsx)(t.li,{children:"Custom connector written in Azure Functions with OpenAPI extension!"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"exercise-try-this-yourself",children:"Exercise: Try this yourself!"}),"\n",(0,n.jsxs)(t.p,{children:["You can fork this ",(0,n.jsx)(t.a,{href:"https://github.com/justinyoo/google-naver-maps-custom-connector-sample",children:"GitHub repository"})," to your account and play around with it to see how the custom connector works. After forking the repository, make sure that you create all the necessary secrets to your repository documented in the README file."]}),"\n",(0,n.jsx)(t.p,{children:'Then, click the "Deploy to Azure" button, and it will provision all necessary Azure resources and deploy an Azure Functions app for a custom connector.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true",alt:"Deploy To Azure"})}),"\n",(0,n.jsxs)(t.p,{children:["Once everything is deployed successfully, try to create a ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-apps/powerapps-overview?WT.mc_id=dotnet-75362-juyoo",children:"Power Apps app"})," and ",(0,n.jsx)(t.a,{href:"https://docs.microsoft.com/power-automate/getting-started?WT.mc_id=dotnet-75362-juyoo",children:"Power Automate workflow"})," to see your current location in real-time!"]}),"\n",(0,n.jsx)(t.h2,{id:"resources-for-self-study",children:"Resources: For self-study!"}),"\n",(0,n.jsx)(t.p,{children:"Want to know more about Power Platform custom connector and Azure Functions OpenAPI extension? Here are several resources you can take a look at:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsxs)(t.a,{href:"https://docs.microsoft.com/training/paths/transform-business-applications-with-fusion-development/?WT.mc_id=dotnet-75362-juyoo",children:[(0,n.jsx)(t.strong,{children:"Microsoft Learn"}),": Transform your business applications with fusion development"]})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsxs)(t.a,{href:"https://aka.ms/azfunc-openapi",children:[(0,n.jsx)(t.strong,{children:"GitHub repository"}),": Azure Functions OpenAPI Extension"]})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},46105:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/banner-3e7c6e6693ff558354358bf059a7c853.png"},66191:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-01-d6fac44727880dd526e03e2010938f0a.png"},81054:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-02-a3fc7d2cecbbf67069ec8aa4bf8ce52b.png"},89370:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-03-2d9e1dbe2c83d6466021c293a5e8f7e3.png"},15792:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-04-b977bba0a3ab4c93a96507846fffe3fa.png"},97495:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-05-e57ab49d94cd5f85818fcc52f0bcae39.png"},993:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-06-13b63e8c2cc950ddf632df116f502294.png"},30110:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-07-6af9c72f6f8902fbe457543f3ecda5c7.png"},38396:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-08-b2d34b5ea9ddd5e4a0fe435d595ab766.png"},54178:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-09-359f43a8f8652049f72319270287508b.png"},52814:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-10-33476d1a905985ba03417cbec48b7f3e.png"},29788:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-11-9a095865489916d95a5bc9fe86e6c30b.png"},86845:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-12-6c9c271c4d7c0db17627ff8f3885f455.png"},67802:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-13-693ef72fc7f6872e0ee20b2e5df60f43.png"},37446:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-14-2d93caa7008a0e987e746da7c7d8394c.png"},95037:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-15-6a12725fa9910e64352f37db80df18d6.png"},77085:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-16-b38ad1d7c34f0ad7ff9dba7e2bb34ebb.png"},72813:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-17-97512785618cde5ced81d5c0e6c00255.png"},97862:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-18-64689301d9363b7e31c8344ccdaf5171.png"},33298:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-19-ef3102ea7e974ebe09f9b3da08137b30.png"},39651:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-20-4b2014da86c8fcbd3f7f9340772dbc6e.png"},32050:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-21-192c69f9c600c326b0ee2a38e5717df8.png"},82800:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-22-db21d8177d6141e9b72638958b85706d.png"},88775:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-23-d62a15c41d3c92c3eef96d315f9af563.png"},57888:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-24-9e9c3740c0e94aca0337ad157e237ad8.png"},18691:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-25-1c6f92ab001f1cfb580d1c764b3606cd.png"},74855:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-26-4f5ef854079d81869697e89f64ac274b.png"},12465:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-27-1cd9a596a451fe339b1d9a1eb186f451.png"},75764:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-28-ef73bc2f1dce3e4a76c0965c201a12de.png"},88916:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-29-55e6af8fe5ffea6563cea64747cd6cd0.png"},3533:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-30-41539cecc71a570428cf215084d13872.png"},1359:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-31-eea07023aa2901c6cf44b681fcfb43e4.png"},88890:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-32-7a518a829f43dc6adb07e3e0e2560b16.png"},6345:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-33-d95c7bf0ed2ada4fb7ab84a85a935726.png"},91334:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-34-817219ce9f1534d0b79affc1b4027df6.png"},30227:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/28-serverless-power-platform-custom-connector-35-5c8cb9cb4f5eda28d037e8d9dd35b158.png"},43849:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/banner-3e7c6e6693ff558354358bf059a7c853.png"},11151:(e,t,o)=>{o.d(t,{Z:()=>c,a:()=>a});var n=o(67294);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);