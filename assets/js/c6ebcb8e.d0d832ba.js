"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67784],{26660:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"setting-up-your-development-environment-2","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2","source":"@site/blog-30-days-of-ia-2024/2024-09-20/setting-up-your-development-environment-2.md","title":"1.2b Setting Up Your Development Environment Part 2","description":"Learn how to create and configure the Azure OpenAI Service resource that we\u2019ll use in our example app.","date":"2024-09-24T09:00:00.000Z","formattedDate":"September 24, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":10.59,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-09-24T09:00","slug":"setting-up-your-development-environment-2","title":"1.2b Setting Up Your Development Environment Part 2","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Learn how to create and configure the Azure OpenAI Service resource that we\u2019ll use in our example app.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"nextItem":{"title":"1.2a Setting up your development environment Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/setting-up-your-development-environment-2\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\n## 1.2b. Setting up your development environment\\r\\n\\r\\n## Part 2. Preparing the Azure OpenAI Service resource\\r\\nLearn how to create and configure the Azure OpenAI Service resource that we\u2019ll use in our example app.\\r\\n\\r\\n### What we cover:\\r\\n- Creating an Azure OpenAI instance\\r\\n- Setting up Azure API Management\\r\\n- Exploring the options for creating our app hosting environments on Azure\\r\\n\\r\\n## Introduction\\r\\nIn our [previous post](https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1), we discussed setting up your local development environment and creating the Azure-based database, storage, and secret management services that you\u2019ll use when running our application. In this post, we set up the Azure OpenAI instance that provides the core of our content generation capabilities. After you\u2019ve created the Azure OpenAI instance, we\u2019ll finish our preparation tasks by setting up Azure API Management and then finally creating our preferred app hosting resources (Azure Kubernetes Service [AKS] or Azure App Service).\\r\\n\\r\\n## Step 1. Set up Azure OpenAI\\r\\nCreate two Azure OpenAI deployments\u2014one for **GPT-4o** (chat completion) and another for **text embedding**.\\r\\n\\r\\n1. **Create a new Azure OpenAI resource**. Go to the Azure portal, and search for **Azure OpenAI**.\\r\\n2. Deploy two separate instances:\\r\\n   - **Chat completion (GPT-4o)** for generating content.\\r\\n   - **Embedding model** for semantic search functionality.\\r\\n\\r\\n### Create the Azure OpenAI resource\\r\\n\\r\\n#### Azure portal instructions\\r\\n1. Use the Azure portal to deploy **Azure OpenAI**.\\r\\n\\r\\n   ![The \\"Create Azure OpenAI\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-1.png)\\r\\n\\r\\n2. After provisioning Azure, open Azure OpenAI and go to **Azure OpenAI Studio**.\\r\\n\\r\\n   ![The \\"aistudy-chatcompletion\\" screen in the Azure portal, with the focus on \\"Go to Azure OpenAI Studio.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-2.png)\\r\\n\\r\\n3. Go to **Deployments**, and then deploy the models.\\r\\n\\r\\n   ![The \\"Manage deployments of your models...\\" screen in the Azure portal, with the focus on \\"Deployments\\" and \\"Deploy base model.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-3.png)\\r\\n\\r\\n4. Search **GPT-4o** for chat completion. Set tokens-per-minute rate limit (depending on response length), and deploy.\\r\\n\\r\\n   ![alt: The \\"Deploy model gpt-4o\\" screen in the Azure portal, with the focus on \\"Tokens per Minute Rate Limit.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-4.png)\\r\\n\\r\\n   Make sure to save the **Target URI** and **Key** for future use.\\r\\n\\r\\n   ![The \\"gpt-4o\\" screen in the Azure portal, with the focus on \\"Endpoint.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-5.png)\\r\\n\\r\\n   Deploy the **text-embedding-3-small** model to embed the data in the same way.\\r\\n\\r\\n   ![The \\"text-embedding-3-small\\" screen in the Azure portal, with the focus on \\"Endpoint.\\"](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-6.png)\\r\\n\\r\\n#### CLI instructions\\r\\nUse the following script when performing these instructions:\\r\\n\\r\\nShell script: `create-openai-resource.sh`\\r\\n\\r\\n```\\r\\n#!/bin/bash\\r\\n\\r\\n# Function to display help\\r\\nfunction display_help() {\\r\\n  echo \\"Usage: $0 --name <OpenAI Account Name> --resource-group <Resource Group Name> --location <Location> [--help]\\"\\r\\n  echo\\r\\n  echo \\"Options:\\"\\r\\n  echo \\"  --name              The display name of the Azure OpenAI account.\\"\\r\\n  echo \\"  --resource-group    The name of the Azure resource group.\\"\\r\\n  echo \\"  --location          The Azure region/location for the resource. (e.g., eastus, westus)\\"\\r\\n  echo \\"  --help              Display this help message and exit.\\"\\r\\n  echo\\r\\n  exit 0\\r\\n}\\r\\n\\r\\n# Function to check if the user is logged in\\r\\nfunction check_azure_login() {\\r\\n  echo \\"Checking Azure CLI login status...\\"\\r\\n  az account show &> /dev/null\\r\\n  if [ $? -ne 0 ]; then\\r\\n    echo \\"You are not logged in. Logging in now...\\"\\r\\n    az login\\r\\n    if [ $? -ne 0 ]; then\\r\\n      echo \\"Azure login failed. Exiting script.\\"\\r\\n      exit 1\\r\\n    fi\\r\\n  else\\r\\n    echo \\"You are already logged in.\\"\\r\\n  fi\\r\\n}\\r\\n\\r\\n# Parse command line arguments\\r\\nOPENAI_ACCOUNT_NAME=\\"\\"\\r\\nRESOURCE_GROUP=\\"\\"\\r\\nLOCATION=\\"\\"\\r\\n\\r\\nwhile [[ $# -gt 0 ]]; do\\r\\n  case \\"$1\\" in\\r\\n    --name)\\r\\n      OPENAI_ACCOUNT_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --resource-group)\\r\\n      RESOURCE_GROUP=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --location)\\r\\n      LOCATION=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --help)\\r\\n      display_help\\r\\n      ;;\\r\\n    *)\\r\\n      echo \\"Unknown option: $1\\"\\r\\n      display_help\\r\\n      ;;\\r\\n  esac\\r\\ndone\\r\\n\\r\\n# Ensure required arguments are provided\\r\\nif [[ -z \\"$OPENAI_ACCOUNT_NAME\\" || -z \\"$RESOURCE_GROUP\\" || -z \\"$LOCATION\\" ]]; then\\r\\n  echo \\"Error: --name, --resource-group, and --location are required.\\"\\r\\n  display_help\\r\\nfi\\r\\n\\r\\n# Step 0: Check if logged in\\r\\ncheck_azure_login\\r\\n\\r\\n# Step 1: Create resource group (if not exists)\\r\\necho \\"Creating resource group $RESOURCE_GROUP (if it doesn\'t already exist)...\\"\\r\\naz group create --name \\"$RESOURCE_GROUP\\" --location \\"$LOCATION\\"\\r\\n\\r\\n# Step 2: Create OpenAI resource\\r\\necho \\"Creating Azure OpenAI resource...\\"\\r\\naz cognitiveservices account create \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\\r\\n  --kind OpenAI \\\\\\r\\n  --sku S0 \\\\\\r\\n  --location \\"$LOCATION\\" \\\\\\r\\n  --yes\\r\\n\\r\\n# Step 3: Deploy GPT-4o model with increased token limit (10K capacity)\\r\\necho \\"Deploying GPT-4o model...\\"\\r\\naz cognitiveservices account deployment create \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\\r\\n  --deployment-name \\"gpt-4o-deployment\\" \\\\\\r\\n  --model-name \\"gpt-4o\\" \\\\\\r\\n  --model-version \\"2024-05-13\\" \\\\\\r\\n  --model-format OpenAI \\\\\\r\\n  --sku-capacity 10 \\\\\\r\\n  --sku-name \\"Standard\\"\\r\\n\\r\\n# Step 4: Deploy text-embedding-3-small model\\r\\necho \\"Deploying text-embedding-3-small model...\\"\\r\\naz cognitiveservices account deployment create \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\" \\\\\\r\\n  --deployment-name \\"text-embedding-3-small-deployment\\" \\\\\\r\\n  --model-name \\"text-embedding-3-small\\" \\\\\\r\\n  --model-version \\"1\\" \\\\\\r\\n  --model-format OpenAI \\\\\\r\\n  --sku-name \\"Standard\\" \\\\\\r\\n  --sku-capacity 120 \\\\\\r\\n\\r\\n# Verify deployments\\r\\necho \\"Listing deployed models...\\"\\r\\naz cognitiveservices account deployment list \\\\\\r\\n  --name \\"$OPENAI_ACCOUNT_NAME\\" \\\\\\r\\n  --resource-group \\"$RESOURCE_GROUP\\"\\r\\n\\r\\n```\\r\\n\\r\\nRun the script.\\r\\n\\r\\n**Save the script**. Save the script as `create-openai-resource.sh`.\\r\\n\\r\\nMake the script executable:\\r\\n\\r\\n```\\r\\nchmod +x create-openai-resource.sh \\r\\n```\\r\\n\\r\\nRun the script: \\r\\n\\r\\n```\\r\\n./create-openai-resource.sh --name <NAME> --resource-group <RESOURCE_GROUP_NAME> --location <LOCATION>\\r\\n```\\r\\n\\r\\n![Create OpenAI Resource](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-7.png)\\r\\n\\r\\n:::info\\r\\nJoin the next snackable AI Demo Bytes to explore how to [apply auto-scaling and load testing to your AI applications](https://aka.ms/demo-bytes/ep6?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Step 2. Set up Azure API Management\\r\\nAPI Management serves as the gateway between your front-end, middleware, and back-end services.\\r\\n\\r\\n1. **Create an API Management instance**. Search for **API Management**, and create a new instance.\\r\\n2. **Configure two services (back-end service API Management and middleware service API Management)**:\\r\\n   - Back end for data management (Azure Cosmos DB, storage account)\\r\\n   - Middleware for Azure OpenAI Service\\r\\n\\r\\n### Azure portal instructions\\r\\n1. In the Azure portal, search for **API Management**.\\r\\n2. Choose **Create**, and complete the resource creation wizard.\\r\\n3. Select **Create** to deploy the API Management service.\\r\\n\\r\\n![The \\"Create API Management service\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-8.png)\\r\\n\\r\\n#### CLI instructions\\r\\n1. Create a resource group (optional).\\r\\n\\r\\n   If you need to create a resource group, use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope):\\r\\n\\r\\n```\\r\\naz group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n2. Create the API Management service using the following command:\\r\\n\\r\\n```\\r\\naz apim create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --name <your-apim-name> \\\\\\r\\n  --publisher-email <your-email-address> \\\\\\r\\n  --publisher-name <your-publisher-name> \\\\\\r\\n  --location <your-location> \\\\\\r\\n  --sku-name <sku-type>\\r\\n```\\r\\n\\r\\n**Parameters**\\r\\n\\r\\n* `--resource-group`: The name of the resource group where the API Management instance will be created. \\r\\n* `--name`: The name of your API Management instance. \\r\\n* `--publisher-email`: The email address of the API publisher. \\r\\n* `--publisher-name`: The name of the API publisher. \\r\\n* `--location`: The region where your API Management service will be deployed. \\r\\n* `--sku-name`: The pricing tier for the API Management instance (`Developer`, `Basic`, `Standard`, or `Premium`). Default value is `Developer`.\\r\\n\\r\\n**SKUs**\\r\\n\\r\\n* `Developer`: Best for non-production use.\\r\\n* `Basic`: Entry-level production tier.\\r\\n* `Standard`: Mid-range production tier.\\r\\n* `Premium`: Enterprise-level tier with additional features like multiregion support.\\r\\n\\r\\n![Code lines: Last login](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-9.png)\\r\\n\\r\\n![Code lines: az apim create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-10.png)\\r\\n\\r\\n## Step 3. Prepare your app hosting environments\u2014AKS or App Service\\r\\n\\r\\nWith the Azure OpenAI instance in place and our API Management configuration created, we have one more piece to set up before we can start building and deploying our app. We need to determine what type of service we\u2019re going to use in Azure for hosting the front-end, middleware, and back-end app code.\\r\\n\\r\\n### Choose your deployment technology\\r\\n\\r\\nDepending on your preferences or business requirements, you can choose either **Azure Kubernetes Service (AKS)** or **Azure App Service** when deploying your app to Azure.\\r\\n\\r\\nTo recap, here\u2019s a quick high-level overview of the **AKS** versus **App Service**.\\r\\n\\r\\n| Feature      | AKS                                    | App Service                                   |\\r\\n|--------------|----------------------------------------|-----------------------------------------------|\\r\\n| Flexibility  | More control, containerized apps       | Simplified, fully managed                     |\\r\\n| Scalability  | High customization and scalability     | Easy scaling for small to medium-sized apps   |\\r\\n| Use case     | Ideal for complex, enterprise apps     | Ideal for rapid deployment                    |\\r\\n\\r\\nBoth are robust options, and you can select the one that best fits your business needs.\\r\\n\\r\\n### Use the Azure App Service path\\r\\n\\r\\nCreate a separate App Service instance for the front-end, middleware, and back-end services.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n**Create a web app**. In the Azure portal, search for **App Service** and create a new app. \\r\\n\\r\\nIn the first section of the resource creation wizard, select the correct **Runtime stack**:  \\r\\n\\r\\n* For the back-end service, select **Java 21**.\\r\\n* For the middleware service, select **Java 17**.\\r\\n* For the front-end service, select **Node 20 LTS**.\\r\\n\\r\\nComplete the resource creation wizard, and select **Create** to deploy the App Service instance.\\r\\n\\r\\n![The \\"Create Web App\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-11.png)\\r\\n\\r\\n### CLI instructions\\r\\n\\r\\n  1. Create a resource group (optional).\\r\\n\\r\\n   If you need to create a resource group, use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope):\\r\\n\\r\\n```\\r\\naz group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n  2. Create an App Service plan.\\r\\n\\r\\n   First, create an App Service plan, which defines the region, pricing tier, and scaling options of your App Service instance:\\r\\n\\r\\n```\\r\\naz appservice plan create \\\\\\r\\n  --name <your-app-service-plan-name> \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --sku B1 \\\\\\r\\n  --is-linux \\r\\n```\\r\\n\\r\\n* `--sku B1`: Specifies the pricing tier (Basic B1).\\r\\n* `--is-linux`: Specifies that the app will run on Linux.\\r\\n\\r\\n![Code lines: az appservice plan create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-12.png)\\r\\n\\r\\n3. Create a web app.\\r\\n\\r\\n   To create a web app, use the following command:\\r\\n\\r\\n```\\r\\naz webapp create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --plan <your-app-service-plan-name> \\\\\\r\\n  --name <your-backend-app-service-name> \\\\\\r\\n  --runtime \\"JAVA:21-java21\\"\\r\\n```\\r\\n\\r\\n  **Runtime specifications** \\r\\n\\r\\n  * Back end:\\r\\n  `--runtime \\"JAVA:21-java21\\"`: Specifies the Java 21 runtime.\\r\\n  * Middleware:\\r\\n  `--runtime \\"JAVA:17-java17\\"`: Specifies the Java 17 runtime. \\r\\n  * Front end:\\r\\n  `--runtime \\"NODE:22-lts\\"`: Specifies the Node.js 22 runtime. \\r\\n\\r\\n  Use these runtime values in your `az webapp` create commands when setting up the respective services for back-end, middleware, and front-end applications. \\r\\n\\r\\n![Code lines: az webapp create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-13.png)\\r\\n\\r\\n### Use the Azure Kubernetes Service (AKS) path\\r\\nTo deploy your Kubernetes-based resources, you need to perform two actions: \\r\\n\\r\\n1. Set up a **container registry** to host your application\u2019s container images.\\r\\n2. **Create a Kubernetes cluster**.\\r\\n\\r\\n#### Azure portal instructions\\r\\nCreate a container registry. \\r\\n\\r\\n1. In the Azure portal, search for **Kubernetes Service** and create a new AKS cluster.\\r\\n2. Complete the resource creation wizard, and select **Create** to deploy the container registry.\\r\\n\\r\\n![The \\"Create container registry\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-14.png)\\r\\n\\r\\nCreate a Kubernetes cluster. \\r\\n\\r\\n1. In the Azure portal, search for **Kubernetes Service** and create a new Kubernetes cluster.\\r\\n2. Complete the resource creation wizard, and select **Create** to deploy the cluster.\\r\\n\\r\\n![The \\"Create Kubernetes cluster\\" screen in the Azure portal.](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-15.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Create a resource group (optional).\\r\\n  \\r\\n   If you need to create a resource group, use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope): \\r\\n\\r\\n```\\r\\naz group create --name <resource-group-name> --location <location> \\r\\n```\\r\\n\\r\\n2. Create an Azure container registry. \\r\\n\\r\\n```\\r\\n  az acr create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --name <your-acr-name> \\\\\\r\\n  --sku Standard \\\\\\r\\n  --admin-enabled true \\r\\n``` \\r\\n\\r\\n   Replace `<your-acr-name>` with the name you want for your container registry. The `--sku Standard` specifies the Azure Container Registry tier, and `--admin-enabled true` enables admin access. \\r\\n\\r\\n   **Command parameters** \\r\\n\\r\\n* `--sku Standard`: Specifies the pricing tier for the Azure container registry. (**Standard** is a good default option.)\\r\\n* `--admin-enabled true`: Enables admin access for easier management of the Azure container registry.\\r\\n\\r\\n  ![Code lines: az acr create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-16.png)\\r\\n\\r\\n3. Create an AKS cluster:\\r\\n\\r\\n```\\r\\naz aks create \\\\\\r\\n  --resource-group <your-resource-group-name> \\\\\\r\\n  --name <your-frontend-aks-cluster-name> \\\\\\r\\n  --node-count 3 \\\\\\r\\n  --enable-addons monitoring \\\\\\r\\n  --generate-ssh-keys \\\\\\r\\n  --node-vm-size Standard_DS2_v2\\r\\n```\\r\\n\\r\\n![Code lines: az aks create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-17.png)\\r\\n\\r\\n![Second set of code lines: az aks create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-18.png)\\r\\n\\r\\n![Third set of code lines: az aks create](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1b-19.png)\\r\\n\\r\\n:::info\\r\\nLearn more on Technical leaders\u2019 [guide to building intelligent apps](https://aka.ms/AAI_TDMApps_Plan?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n:::\\r\\n\\r\\n## Summary\\r\\n\\r\\nIn this post, we walked through creating the Azure OpenAI instance that will serve as the core of our app\u2019s content generation capabilities. We finished up our setup tasks by configuring Azure API Management, and then we created the hosting resources we need to deploy our app to Azure.\\r\\n\\r\\nIn our next post, we\u2019ll discuss how you can start building and running the app on your local dev machine.\\r\\n\\r\\n### Additional resources\\r\\n* [Register for Demo Bytes](https://developer.microsoft.com/reactor/series/S-1381/?ocid=biafy25h1_30daysofia_webpage_azuremktg), a snackable playlist of demos designed to help you skill up on AI powered app development."},{"id":"setting-up-your-development-environment-1","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1","source":"@site/blog-30-days-of-ia-2024/2024-09-20/setting-up-your-development-environment-1.md","title":"1.2a Setting up your development environment Part 1","description":"Learn what you need to set up and configure your development environment before we start to build our example generative AI app.","date":"2024-09-23T09:00:00.000Z","formattedDate":"September 23, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":14.01,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-09-23T09:00","slug":"setting-up-your-development-environment-1","title":"1.2a Setting up your development environment Part 1","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Learn what you need to set up and configure your development environment before we start to build our example generative AI app.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.2b Setting Up Your Development Environment Part 2","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-2"},"nextItem":{"title":"1.1 Use Generative AI to build intelligent apps","permalink":"/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/setting-up-your-development-environment-1\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\nLearn what you need to set up and configure your development environment before we start to build our example generative AI app.\\r\\n\\r\\n### What we cover:\\r\\n\\r\\n- Installing required development tools and services on your local machine\\r\\n- Configuring the Azure Cosmos DB that the back-end application uses\\r\\n- Setting up the Azure Key Vault that will store application secrets\\r\\n- Creating a Microsoft Entra ID app registration to enable Microsoft Account sign-in for our app\\r\\n\\r\\n## Introduction\\r\\n\\r\\nAs we introduced in the previous post, this series walks you through building an example AI-powered content generation app for **Best For You Organics Company**. This app will help our fictitious company support a new skin-care product by generating a variety of marketing materials, including social media posts, blog articles, and email campaigns. Tailored specifically for the skin-care industry, the app will allow them to efficiently create and customize content for different platforms, enabling them to more effectively reach their target audience.\\r\\n\\r\\nIn this blog, we take you through setting up your local development environment and configuring several essential services in the Azure portal. You install tools, such as Git, Java, and Node.js, and set up Azure resources, such as Azure Cosmos DB and Azure Key Vault.\\r\\n\\r\\n## Local machine setup\\r\\n\\r\\nBefore diving into the Azure components, let\u2019s ensure that your local development machine is equipped with all the tools you need to build the app.\\r\\n\\r\\n### Step 1. Install Git.\\r\\n\\r\\nGit is essential for version control and managing your project\u2019s source code.\\r\\n\\r\\n1. **Download Git**. Go to [Install and set up Git](https://learn.microsoft.com/devops/develop/git/install-and-set-up-git?ocid=biafy25h1_30daysofia_webpage_azuremktg), and download the installer for your operating system.\\r\\n2. **Installation**. Run the installer. Unless you have specific preferences, use the default settings.\\r\\n3. **Verify installation**. Open your terminal and run:\\r\\n\\r\\n```\\r\\n   git --version\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-1.png)\\r\\n\\r\\n### Step 2. Install Java (17 and 21).\\r\\n\\r\\nYour Spring Boot back end requires both Java 17 and 21.\\r\\n\\r\\n1. **Download**. Obtain both versions from [Download the Microsoft Build of OpenJDK](https://learn.microsoft.com/java/openjdk/download?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n2. **Configure**. You can manage multiple Java versions using update alternatives (Linux) or SDKMAN (for Linux/Mac). For Windows, use Java Development Kit (JDK) tools, like JDKTool.\\r\\n3. **Verify installation**. Open your terminal and run:\\r\\n\\r\\n```\\r\\n   java -version\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-2.gif)\\r\\n\\r\\n### Step 3. Install the Azure CLI.\\r\\n\\r\\nThe Azure CLI is essential for managing your Azure resources from the terminal.\\r\\n\\r\\n1. **Download the Azure CLI**. Follow the instructions in [How to install the Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n2. **Sign in to Azure**. After installing the Azure CLI, sign in. Open your terminal and run:\\r\\n\\r\\n```\\r\\n   az login\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-3.png)\\r\\n\\r\\n### Step 4. Install Node.js and set up React.\\r\\n\\r\\nWe use Node.js for managing front-end dependencies and running the React development server.\\r\\n\\r\\n1. **Install Node.js**. Go to [Node.js](https://nodejs.org/), and download the appropriate version for your system.\\r\\n2. **Verify installation**. Confirm that Node.js is correctly installed. Open your terminal and run:\\r\\n```\\r\\n   node -v && npm -v\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-4.png)\\r\\n\\r\\n### Step 5. Install an integrated development environment.\\r\\n\\r\\nYou can use your preferred integrated development environment (IDE), but we recommend **Visual Studio Code** and **IntelliJ IDEA** for Java and JavaScript development.\\r\\n\\r\\n- [Install Visual Studio Code](https://code.visualstudio.com/).\\r\\n   - or\\r\\n- [Install IntelliJ IDEA](https://www.jetbrains.com/idea/).\\r\\n\\r\\nBoth IDEs support Azure integrations through plugins for managing Azure resources and services.\\r\\n\\r\\n## Azure setup\\r\\n\\r\\nNow that your local environment is ready, let\u2019s configure the Azure resources you need to build and run the app.\\r\\n\\r\\n### Step 1. Set up Azure basics.\\r\\n\\r\\nBefore you start configuring resources, choose the Azure account you want to use. If you want to use the Azure CLI to configure Azure resources, perform a few configuration steps:\\r\\n\\r\\n- **Create a new account\u2014unless you already have one (optional)**.  \\r\\n  If you don\u2019t have an existing Azure account that you want to use when creating Azure resources, create a new one. Go to the [Azure portal](https://portal.azure.com/) and sign up. Choose the subscription plan that fits your business needs.\\r\\n- **Configure the Azure CLI, if you want use it (optional)**.  \\r\\n  The steps throughout this series include instructions for using either the browser-based Azure portal or the command-line Azure CLI tool. If you want to use the Azure CLI but don\u2019t already have it installed, follow these steps:\\r\\n  - Follow the instructions provided at [Install Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n  - Verify the installation. Open your terminal or command prompt and run:\\r\\n\\r\\n```\\r\\naz --version\\r\\n```\\r\\n\\r\\n![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-5.png)\\r\\n\\r\\nAfter installing and verifying the Azure CLI, follow these steps to sign in, list your subscriptions, and select a subscription:\\r\\n\\r\\n1. Sign in to Azure. Run the following command:\\r\\n```\\r\\naz login\\r\\n```\\r\\n\\r\\n   This opens a web browser for you to authenticate your Azure account. After successful authentication, the CLI automatically lists your subscriptions and asks you to select one by number.\\r\\n\\r\\n2. Select a subscription. After you sign in, a prompt is displayed.\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-6.png)\\r\\n\\r\\n3. Type the number corresponding to the subscription you want to select, and press `Enter`. After you select the subscription, it is set as the default for your current session.\\r\\n\\r\\n### Step 2. Create Azure Cosmos DB resource (MongoDB API).\\r\\n\\r\\nCosmos DB will serve as the database for storing your application data, such as customer information and product details.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. **Go to the Azure Portal** and search for **\\"Cosmos DB\\"**.\\r\\n2. Click on **\\"Create\\"** and select **MongoDB API**.\\r\\n3. You will see two options: **Request unit (RU) database account** and **vCore cluster (Recommended)**. Choose Request unit (RU) database account.\\r\\n4. **Configure the Request Units per second (RU/s)** based on your application\'s scale (e.g., 400 RU/s as a starting point for small applications). The RU/s determines how many operations Cosmos DB can handle per second, so adjust it according to your expected load and usage.\\r\\n5. Proceed with the rest of the setup, such as specifying the **resource group**, **region**, and **database name**.\\r\\n6. Once the Cosmos DB account is created, you can add a **database** and **collections** to organize your data.\\r\\n\\r\\n   ![image of Cosmos DB setup in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-7.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Create a resource group (if you don\u2019t already have one) by running the following command:\\r\\n```\\r\\n   az group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n   ![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-8.png)\\r\\n\\r\\n2. Create an Azure Cosmos DB account with MongoDB API.\\r\\n\\r\\n   Use the following command to create an Azure Cosmos DB account with the MongoDB API, and specify throughput in Request Units per second (RU/s):\\r\\n```\\r\\n   az cosmosdb create \\\\\\r\\n     --name <cosmos-account-name> \\\\\\r\\n     --resource-group <resource-group-name> \\\\\\r\\n     --kind MongoDB \\\\\\r\\n     --locations regionName=<location> failoverPriority=0 isZoneRedundant=False \\\\\\r\\n     --default-consistency-level Eventual \\\\\\r\\n     --enable-automatic-failover false\\r\\n```\\r\\n\\r\\n3. Create a MongoDB database with a specific throughput.\\r\\n\\r\\n   After creating the Azure Cosmos DB account, create a MongoDB database and set the throughput (RU/s):\\r\\n```\\r\\n   az cosmosdb mongodb database create \\\\\\r\\n     --account-name <cosmos-account-name> \\\\\\r\\n     --name <database-name> \\\\\\r\\n     --resource-group <resource-group-name>\\r\\n```\\r\\n\\r\\n![image of terminal response](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-9.png)\\r\\n\\r\\n### Step 3. Create Azure Storage account.\\r\\n\\r\\nOur Azure Storage account is used to store any static files (for example, product brochures or images).\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. In the Azure portal, search for **storage account** and create a new one.\\r\\n2. Choose **Blob Storage** for storing documents and media.\\r\\n3. Complete the resource creation wizard, and select **Create** to deploy the storage account.\\r\\n\\r\\n![image of storage account in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-10.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Determine whether resource group exists (optional).\\r\\n\\r\\n   Use the following command:\\r\\n\\r\\n```\\r\\n   az group show --name <resource-group-name>\\r\\n```\\r\\n\\r\\n   - If the resource group exists, it returns the details.\\r\\n   - If it doesn\'t exist, it throws an error.\\r\\n\\r\\n2. Create the resource group (optional).\\r\\n\\r\\n   If the resource group doesn\'t exist, create it using the following command, replacing `<resource-group-name>` with your desired name for the resource group and `<location>` with the Azure region where you want to deploy the resource, (for example, eastus, westus):\\r\\n```\\r\\n   az group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n3. Create the storage account.\\r\\n\\r\\n   Use the following command to create the Azure Storage account, replacing `<storage-account-name>` with a globally unique name for your storage account; replacing `<resource-group-name>` with the name of the resource group you created or chose; and replacing `<location>` with the Azure region where you want to deploy the storage account (for example, eastus, westeurope):\\r\\n```\\r\\n   az storage account create \\\\\\r\\n     --name <storage-account-name> \\\\\\r\\n     --resource-group <resource-group-name> \\\\\\r\\n     --location <location> \\\\\\r\\n     --sku Standard_LRS \\\\\\r\\n     --kind StorageV2\\r\\n```\\r\\n\\r\\n   ![image of terminal response to creating the Azure Storage account](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-11.png)\\r\\n\\r\\n4. Verify storage account creation.\\r\\n\\r\\n   To ensure that the storage account was created successfully, list all storage accounts in the resource group:\\r\\n```\\r\\n   az storage account list --resource-group <resource-group-name> --output table\\r\\n```\\r\\n\\r\\n   ![image of terminal response to verify storage account creation](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-12.png)\\r\\n\\r\\n### Step 4. Set up Azure Key Vault.\\r\\n\\r\\nTo securely store our secrets, like API keys and connection strings, we use Azure Key Vault.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. **Create a key vault**. In the portal, search for key vault and create one.\\r\\n2. **Register an application**. In Microsoft Entra ID, register your application to grant it access to the key vault.\\r\\n3. **Assign managed identity**. Enable Managed Identity to allow secure access from your application.\\r\\n4. Complete the resource creation wizard, and select **Create** to deploy the key vault.\\r\\n\\r\\n   ![image of key vault in Azure Portal](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-13.png)\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\n1. Create a resource group (optional).\\r\\n\\r\\n   If you need to create a resource group (like we did in the Azure Cosmos DB steps), use the following command, replacing `<resource-group-name>` with your desired name and `<location>` with the region (for example, eastus, westeurope):\\r\\n```\\r\\n   az group create --name <resource-group-name> --location <location>\\r\\n```\\r\\n\\r\\n2. Create the Azure key vault.\\r\\n\\r\\n   Now, use the following command to create the Azure key vault, replacing `<key-vault-name>` with a globally unique name for the key vault; replacing `<resource-group-name>` with the name of the resource group created or selected in the previous step; and replacing `<location>` with your preferred Azure region. Note that \u201c--sku standard\u201d is a common pricing tier. You can also use premium if you need additional features like Hardware Security Module (HSM) support.\\r\\n\\r\\n```\\r\\n   az keyvault create \\\\\\r\\n     --name <key-vault-name> \\\\\\r\\n     --resource-group <resource-group-name> \\\\\\r\\n     --location <location> \\\\\\r\\n     --sku standard\\r\\n```\\r\\n\\r\\n   ![image of terminal response to creating the Azure key vault](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-14.png)\\r\\n\\r\\n3. Verify key vault creation.\\r\\n\\r\\n   To verify that the key vault was created, you can list all key vaults in the specified resource group:\\r\\n\\r\\n```\\r\\n   az keyvault list --resource-group <resource-group-name> --output table\\r\\n```\\r\\n\\r\\n   ![image of terminal response to verifying key vault creation](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-15.png)\\r\\n\\r\\n:::info\\r\\n\\r\\nJoin the next snackable AI Demo Bytes to explore how to [add generative AI capabilities to your web apps](https://aka.ms/demo-bytes/ep5?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n\\r\\n:::\\r\\n\\r\\n### Step 5. Use Microsoft Entra ID to create an app registration for Microsoft account sign-in.\\r\\n\\r\\nTo support multi-user access, including sign-in from any Microsoft account, register your application in Microsoft Entra ID.\\r\\n\\r\\n#### Azure portal instructions\\r\\n\\r\\n1. Navigate to Microsoft Entra ID.  \\r\\n   - In the Azure portal, search for **Microsoft Entra ID**, and select **Manage \u2192 App registrations**.\\r\\n2. Register a new application.\\r\\n   1. Select **New registration**.\\r\\n   2. **Name**. Enter a name for your application (for example, **ContentGenApp**).\\r\\n   3. **Supported account types**. Select **Accounts in any organizational directory (Any Microsoft Entra ID tenant - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)**.\\r\\n   4. **Redirect URI**. Set this to the front end\'s callback URL.\\r\\n      - For local development (React app running locally), use [http://localhost:3000](http://localhost:3000).\\r\\n      - For production (when deployed on [Azure Kubernetes Service (AKS)](https://learn.microsoft.com/azure/aks/what-is-aks?ocid=biafy25h1_30daysofia_webpage_azuremktg) or [Azure App Service](https://learn.microsoft.com/azure/app-service/overview/?ocid=biafy25h1_30daysofia_webpage_azuremktg)), add the URL for the App Service or AKS deployment you plan to create for this app (We\u2019ll create these in our next post). For example, [https://your-app.azurewebsites.net](https://your-app.azurewebsites.net) for App Service or [https://your-aks-domain.com](https://your-aks-domain.com) for AKS.\\r\\n      - If you plan to use a custom domain for your application, add that domain here (for example, [https://your-custom-domain.com](https://your-custom-domain.com)).\\r\\n\\r\\n   **Important**: Ensure that all potential URLs (local, deployed, and custom domain) are listed as redirect URIs.\\r\\n\\r\\n   ![image of application registration in Microsoft Entra ID](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-16.png)\\r\\n\\r\\n3. Configure API permissions.\\r\\n   1. Go to the **API permissions** tab, and select **Add a permission**.\\r\\n   2. Choose **Microsoft Graph \u2192 Delegated permissions**, and then select the following permissions:\\r\\n      - **User.Read**. Allows users to sign in and read their profile.\\r\\n   3. **Grant admin consent**. After permissions are added, select **Grant admin consent** for your organization.\\r\\n\\r\\n   ![image of API permissions configuration](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-17.png)\\r\\n\\r\\n4. Configure authentication settings.\\r\\n   1. Go to the **Authentication** tab, and add your **redirect URIs** (both local and production URLs).\\r\\n   2. Enable **ID tokens** to authenticate users.\\r\\n\\r\\n   ![image in Azure Portal of authentication settings configuration](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-18.png)\\r\\n\\r\\nThis revision integrates **Microsoft Entra ID** and highlights the navigation flow for app registration through the **Manage** section. It also ensures that you\'re set up for both local development and production environments using **AKS**, **App Service**, or a **custom domain**.\\r\\n\\r\\n#### CLI instructions\\r\\n\\r\\nYou\u2019ll use the following script when performing these instructions.\\r\\n\\r\\nShell script: `create-azure-ad-app.sh`\\r\\n\\r\\n```\\r\\n#!/bin/bash\\r\\n\\r\\n# Function to display help\\r\\nfunction display_help() {\\r\\n  echo \\"Usage: $0 --name <App Name> --redirect-uris <Redirect URI 1> <Redirect URI 2> ... [options]\\"\\r\\n  echo\\r\\n  echo \\"Options:\\"\\r\\n  echo \\"  --name              The display name of the Azure AD App.\\"\\r\\n  echo \\"  --redirect-uris     Space-separated list of redirect URIs to configure.\\"\\r\\n  echo \\"  --help              Display this help message and exit.\\"\\r\\n  echo\\r\\n  exit 0\\r\\n}\\r\\n\\r\\n# Function to check if the user is logged in\\r\\nfunction check_azure_login() {\\r\\n  echo \\"Checking Azure CLI login status...\\"\\r\\n  az account show &> /dev/null\\r\\n  if [ $? -ne 0 ]; then\\r\\n    echo \\"You are not logged in. Logging in now...\\"\\r\\n    az login\\r\\n    if [ $? -ne 0 ]; then\\r\\n      echo \\"Azure login failed. Exiting script.\\"\\r\\n      exit 1\\r\\n    fi\\r\\n  else\\r\\n    echo \\"You are already logged in.\\"\\r\\n  fi\\r\\n}\\r\\n\\r\\n# Parse command line arguments\\r\\nAPP_NAME=\\"\\"\\r\\nREDIRECT_URIS=()\\r\\n\\r\\nwhile [[ $# -gt 0 ]]; do\\r\\n  case \\"$1\\" in\\r\\n    --name)\\r\\n      APP_NAME=\\"$2\\"\\r\\n      shift 2\\r\\n      ;;\\r\\n    --redirect-uris)\\r\\n      shift\\r\\n      while [[ $# -gt 0 && ! \\"$1\\" =~ ^-- ]]; do\\r\\n        REDIRECT_URIS+=(\\"$1\\")\\r\\n        shift\\r\\n      done\\r\\n      ;;\\r\\n    --help)\\r\\n      display_help\\r\\n      ;;\\r\\n    *)\\r\\n      echo \\"Unknown option: $1\\"\\r\\n      display_help\\r\\n      ;;\\r\\n  esac\\r\\ndone\\r\\n\\r\\n# Ensure required arguments are provided\\r\\nif [[ -z \\"$APP_NAME\\" || ${#REDIRECT_URIS[@]} -eq 0 ]]; then\\r\\n  echo \\"Error: Both --name and --redirect-uris are required.\\"\\r\\n  display_help\\r\\nfi\\r\\n\\r\\n# Step 0: Check if logged in\\r\\ncheck_azure_login\\r\\n\\r\\nAPI_PERMISSION=\\"e1fe6dd8-ba31-4d61-89e7-88639da4683d\\"  # User.Read permission ID\\r\\nGRAPH_API=\\"00000003-0000-0000-c000-000000000000\\"        # Microsoft Graph API ID\\r\\nSIGN_IN_AUDIENCE=\\"AzureADandPersonalMicrosoftAccount\\"    # Supported account types\\r\\n\\r\\n# Define the required resource accesses in JSON format\\r\\nREQUIRED_RESOURCE_ACCESS=$(cat <<EOF\\r\\n[\\r\\n  {\\r\\n    \\"resourceAppId\\": \\"$GRAPH_API\\",\\r\\n    \\"resourceAccess\\": [\\r\\n      {\\r\\n        \\"id\\": \\"$API_PERMISSION\\",\\r\\n        \\"type\\": \\"Scope\\"\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n]\\r\\nEOF\\r\\n)\\r\\n\\r\\n# Step 1: Check if the app already exists\\r\\nAPP_ID=$(az ad app list --filter \\"displayName eq \'$APP_NAME\'\\" --query \\"[0].appId\\" -o tsv)\\r\\n\\r\\nif [ -z \\"$APP_ID\\" ]; then\\r\\n  echo \\"App doesn\'t exist. Creating the app registration...\\"\\r\\n\\r\\n  # Step 2: Create the app registration\\r\\n  APP_ID=$(az ad app create \\\\\\r\\n    --display-name \\"$APP_NAME\\" \\\\\\r\\n    --required-resource-accesses \\"$REQUIRED_RESOURCE_ACCESS\\" \\\\\\r\\n    --web-redirect-uris \\"${REDIRECT_URIS[@]}\\" \\\\\\r\\n    --enable-id-token-issuance true \\\\\\r\\n    --enable-access-token-issuance true \\\\\\r\\n    --sign-in-audience \\"$SIGN_IN_AUDIENCE\\" \\\\\\r\\n    --query appId -o tsv)\\r\\n\\r\\n  if [ -z \\"$APP_ID\\" ]; then\\r\\n    echo \\"App creation failed. Exiting script.\\"\\r\\n    exit 1\\r\\n  fi\\r\\n\\r\\n  echo \\"App created with ID: $APP_ID\\"\\r\\n\\r\\nelse\\r\\n  echo \\"App already exists with ID: $APP_ID. Updating the redirect URIs...\\"\\r\\n\\r\\n  # Step 3: Update the redirect URIs\\r\\n  az ad app update --id \\"$APP_ID\\" \\\\\\r\\n    --web-redirect-uris \\"${REDIRECT_URIS[@]}\\"\\r\\n\\r\\n  if [ $? -ne 0 ]; then\\r\\n    echo \\"Failed to update redirect URIs. Exiting script.\\"\\r\\n    exit 1\\r\\n  fi\\r\\n\\r\\n  echo \\"Redirect URIs updated for app ID: $APP_ID\\"\\r\\nfi\\r\\n\\r\\n# Display the app details\\r\\necho \\"Here are the details of the app:\\"\\r\\naz ad app show --id \\"$APP_ID\\"\\r\\n```\\r\\n\\r\\nRun the script:\\r\\n\\r\\n  1. Save the script. Save the preceding script as create-azure-ad-app.sh. \\r\\n  2. Make the script executable: \\r\\n  ``` \\r\\n  chmod +x create-azure-ad-app.sh\\r\\n  ```\\r\\n \\r\\n  3. Run the script.\\r\\n  ```\\r\\n./create-azure-ad-app.sh --name <YOUR_APP_NAME> --redirect-uris http://localhost:3000 https://your-custom-domain.com\\r\\n```\\r\\n\\r\\n![image of terminal response after running the script](../../static/img/30-days-of-ia-2024/blogs/2024-09-20/2-1-19.png)\\r\\n\\r\\n:::info\\r\\n\\r\\nJoin live experts to dive into [operational excellence with AKS](https://aka.ms/learn-live/ep3?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n\\r\\n:::\\r\\n\\r\\n## Summary\\r\\n\\r\\nIn this blog, we\u2019ve covered setting up your local development environment and creating the Azure-based database, storage, and secret management services you\u2019ll use when running an AI powered content generation sample application in Java. However, there\u2019s still one critical piece of infrastructure to provision before you can start building and deploying the app.\\r\\n\\r\\nIn the next blog, we\u2019ll cover how to set up and configure [Azure OpenAI Service](https://learn.microsoft.com/azure/ai-services/openai/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg) to power this sample app.\\r\\n\\r\\n## Additional resources\\r\\n* [Register for Demo Bytes](https://developer.microsoft.com/reactor/series/S-1381/?ocid=biafy25h1_30daysofia_webpage_azuremktg), a snackable playlist of demos designed to help you skill up on AI powered app development."},{"id":"use-generative-ai-to-build-intelligent-apps","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps","source":"@site/blog-30-days-of-ia-2024/2024-09-19/use-generative-ai-to-build-intelligent-apps.md","title":"1.1 Use Generative AI to build intelligent apps","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","date":"2024-09-19T09:00:00.000Z","formattedDate":"September 19, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":8.305,"hasTruncateMarker":false,"authors":[{"name":"#30Days Of IA","title":"BuildIA Content Team","url":"https://azure.github.io/Cloud-Native/Build-IA/","imageURL":"https://azure.github.io/Cloud-Native/img/logo-2024.png","key":"30days"}],"frontMatter":{"date":"2024-09-19T09:00","slug":"use-generative-ai-to-build-intelligent-apps","title":"1.1 Use Generative AI to build intelligent apps","authors":["30days"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.2a Setting up your development environment Part 1","permalink":"/Cloud-Native/30-days-of-ia-2024/setting-up-your-development-environment-1"},"nextItem":{"title":"Kick-off #30Days of IA","permalink":"/Cloud-Native/30-days-of-ia-2024/kick-off"}},"content":"<head> \\r\\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps\\"/>\\r\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\r\\n  <meta property=\\"og:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\"/>\\r\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\r\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\r\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps\\" />\\r\\n  <meta name=\\"twitter:title\\" content=\\"**Build Intelligent Apps | AI Apps on Azure\\" />\\r\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\r\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\r\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\r\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\r\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps\\" />\\r\\n</head>\\r\\n\\r\\n\x3c!-- End METADATA --\x3e\\r\\nIn this blog series, discover how you can use Azure services to take advantage of generative AI capabilities to build an intelligent application.\u202f\u202f \\r\\n\\r\\n## What We\u2019ll Cover\\r\\n\\r\\n* Why generative AI?\\r\\n* A high-level overview of our example scenario\\r\\n* An overview of the deployment options\u202f \\r\\n\\r\\n\\r\\n## Why generative AI?\\r\\nUnlike traditional AI systems that follow predefined rules, generative AI models use deep learning techniques to generate outputs such as text, images, music, and even code in a way that mimics human creativity. If you\u2019re reading this, you\u2019re likely interested in how you can harness these capabilities to build new and innovative solutions for your organization or your customers. But what benefits does this new technology bring, and when would you use it?\u202f \\r\\n\\r\\nFor businesses, one of the main benefits of generative AI is enhanced productivity. By automating tasks such as content creation, customer service responses, and data analysis, you can significantly reduce tasks that your teams previously had to do manually, and this automation can result in radically increased efficiency. Marketing teams, for instance, can use generative AI to draft personalized content or generate ideas for campaigns, accelerating time to market. Similarly, customer support teams can make the most of AI-powered chatbots that provide accurate responses based on large datasets, supporting faster and more consistent handling of customer requests or issues.\u202f \\r\\n\\r\\nIn addition to the productivity benefits, intelligent apps built by using generative AI can scale to meet the needs of growing businesses, allowing these businesses to meet increased demand for personalized solutions and messaging. AI helps your business to do this without sacrificing quality or capabilities.\u202f \\r\\n\\r\\nIn this series, we show you how you can combine multiple Azure products and services to effectively build an example generative AI application that supports marketing teams.\u202f \\r\\n\\r\\n\\r\\n## The example application\\r\\nIn our example scenario, we\u2019re building a solution for the **Best For You Organics Company**,\u202fwhich is releasing an innovative, new skin-care product designed to enhance natural beauty and promote skin health. In a competitive market, it\u2019s crucial for marketing efforts to create engaging content that captures the attention of potential customers and aids the marketing team in market penetration.\u202f \\r\\n\\r\\nThrough this blog series, you can learn to use Azure services to build an application that supports the Best For You Organics Company marketing team, making the most of the capabilities of Azure to create exceptional customer experiences and generate engaging marketing content.\u202f\u202f \\r\\n\\r\\nOur solution generates the following types of content to assist the marketing team:\u202f \\r\\n* **Social media posts**. Announcements, product highlights, customer testimonials, and promotional offers, with the hashtags #Skincare #NaturalBeauty #BestForYouOrganics\u202f \\r\\n\\r\\n* **Blog articles**. In-depth articles on skin-care tips, the benefits of natural ingredients, and product usage guides\u202f \\r\\n\\r\\n* **Email content**. Product launches, exclusive offers, skin-care routines, and collateral\u202f \\r\\n\\r\\nThe application is built using a three-part architecture consisting of a **back end**, **middleware**, and **front end**, deployed on either **Azure Kubernetes Service (AKS)** or **Azure App Service**. This architecture forms the foundation for integrating modern cloud and AI technologies, which is our focus throughout this case study.\u202f \\r\\n\\r\\n:::info\\r\\n\\r\\n### AI and .Net\\r\\nIn this series, we\u2019ll walk through the basics of building a Java based content generation application. However, if you\u2019re also interested in building intelligent apps using .Net, you can learn more from the following resources:\u202f \\r\\n\\r\\n* [AI for .NET Developers | Microsoft Learn](https://learn.microsoft.com/dotnet/ai?ocid=biafy25h1_30daysofia_webpage_azuremktg)\u202f \\r\\n* [Building Generative AI apps with .NET 8 | .Net Blog](https://devblogs.microsoft.com/dotnet/build-gen-ai-with-dotnet-8/?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n* [Develop Generative AI solutions with Azure OpenAI Service - Training | Microsoft Learn](https://learn.microsoft.com/training/paths/develop-ai-solutions-azure-openai/?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n* [Dive deeper into .NET + AI collection | Microsoft Learn](https://learn.microsoft.com/collections/qp6xfmodr6q6px?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\r\\n* [Develop AI agents using Azure OpenAI and the Semantic Kernel SDK - Training | Microsoft Learn](https://learn.microsoft.com/training/paths/develop-ai-agents-azure-open-ai-semantic-kernel-sdk/?ocid=biafy25h1_30daysofia_webpage_azuremktg) \\r\\n* [Add AI to Your .NET Apps Easily with Prompty | .Net Blog](https://devblogs.microsoft.com/dotnet/add-ai-to-your-dotnet-apps-easily-with-prompty/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\u202f\u202f \\r\\n* [Using Phi-3 & C# with ONNX for text and vision samples | .Net Blog](https://devblogs.microsoft.com/dotnet/using-phi3-csharp-with-onnx-for-text-and-vision-samples-md/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\u202f\u202f \\r\\n* [AI Samples for .NET | GitHub](https://github.com/dotnet/ai-samples)\u202f \\r\\n* [Azure Samples: ChatGPT + Enterprise data with Azure OpenAI and Azure AI Search (.NET) | GitHub](https://github.com/Azure-Samples/azure-search-openai-demo-csharp)\u202f\u202f \\r\\n* [.NET AI Community Standup playlist | YouTube](https://www.youtube.com/playlist?list=PLdo4fOcmZ0oX0Hrq9KqhQfZNAcDF5VPNt)\u202f \\r\\n\\r\\n:::\\r\\n\\r\\n#### Application flow\\r\\nThe content generation process in the application is simple yet powerful. Here\'s how the flow works, from the user\'s perspective:\u202f \\r\\n\\r\\n1. **User input**. The user provides details, such as the type of content they need\u2014whether it\'s an email campaign, social media post, or blog article (steps 1-4 in the diagram below).\u202f \\r\\n\\r\\n1. **Back-end processing**. The system retrieves necessary data, such as customer demographics, product details, and relevant information stored in the back end (steps 5-6 in the diagram).\u202f \\r\\n\\r\\n1. **Content generation**. The **middleware** communicates with **Azure OpenAI Service** to generate content based on the provided input and back-end data, helping to ensure that the content is contextually relevant (steps 7-9 in the diagram).\u202f \\r\\n\\r\\n1. **Result display**. The generated content is then displayed on the **ReactJS front end**, where the user can review, copy, and implement it directly into their marketing campaigns (step 10 in diagram).\u202f \\r\\n\\r\\nLet\u2019s now look at the data flow for this application flow to understand how Azure OpenAI can be used in a Retrieval-Augmented Generation (RAG) architecture pattern.\u202f \\r\\n\\r\\n\\r\\n![diagram of data flow for this application](../../static/img/30-days-of-ia-2024/blogs/2024-09-19/1-1.png)\\r\\n\\r\\nThis flow allows for fast and efficient content creation while tailoring the output to specific campaign needs, all powered by AI.\u202f \\r\\n\\r\\n#### GitHub repository\\r\\n\\r\\nThe project\u2019s full source code can be found in the [GitHub repository for the Java AI-based content generator](https://github.com/Azure-Samples/Java-AI-Based-Content-Generator).\\r\\n\\r\\n#### Technologies used\u202f\\r\\nOur application makes the most of several cutting-edge technologies, each serving a critical role in the system:\u202f \\r\\n\u202f \\r\\n\\r\\n* [Azure OpenAI Service](https://learn.microsoft.com/azure/ai-services/openai/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). At the core of content generation is Azure OpenAI, which uses GPT models to create coherent and relevant content based on user input. The Chat Completion API (GPT-4o) generates the text, while the embedding model helps ensure that data retrieved for content is semantically relevant to the user\'s needs.\u202f \\r\\n* [Azure Key Vault](https://learn.microsoft.com/azure/key-vault/general/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). For secure storage of secrets such as API keys, credentials, and sensitive configuration data, Key Vault is integrated into the system. This helps ensure that all sensitive data is stored securely and retrieved only when needed.\u202f \\r\\n* [Microsoft Entra ID](https://learn.microsoft.com/entra/fundamentals/whatis?ocid=biafy25h1_30daysofia_webpage_azuremktg) (formerly Azure Active Directory). Microsoft Entra ID is used for authentication and identity management, supporting secure access to the back end and to APIs. It helps effectively manage user roles and access permissions.\u202f \\r\\n* [Managed identity](https://learn.microsoft.com/entra/identity/managed-identities-azure-resources/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg). The application uses managed identity to securely access Azure resources without hard-coding credentials. This simplifies the authentication process when interacting with services like Key Vault and Azure Cosmos DB.\u202f \\r\\n* [Azure App Service](https://learn.microsoft.com/azure/app-service/overview?ocid=biafy25h1_30daysofia_webpage_azuremktg) and [Azure Kubernetes Service (AKS)](https://learn.microsoft.com/azure/aks/what-is-aks?ocid=biafy25h1_30daysofia_webpage_azuremktg).The application supports two deployment models: App Service and AKS. Both provide scalable infrastructure but differ in flexibility and complexity (more on this in the \\"[Choosing the right deployment technology](#choosing-the-right-deployment-technology-for-you) for you\\" section).\u202f \\r\\n* [Azure API Management](https://learn.microsoft.com/azure/api-management/api-management-key-concepts?ocid=biafy25h1_30daysofia_webpage_azuremktg). API Management manages the API gateway, controlling access between the front end, middleware, and back end. With features like Cross-Origin Resource Sharing (CORS), throttling, rate limiting, and authentication, API Management supports efficient communication and security across the system.\\r\\n\\r\\n:::info\\r\\n\\r\\nLearn more on Technical leaders\u2019 [guide to building intelligent apps](https://aka.ms/AAI_TDMApps_Plan?ocid=biafy25h1_30daysofia_webpage_azuremktg).\\r\\n\\r\\n:::\\r\\n\\r\\n## Choosing the right deployment technology for you\\r\\n\\r\\nThe application can be deployed by using either **Azure App Service** or **Azure Kubernetes Service (AKS)**, depending on your business needs. Both options provide advantages, but the choice often depends on the application\u2019s complexity and scale.\\r\\n\\r\\n#### Azure App Service\\r\\n* **Simplicity**. App Service is a fully managed platform as a service (PaaS) that abstracts the underlying infrastructure. This allows for quick deployments with less overhead.\u202f \\r\\n\\r\\n* **Cost-effective**. For small to medium-sized applications, App Service can reduce operational costs by automating much of the infrastructure management.\u202f \\r\\n\\r\\n* **Use case**. The service is ideal for businesses looking for rapid deployment without the need for extensive control over infrastructure. It works well for straightforward applications with predictable workloads.\\r\\n\\r\\n![architecture diagram using Azure App Service](../../static/img/30-days-of-ia-2024/blogs/2024-09-19/1-2.png)\\r\\n\\r\\n#### Azure Kubernetes Service (AKS)\\r\\n* **Flexibility**. AKS offers more control over infrastructure, allowing for fine-tuned customization of containerized microservices.\u202f \\r\\n\\r\\n* **Scalability**. The service is ideal for applications with large-scale operations or high customization requirements. It allows for horizontal scaling and integration with multiple cloud-native tools.\u202f \\r\\n\\r\\n* **Use case**. AKS is best suited for enterprise-level applications or businesses requiring multi-container orchestration and complex workloads.\\r\\n\\r\\n![architecture diagram using Azure Kubernetes Service](../../static/img/30-days-of-ia-2024/blogs/2024-09-19/1-3.png)\\r\\n\\r\\nBoth options are scalable and robust, and businesses can select the one that aligns best with their operational needs and scale of application.\u202f \\r\\n\\r\\n## Summary\\r\\nIn today\u2019s post, we introduced you to the example app that we\u2019ll build in this series\u2014the Best For You Organics content generation app. We discussed our goals, overall approach, and the architecture that we\u2019re using to create this app.\\r\\n\\r\\nIn our next post, we cover the **environment you\u2019ll set up** to prepare for the development of the application. Learn how to configure your local environment; set up Java, Spring Boot, and ReactJS; and integrate with Azure services, like Azure OpenAI, Key Vault, and more.\\r\\n\\r\\nEach subsequent post will dive deeper into the specific technologies that power this AI-driven application. Stay tuned as we explore everything from back-end data management to deploying on AKS or App Service.\\r\\n\\r\\n## Additional resources\\r\\n* To help you build the skills you need to create intelligent apps by using Azure OpenAI, complete the [Get started with Azure OpenAI Service](https://learn.microsoft.com/training/modules/get-started-openai/?ocid=biafy25h1_30daysofia_webpage_azuremktg) module.\u202f \\r\\n\\r\\n* Register for live learning or a demo playlist on [Build Intelligent Apps](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg) on Azure."},{"id":"kick-off","metadata":{"permalink":"/Cloud-Native/30-days-of-ia-2024/kick-off","source":"@site/blog-30-days-of-ia-2024/2024-09-10/kickoff-blog.md","title":"Kick-off #30Days of IA","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","date":"2024-09-10T09:00:00.000Z","formattedDate":"September 10, 2024","tags":[{"label":"Build-Intelligent-Apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/build-intelligent-apps"},{"label":"30-days-of-IA-2024","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/30-days-of-ia-2024"},{"label":"learn-live","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/learn-live"},{"label":"demo-bytes","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/demo-bytes"},{"label":"community-gallery","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/community-gallery"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-kubernetes-service"},{"label":"azure-functions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-functions"},{"label":"azure-openai","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-openai"},{"label":"azure-container-apps","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-container-apps"},{"label":"azure-cosmos-db","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/azure-cosmos-db"},{"label":"github-copilot","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-copilot"},{"label":"github-codespaces","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-codespaces"},{"label":"github-actions","permalink":"/Cloud-Native/30-days-of-ia-2024/tags/github-actions"}],"readingTime":6.035,"hasTruncateMarker":false,"authors":[{"name":"Devanshi Joshi","title":"Senior Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://github.com/devanshidiaries.png","key":"devanshi"}],"frontMatter":{"date":"2024-09-10T09:00","slug":"kick-off","title":"Kick-off #30Days of IA","authors":["devanshi"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","30-days-2024","30-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],"image":"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png","description":"Combine the power of AI, cloud-scale data, and cloud-native app development to create highly differentiated digital experiences. Develop adaptive, responsive, and personalized experiences by building and modernizing intelligent applications with Azure.","tags":["Build-Intelligent-Apps","30-days-of-IA-2024","learn-live","demo-bytes","community-gallery","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},"unlisted":false,"prevItem":{"title":"1.1 Use Generative AI to build intelligent apps","permalink":"/Cloud-Native/30-days-of-ia-2024/use-generative-ai-to-build-intelligent-apps"}},"content":"<head> \\n  <meta property=\\"og:url\\" content=\\"https://azure.github.io/cloud-native/30-days-of-ia-2024/kick-off\\"/>\\n  <meta property=\\"og:type\\" content=\\"website\\"/>\\n  <meta property=\\"og:title\\" content=\\"Build Intelligent Apps | AI Apps on Azure\\"/>\\n  <meta property=\\"og:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\"/>\\n  <meta property=\\"og:image\\" content=\\"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png\\"/>\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/kick-off\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Build Intelligent Apps | AI Apps on Azure\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join us on a learning journey to build intelligent apps on Azure. Read all about the upcoming #BuildIntelligentApps initiative on this post!\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/img/ogImage.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@devanshidiaries\\" />\\n  <link rel=\\"canonical\\" href=\\"https://azure.github.io/Cloud-Native/30-days-of-ia-2024/kick-off\\" />\\n</head>\\n\\n\x3c!-- End METADATA --\x3e\\n\\nIn today\u2019s fast-paced digital world, staying ahead means harnessing the power of technology to create smarter, more responsive applications. We\u2019re excited to introduce you to our new edition of Build \'#IntelligentApps\', your go-to destination for skilling up on how to leverage AI to transform your applications and drive innovation.\\n\\nWe\u2019re bringing together a comprehensive suite of content designed to guide you through the latest in AI powered application development. Our goal is to empower developers, data scientists, and business leaders with the knowledge and tools needed to leverage AI effectively. Follow along for a sneak peek at what to expect.\\n\\n## What We\u2019ll Cover\\n\\n* What is Build Intelligent Apps?\\n* How can you *participate*?\\n* How can you *skill up*? (in just 30 Days)\\n\\n![Build intelligent apps](../../static/img/30-days-of-ia-2024/30-days-of-ia-2024-build-ia-banner.jpg)\\n\\n## Get Ready to Build #IntelligentApps starting September 16!\\n\\nToday, we kick-off with new content and activities for you to skill up on all things Intelligent Apps on Azure with \u201chow-to\u201d blogs, events, and community interactions! Read on to learn about what is coming!\\n\\n## Explore Our Initiatives\\n\\nWe have a number of initiatives exclusively curated to build an engaging learning journey for you to skill up on relevant technologies for building intelligent apps.\\n\\n* [#30Days of IA](https://azure.github.io/Cloud-Native/30-days-of-ia-2024) - 4 themed weeks of blogs on AI led application development in Java or Python using Azure Application Platform, Azure Data Platform and Azure AI.\\n* [Learn Live Series](https://aka.ms/FallForIA/LearnLive) \u2013 5 weekly livestream episodes on AI app development in Python or .NET.\\n* [Demo Bytes](https://azure.github.io/Cloud-Native/Build-IA/DemoBytes) \u2013 snackable demo playlist on building intelligent apps in Java, Python, .NET and using GitHub Copilot.\\n* [AI Skills Challenge](https://aka.ms/build-ia/csc) \u2013 show your skills by competing with peers to complete learn modules and earn a badge.\\n\\n![Build intelligent apps](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/30-days-of-ia-2024-cloud-skills-modules.jpg)\\n\\n:::info\\n\\n## [Register for the events!](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n\\nWhat are 4 things you can do today, to jumpstart your learning journey?\\n\\n* **Register**  for [Learn Live](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg) (free, online) \u2013 weekly live learning with SMEs\\n  * September 12 | Episode 1: [Data-driven AI applications and multi-modal search](https://developer.microsoft.com/reactor/events/23495/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 18 | Episode 2: [Containerizing and Deploying AI Workloads on AKS](https://developer.microsoft.com/reactor/events/23702/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 25 | Episode 3: [Operational Excellence with AKS](https://developer.microsoft.com/reactor/events/23497/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 2 | Episode 4: [Get Started Incorporating AI into Your .NET Applications and Service](https://developer.microsoft.com/reactor/events/23656/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 9 | Episode 5: [Modernize Your Apps Using GenAI Without Rewriting the Code](https://developer.microsoft.com/reactor/events/23657/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n\\n* **Register** for [Demo Bytes](https://aka.ms/bia/events?ocid=biafy25h1_30daysofia_webpage_azuremktg) (free, online) - snackable demo playlist\\n  * September 16 | Episode 1: [AKS Automated Deployments - Streamlining Kubernetes Deployments](https://developer.microsoft.com/reactor/events/23702/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 17 | Episode 2: [Deliver AI infused app innovation with Open Liberty on AKS](https://developer.microsoft.com/reactor/events/23587/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 19 | Episode 3: [Fine-tuning open-source models made easy with KAITO](https://developer.microsoft.com/reactor/events/23697/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 23 | Episode 4: [Get your on-prem apps AI-ready using GitHub Copilot](https://developer.microsoft.com/reactor/events/23588/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 24 | Episode 5: [Add Generative AI Capabilities to your Web Apps](https://developer.microsoft.com/reactor/events/23590/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 26 | Episode 6: [Apply Auto-Scaling and Load Testing to your AI Applications](https://developer.microsoft.com/reactor/events/23592/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * September 30 | Episode 7: [Configure & Deploy Intelligent Java SpringBoot Apps on Azure App Service](https://developer.microsoft.com/reactor/events/23593/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 1 | Episode 8: [End-to-End AI application deployments with GitHub Copilot](https://developer.microsoft.com/reactor/events/23594/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 3 | Episode 9: [Extending GitHub Copilot to chat with your Postgres Database](https://developer.microsoft.com/reactor/events/23595/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 7 | Episode 10: [Architecting a Unified AI Stack: Secure, Responsible, and Scalable](https://developer.microsoft.com/reactor/events/23596/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 8 | Episode 11: [10x Developer with GitHub Copilot](https://developer.microsoft.com/reactor/events/23597/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 10 | Episode 12: [Building and Running Intelligent Spring Apps on Azure Container Apps](https://developer.microsoft.com/reactor/events/23598/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 14 | Episode 13: [Ingest your own content using Azure Functions OpenAI Triggers & Bindings](https://developer.microsoft.com/reactor/events/23599/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 15 | Episode 14: [GenAI Gateway Capabilities in Azure API Management](https://developer.microsoft.com/reactor/events/23600/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n  * October 17 | Episode 15: [Elevate Policy Authoring Experience in API Management](https://developer.microsoft.com/reactor/events/23601/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n\\n* **Register** for the [AI Skills Challenge](https://aka.ms/intelligent-apps/csc?ocid=biafy25h1_30daysofia_webpage_azuremktg) to earn a Microsoft Learn badge \u2013 ends on *November 1*!.\\n\\n:::\\n\\n## #30Days Of Intelligent Apps\\n\\n[#30Days of IA](https://azure.github.io/Cloud-Native/30-days-of-ia-2024) is a series of \u201chow-to\u201d blog posts grouped into themed weeks - taking you from core concepts to end-to-end solution examples in 30 days. Each blog will provide conceptual lessons paired with exercises and resources to help you reinforce learnings and take next steps.\\n\\nThis series takes you through learning journey in\u202f**four stages**, each building on the previous week to help you skill up in a beginner-friendly way:\\n\\n* **Week 1**: Build AI powered content generation [intelligent app in Java on Azure Kubernetes Service (AKS)](https://azure.microsoft.com/blog/build-next-generation-ai-powered-applications-on-microsoft-azure/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n* **Week 2**: Build AI powered content generation [intelligent app in Java on Azure App Service](https://azure.microsoft.com/blog/build-next-generation-ai-powered-applications-on-microsoft-azure/?ocid=biafy25h1_30daysofia_webpage_azuremktg)\\n* **Week 3**: Build your own copilot with [Azure AI Studio](https://azure.microsoft.com/products/ai-studio/?msockid=115fb720d83d62ad12f8a380d9876328&ocid=biafy25h1_30daysofia_webpage_azuremktg), [Prompty](https://github.com/microsoft/prompty) and AKS\\n* **Week 4**: Infuse AI-assisted development tools to [enhance your efforts](https://www.microsoft.com/research/publication/the-space-of-developer-productivity-theres-more-to-it-than-you-think/?msockid=115fb720d83d62ad12f8a380d9876328&ocid=biafy25h1_30daysofia_webpage_azuremktg) and experience.\\n\\nWe will start with defining intelligent apps and then expand on how to build with cloud technologies like [Azure Kubernetes Service (AKS)](https://azure.microsoft.com/products/kubernetes-service/?ocid=biafy25h1_30daysofia_webpage_azuremktg), [Azure App Service](https://azure.microsoft.com/products/app-service/?ocid=biafy25h1_30daysofia_webpage_azuremktg), [Secure API Management](https://azure.microsoft.com/products/api-management/?ocid=biafy25h1_30daysofia_webpage_azuremktg), and [GitHub Copilot](https://github.com/features/copilot?ef_id=_k_77f1fde05f071240ccbe9b3b760f8c57_k_&OCID=AIDcmmb150vbv1_SEM__k_77f1fde05f071240ccbe9b3b760f8c57_k_&msclkid=77f1fde05f071240ccbe9b3b760f8c57) as well as integrate AI and cloud-scale data. You will learn how to build end-to-end scenarios for real world application development based on [reference architectures](https://learn.microsoft.com/azure/architecture/?ocid=biafy25h1_30daysofia_webpage_azuremktg). Before we dive deep on intelligent apps, here is a high-level overview of the **Intelligent Apps** landscape on Azure for you to leverage the most comprehensive, trusted cloud to prime the customer and employee experiences.\\n\\n![diagram of intelligent apps on Azure AI application platform](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/azure-ai-application-platform.jpeg)\\n\\nThe Azure application platform is designed to help you deliver on the promise of intelligent applications. It\u2019s an [integrated platform](https://azure.microsoft.com/solutions/build-modernize-intelligent-apps?ocid=biafy25h1_30daysofia_webpage_azuremktg) that encompasses developer services, application services, databases, and [AI](https://azure.microsoft.com/solutions/ai/?ocid=biafy25h1_30daysofia_webpage_azuremktg) services. Leveraging Azure\u2019s robust security capabilities and principles around governance and [responsible AI](https://www.microsoft.com/ai/responsible-ai?ocid=biafy25h1_30daysofia_webpage_azuremktg), the platform supports what you already use to help you make your apps intelligent. The developer stack on Azure also integrates AI, enhancing productivity for developers\u2019 efficiency.\\n\\nThere are eight key areas in which you can reinvent experiences for external customers as well as reshape internal processes to derive high productivity.\\n\\n![image of use cases for reinventing customer experiences with intelligent apps](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/customer-experiences.jpeg)\\n\\n![image of use cases for reshaping business processes with intelligent apps](../../static/img/30-days-of-ia-2024/blogs/2024-09-10/reshaping-business-processes.jpeg)\\n\\nBring your applications to a modern application platform in the cloud for AI, which leverages a cloud data platform at scale, and agile development methods with DevOps. Embrace the most effective approaches to enhance both customer and employee experiences. Azure offers the latest apps, data, AI and is the most comprehensive, trusted cloud.\\n\\nTo start with the basics for understanding AI app development concepts, explore [#30Days of IA (2023)](https://azure.github.io/Cloud-Native/30DaysOfIA/)\u202fand [#60Days of IA](https://azure.github.io/Cloud-Native/60DaysOfIA/).\\n\\n## Let\u2019s Get Started\\n\\nNow you know everything! We hope you are as excited as we are to dive into a full month of active learning and doing! Don\'t forget to\u202f[subscribe](https://azure.github.io/Cloud-Native/30-days-of-ia-2024/rss.xml) for updates in your favorite feed reader.\u202f**And, look out for our first Intelligent Apps blog.**"}]}')}}]);