"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84643],{77001:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(85893),i=t(11151);const s={slug:"24-aca-dotnet",title:"24. Deploy ASP.NET app to ACA",authors:["alexwolf"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["azure","functions","serverless","concepts"],image:"./img/dotnet/banner.png",description:"Deploy your containerized, multi-project .NET applications to Azure Container Apps",tags:["serverless-september","30-days-of-serverless","dotnet","asp.net","azure-container-apps","dapr","microservices"]},a=void 0,o={permalink:"/Cloud-Native/blog/24-aca-dotnet",source:"@site/blog/2022-09-24/index.md",title:"24. Deploy ASP.NET app to ACA",description:"Deploy your containerized, multi-project .NET applications to Azure Container Apps",date:"2022-09-24T00:00:00.000Z",formattedDate:"September 24, 2022",tags:[{label:"serverless-september",permalink:"/Cloud-Native/blog/tags/serverless-september"},{label:"30-days-of-serverless",permalink:"/Cloud-Native/blog/tags/30-days-of-serverless"},{label:"dotnet",permalink:"/Cloud-Native/blog/tags/dotnet"},{label:"asp.net",permalink:"/Cloud-Native/blog/tags/asp-net"},{label:"azure-container-apps",permalink:"/Cloud-Native/blog/tags/azure-container-apps"},{label:"dapr",permalink:"/Cloud-Native/blog/tags/dapr"},{label:"microservices",permalink:"/Cloud-Native/blog/tags/microservices"}],readingTime:18.8,hasTruncateMarker:!1,authors:[{name:"Alex Wolf",title:"Software Engineer @Microsoft",url:"https://github.com/alexwolfmsft",imageURL:"https://github.com/alexwolfmsft.png",key:"alexwolf"}],frontMatter:{slug:"24-aca-dotnet",title:"24. Deploy ASP.NET app to ACA",authors:["alexwolf"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["azure","functions","serverless","concepts"],image:"./img/dotnet/banner.png",description:"Deploy your containerized, multi-project .NET applications to Azure Container Apps",tags:["serverless-september","30-days-of-serverless","dotnet","asp.net","azure-container-apps","dapr","microservices"]},unlisted:!1,prevItem:{title:"25. Deploy Spring Boot App to ACA",permalink:"/Cloud-Native/blog/25-aca-java"},nextItem:{title:"21. CloudEvents with Event Grid",permalink:"/Cloud-Native/blog/21-cloudevents-via-event-grid"}},c={image:t(44939).Z,authorsImageUrls:[void 0]},l=[{value:"What We&#39;ll Cover",id:"what-well-cover",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Project Sources",id:"project-sources",level:2},{value:"Configuring Azure credentials",id:"configuring-azure-credentials",level:2},{value:"Deploy using Github Actions",id:"deploy-using-github-actions",level:2},{value:"Explore the Azure resources",id:"explore-the-azure-resources",level:2},{value:"Understanding the GitHub Actions workflow",id:"understanding-the-github-actions-workflow",level:2},{value:"Understanding the Bicep templates",id:"understanding-the-bicep-templates",level:2},{value:"<em>main.bicep</em> without Dapr",id:"mainbicep-without-dapr",level:3},{value:"<em>main.bicep</em> with Dapr",id:"mainbicep-with-dapr",level:3},{value:"Bicep Modules",id:"bicep-modules",level:3},{value:"<em>environment.bicep</em> without Dapr",id:"environmentbicep-without-dapr",level:3},{value:"<em>environment.bicep</em> with Dapr",id:"environmentbicep-with-dapr",level:3},{value:"<em>container_app.bicep</em> without Dapr",id:"container_appbicep-without-dapr",level:3},{value:"<em>container_app.bicep</em> with Dapr",id:"container_appbicep-with-dapr",level:3},{value:"Understanding configuration differences with Dapr",id:"understanding-configuration-differences-with-dapr",level:2},{value:"Without Dapr",id:"without-dapr",level:3},{value:"With Dapr",id:"with-dapr",level:3},{value:"Clean up resources",id:"clean-up-resources",level:2}];function p(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Head:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s,{children:[(0,r.jsx)("meta",{name:"twitter:url",content:"https://azure.github.io/Cloud-Native/blog/24-aca-dotnet"}),(0,r.jsx)("meta",{name:"twitter:title",content:"#30DaysOfServerless: Deploy an ASP.NET app to Azure Container Apps "}),(0,r.jsx)("meta",{name:"twitter:description",content:"#30DaysOfServerless: Deploy an ASP.NET app to Azure Container Apps"}),(0,r.jsx)("meta",{name:"twitter:image",content:"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png"}),(0,r.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,r.jsx)("meta",{name:"twitter:creator",content:"@nitya"}),(0,r.jsx)("meta",{name:"twitter:site",content:"@AzureAdvocates"}),(0,r.jsx)("link",{rel:"canonical",href:"https://azure.github.io/Cloud-Native/blog/24-aca-dotnet"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Welcome to ",(0,r.jsx)(n.code,{children:"Day 24"})," of #30DaysOfServerless!"]}),"\n",(0,r.jsx)(n.p,{children:"We continue exploring E2E scenarios with this tutorial where you'll deploy a containerized ASP.NET Core 6.0 application to Azure Container Apps."}),"\n",(0,r.jsx)(n.p,{children:"The application consists of a front-end web app built using Blazor Server, as well as two Web API projects to manage data. These projects will exist as three separate containers inside of a shared container apps environment."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-well-cover",children:"What We'll Cover"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy ASP.NET Core 6.0 app to Azure Container Apps"}),"\n",(0,r.jsx)(n.li,{children:"Automate deployment workflows using GitHub Actions"}),"\n",(0,r.jsx)(n.li,{children:"Provision and deploy resources using Azure Bicep"}),"\n",(0,r.jsx)(n.li,{children:"Exercise: Try this yourself!"}),"\n",(0,r.jsx)(n.li,{children:"Resources: For self-study!"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Slide on &quot;E2E \u2013 Container Apps&quot; by Alex Wolf (@alexwolfmsft), covering ASP.NET, GitHub Actions, and Bicep in serverless deployments.",src:t(38416).Z+"",width:"1600",height:"672"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"Azure Container Apps enables you to run microservices and containerized applications on a serverless platform. With Container Apps, you enjoy the benefits of running containers while leaving behind the concerns of manually configuring cloud infrastructure and complex container orchestrators."}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, you'll deploy a containerized ASP.NET Core 6.0 application to Azure Container Apps. The application consists of a front-end web app built using Blazor Server, as well as two Web API projects to manage data. These projects will exist as three separate containers inside of a shared container apps environment."}),"\n",(0,r.jsx)(n.p,{children:"You will use GitHub Actions in combination with Bicep to deploy the application. These tools provide an approachable and sustainable solution for building CI/CD pipelines and working with Container Apps."}),"\n",(0,r.jsx)(n.admonition,{title:"PRE-REQUISITES",type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An Azure subscription. ",(0,r.jsx)(n.a,{href:"https://azure.microsoft.com",children:"Sign up for free"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.a,{href:"https://github.com/join",children:"GitHub account"}),", with access to GitHub Actions."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/azure/install-azure-cli",children:"Azure CLI"})," installed locally."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://visualstudio.microsoft.com/vs/",children:"Microsoft Visual Studio 2022"})}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we'll setup a container app environment with a separate container for each project in the sample store app. The major components of the sample project include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A Blazor Server front-end web app to display product information"}),"\n",(0,r.jsx)(n.li,{children:"A products API to list available products"}),"\n",(0,r.jsx)(n.li,{children:"An inventory API to determine how many products are in stock"}),"\n",(0,r.jsx)(n.li,{children:"GitHub Actions and Bicep templates to provision Azure resources and then build and deploy the sample app."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You will explore these templates later in the tutorial."}),"\n",(0,r.jsx)(n.p,{children:"Public internet traffic should be proxied to the Blazor app. The back-end APIs should only be reachable via requests from the Blazor app inside the container apps environment. This setup can be achieved using container apps environment ingress configurations during deployment."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"An architecture diagram of the shopping app",src:t(45310).Z+"",width:"1051",height:"586"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"project-sources",children:"Project Sources"}),"\n",(0,r.jsx)(n.p,{children:"Want to follow along? Fork the sample below. The tutorial can be completed with or without Dapr integration. Pick the path you feel comfortable in. Dapr provides various benefits that make working with Microservices easier - you can learn more in the docs. For this tutorial you will need GitHub and Azure CLI."}),"\n",(0,r.jsxs)(n.admonition,{title:"PICK YOUR PATH",type:"info",children:[(0,r.jsx)(n.p,{children:"To follow along with this tutorial, fork the relevant sample project below."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/Azure-Samples/dotNET-FrontEnd-to-BackEnd-on-Azure-Container-Apps",children:(0,r.jsx)(n.strong,{children:"Project Repo: Without Dapr"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/Azure-Samples/dotNET-FrontEnd-to-BackEnd-with-DAPR-on-Azure-Container-Apps",children:(0,r.jsx)(n.strong,{children:"Project Repo: With Dapr"})})}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"You can run the app locally from Visual Studio:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Right click on the Blazor ",(0,r.jsx)(n.strong,{children:"Store"})," project and select ",(0,r.jsx)(n.strong,{children:"Set as Startup Project"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Press the start button at the top of Visual Studio to run the app."}),"\n",(0,r.jsx)(n.li,{children:"(Once running) start each API in the background by"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"right-clicking on the project node"}),"\n",(0,r.jsxs)(n.li,{children:["selecting ",(0,r.jsx)(n.strong,{children:"Debug --\x3e Start without debugging"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Once the Blazor app is running, you should see something like this:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"An architecture diagram of the shopping app",src:t(34678).Z+"",width:"871",height:"593"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuring-azure-credentials",children:"Configuring Azure credentials"}),"\n",(0,r.jsxs)(n.p,{children:["In order to deploy the application to Azure through GitHub Actions, you first need to create a service principal. The service principal will allow the GitHub Actions process to authenticate to your Azure subscription to create resources and deploy code. You can ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/azure/create-an-azure-service-principal-azure-cli",children:"learn more about Service Principals"})," in the Azure CLI documentation. For this step you'll need to be logged into the Azure CLI."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If you have not done so already, make sure to ",(0,r.jsx)(n.a,{href:"https://github.com/Azure-Samples/dotNET-FrontEnd-to-BackEnd-on-Azure-Container-Apps",children:"fork the sample project"})," to your own GitHub account or organization."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Once you have completed this step, create a service principal using the Azure CLI command below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-azurecli",children:"$subscriptionId=$(az account show --query id --output tsv)\naz ad sp create-for-rbac --sdk-auth --name WebAndApiSample --role Contributor --scopes /subscriptions/$subscriptionId\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Copy the JSON output of the CLI command to your clipboard"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Under the settings tab of your forked GitHub repo, create a new secret named ",(0,r.jsx)(n.strong,{children:"AzureSPN"}),". The name is important to match the Bicep templates included in the project, which we'll review later. Paste the copied service principal values on your clipboard into the secret and save your changes. This new secret will be used by the GitHub Actions workflow to authenticate to Azure."]}),"\n",(0,r.jsx)(n.p,{children:':::image type="content" source="./img/dotnet/github-secrets.png" alt-text="A screenshot of adding GitHub secrets.":::'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deploy-using-github-actions",children:"Deploy using Github Actions"}),"\n",(0,r.jsxs)(n.p,{children:["You are now ready to deploy the application to Azure Container Apps using GitHub Actions. The sample application includes a GitHub Actions template that is configured to build and deploy any changes to a branch named ",(0,r.jsx)(n.strong,{children:"deploy"}),".  The deploy branch does not exist in your forked repository by default, but you can easily create it through the GitHub user interface."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Switch to the ",(0,r.jsx)(n.strong,{children:"Actions"})," tab along the top navigation of your GitHub repository. If you have not done so already, ensure that workflows are enabled by clicking the button in the center of the page."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"A screenshot showing how to enable GitHub actions",src:t(62639).Z+"",width:"800",height:"352"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Navigate to the main ",(0,r.jsx)(n.strong,{children:"Code"})," tab of your repository and select the ",(0,r.jsx)(n.strong,{children:"main"})," dropdown. Enter ",(0,r.jsx)(n.em,{children:"deploy"})," into the branch input box, and then select ",(0,r.jsx)(n.strong,{children:"Create branch: deploy from 'main'"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"A screenshot showing how to create the deploy branch",src:t(23245).Z+"",width:"935",height:"303"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On the new ",(0,r.jsx)(n.strong,{children:"deploy"})," branch, navigate down into the ",(0,r.jsx)(n.strong,{children:".github/workflows"})," folder. You should see a file called ",(0,r.jsx)(n.strong,{children:"deploy.yml"}),", which contains the main GitHub Actions workflow script. Click on the file to view its content. You'll learn more about this file later in the tutorial."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Click the pencil icon in the upper right to edit the document."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Change the ",(0,r.jsx)(n.strong,{children:"RESOURCE_GROUP_NAME:"})," value to ",(0,r.jsx)(n.em,{children:"msdocswebappapis"})," or another valid resource group name of your choosing."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the upper right of the screen, select ",(0,r.jsx)(n.strong,{children:"Start commit"})," and then ",(0,r.jsx)(n.strong,{children:"Commit changes"})," to commit your edit. This will persist the change to the file and trigger the GitHub Actions workflow to build and deploy the app."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"A screenshot showing how to commit changes",src:t(45782).Z+"",width:"1015",height:"433"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Switch to the ",(0,r.jsx)(n.strong,{children:"Actions"})," tab along the top navigation again. You should see the workflow running to create the necessary resources and deploy the app. The workflow may take several minutes to run. When it completes successfully, all of the jobs should have a green checkmark icon next to them."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The completed GitHub workflow.",src:t(8659).Z+"",width:"1343",height:"452"})}),"\n",(0,r.jsx)(n.h2,{id:"explore-the-azure-resources",children:"Explore the Azure resources"}),"\n",(0,r.jsx)(n.p,{children:"Once the GitHub Actions workflow has completed successfully you can browse the created resources in the Azure portal."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On the left navigation, select ",(0,r.jsx)(n.strong,{children:"Resource Groups"}),". Next,choose the ",(0,r.jsx)(n.strong,{children:"msdocswebappapis"})," resource group that was created by the GitHub Actions workflow."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You should see seven resources available that match the screenshot and table descriptions below."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The resources created in Azure.",src:t(88871).Z+"",width:"818",height:"426"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Resource name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"inventory"}),(0,r.jsx)(n.td,{children:"Container app"}),(0,r.jsx)(n.td,{children:"The containerized inventory API."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"msdocswebappapisacr"}),(0,r.jsx)(n.td,{children:"Container registry"}),(0,r.jsx)(n.td,{children:"A registry that stores the built Container images for your apps."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"msdocswebappapisai"}),(0,r.jsx)(n.td,{children:"Application insights"}),(0,r.jsx)(n.td,{children:"Application insights provides advanced monitoring, logging and metrics for your apps."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"msdocswebappapisenv"}),(0,r.jsx)(n.td,{children:"Container apps environment"}),(0,r.jsx)(n.td,{children:"A container environment that manages networking, security and resource concerns. All of your containers live in this environment."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"msdocswebappapislogs"}),(0,r.jsx)(n.td,{children:"Log Analytics workspace"}),(0,r.jsx)(n.td,{children:"A workspace environment for managing logging and analytics for the container apps environment"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"products"}),(0,r.jsx)(n.td,{children:"Container app"}),(0,r.jsx)(n.td,{children:"The containerized products API."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"store"}),(0,r.jsx)(n.td,{children:"Container app"}),(0,r.jsx)(n.td,{children:"The Blazor front-end web app."})]})]})]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You can view your running app in the browser by clicking on the ",(0,r.jsx)(n.strong,{children:"store"})," container app. On the overview page, click the ",(0,r.jsx)(n.strong,{children:"Application Url"})," link on the upper right of the screen."]}),"\n",(0,r.jsx)(n.p,{children:':::image type="content" source="./img/dotnet/application-url.png" alt-text="The link to browse the app.":::'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"understanding-the-github-actions-workflow",children:"Understanding the GitHub Actions workflow"}),"\n",(0,r.jsxs)(n.p,{children:["The GitHub Actions workflow created and deployed resources to Azure using the ",(0,r.jsx)(n.strong,{children:"deploy.yml"})," file in the ",(0,r.jsx)(n.strong,{children:".github"})," folder at the root of the project. The primary purpose of this file is to respond to events - such as commits to a branch - and run jobs to accomplish tasks. The ",(0,r.jsx)(n.strong,{children:"deploy.yml"})," file in the sample project has three main jobs:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provision"}),": Create the necessary resources in Azure, such as the container apps environment. This step leverages Bicep templates to create the Azure resources, which you'll explore in a moment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Build"}),": Create the container images for the three apps in the project and store them in the container registry."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deploy"}),": Deploy the container images to the different container apps created during the provisioning job."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"deploy.yml"})," file also accepts parameters to make the workflow more dynamic, such as setting the resource group name or the Azure region resources will be provisioned to."]}),"\n",(0,r.jsxs)(n.p,{children:["Below is a commented version of the ",(0,r.jsx)(n.strong,{children:"deploy.yml"})," file that highlights the essential steps."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'name: Build and deploy .NET application to Container Apps\n\n# Trigger the workflow on pushes to the deploy branch\non:\n  push:\n    branches:\n    - deploy\n\nenv:\n  # Set workflow variables\n  RESOURCE_GROUP_NAME: msdocswebappapis\n\n  REGION: eastus\n\n  STORE_DOCKER: Store/Dockerfile\n  STORE_IMAGE: store\n\n  INVENTORY_DOCKER: Store.InventoryApi/Dockerfile\n  INVENTORY_IMAGE: inventory\n\n  PRODUCTS_DOCKER: Store.ProductApi/Dockerfile\n  PRODUCTS_IMAGE: products\n\njobs:\n  # Create the required Azure resources\n  provision:\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout to the branch\n      uses: actions/checkout@v2\n\n    - name: Azure Login\n      uses: azure/login@v1\n      with:\n        creds: ${{ secrets.AzureSPN }}\n\n    - name: Create resource group\n      uses: azure/CLI@v1\n      with:\n        inlineScript: >\n          echo "Creating resource group in Azure"\n          echo "Executing \'az group create -l ${{ env.REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}\'"\n          az group create -l ${{ env.REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}\n\n    # Use Bicep templates to create the resources in Azure\n    - name: Creating resources\n      uses: azure/CLI@v1\n      with:\n        inlineScript: >\n          echo "Creating resources"\n          az deployment group create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --template-file \'/github/workspace/Azure/main.bicep\' --debug\n\n  # Build the three app container images\n  build:\n    runs-on: ubuntu-latest\n    needs: provision\n    \n    steps:\n\n    - name: Checkout to the branch\n      uses: actions/checkout@v2\n\n    - name: Azure Login\n      uses: azure/login@v1\n      with:\n        creds: ${{ secrets.AzureSPN }}\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Login to ACR\n      run: |\n        set -euo pipefail\n        access_token=$(az account get-access-token --query accessToken -o tsv)\n        refresh_token=$(curl https://${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io&access_token=$access_token" | jq -r .refresh_token)\n        docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io <<< "$refresh_token"\n\n    - name: Build the products api image and push it to ACR\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        tags: ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.PRODUCTS_IMAGE }}:${{ github.sha }}\n        file: ${{ env.PRODUCTS_DOCKER }}\n\n    - name: Build the inventory api image and push it to ACR\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        tags: ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.INVENTORY_IMAGE }}:${{ github.sha }}\n        file: ${{ env.INVENTORY_DOCKER }}\n\n    - name: Build the frontend image and push it to ACR\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        tags: ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.STORE_IMAGE }}:${{ github.sha }}\n        file: ${{ env.STORE_DOCKER }}\n\n  # Deploy the three container images\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n\n    steps:\n\n    - name: Checkout to the branch\n      uses: actions/checkout@v2\n\n    - name: Azure Login\n      uses: azure/login@v1\n      with:\n        creds: ${{ secrets.AzureSPN }}\n\n    - name: Installing Container Apps extension\n      uses: azure/CLI@v1\n      with:\n        inlineScript: >\n          az config set extension.use_dynamic_install=yes_without_prompt\n\n          az extension add --name containerapp --yes\n\n    - name: Login to ACR\n      run: |\n        set -euo pipefail\n        access_token=$(az account get-access-token --query accessToken -o tsv)\n        refresh_token=$(curl https://${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io&access_token=$access_token" | jq -r .refresh_token)\n        docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io <<< "$refresh_token"\n\n    - name: Deploy Container Apps\n      uses: azure/CLI@v1\n      with:\n        inlineScript: >\n          az containerapp registry set -n products -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io\n\n          az containerapp update -n products -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.PRODUCTS_IMAGE }}:${{ github.sha }}\n\n          az containerapp registry set -n inventory -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io\n\n          az containerapp update -n inventory -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.INVENTORY_IMAGE }}:${{ github.sha }}\n\n          az containerapp registry set -n store -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io\n          \n          az containerapp update -n store -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.STORE_IMAGE }}:${{ github.sha }}\n\n    - name: logout\n      run: >\n        az logout\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"understanding-the-bicep-templates",children:"Understanding the Bicep templates"}),"\n",(0,r.jsxs)(n.p,{children:["During the provisioning stage of the GitHub Actions workflow, the ",(0,r.jsx)(n.strong,{children:"main.bicep"})," file is processed. Bicep files provide a declarative way of generating resources in Azure and are ideal for managing infrastructure as code. You can ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/azure/azure-resource-manager/bicep/overview?tabs=bicep",children:"learn more about Bicep"})," in the related documentation.  The ",(0,r.jsx)(n.em,{children:"main.bicep"})," file in the sample project creates the following resources:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The container registry to store images of the containerized apps."}),"\n",(0,r.jsx)(n.li,{children:"The container apps environment, which handles networking and resource management for the container apps."}),"\n",(0,r.jsx)(n.li,{children:"Three container apps - one for the Blazor front-end and two for the back-end product and inventory APIs."}),"\n",(0,r.jsx)(n.li,{children:"Configuration values to connect these services together"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mainbicep-without-dapr",children:(0,r.jsxs)(n.a,{href:"#tab/exclude-dapper",children:[(0,r.jsx)(n.em,{children:"main.bicep"})," without Dapr"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"param location string = resourceGroup().location\n\n# create the azure container registry\nresource acr 'Microsoft.ContainerRegistry/registries@2021-09-01' = {\n  name: toLower('${resourceGroup().name}acr')\n  location: location\n  sku: {\n    name: 'Basic'\n  }\n  properties: {\n    adminUserEnabled: true\n  }\n}\n\n# create the aca environment\nmodule env 'environment.bicep' = {\n  name: 'containerAppEnvironment'\n  params: {\n    location: location\n  }\n}\n\n# create the various configuration pairs\nvar shared_config = [\n  {\n    name: 'ASPNETCORE_ENVIRONMENT'\n    value: 'Development'\n  }\n  {\n    name: 'APPINSIGHTS_INSTRUMENTATIONKEY'\n    value: env.outputs.appInsightsInstrumentationKey\n  }\n  {\n    name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'\n    value: env.outputs.appInsightsConnectionString\n  }\n]\n\n# create the products api container app\nmodule products 'container_app.bicep' = {\n  name: 'products'\n  params: {\n    name: 'products'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: shared_config\n    externalIngress: false\n  }\n}\n\n# create the inventory api container app\nmodule inventory 'container_app.bicep' = {\n  name: 'inventory'\n  params: {\n    name: 'inventory'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: shared_config\n    externalIngress: false\n  }\n}\n\n# create the store api container app\nvar frontend_config = [\n  {\n    name: 'ProductsApi'\n    value: 'http://${products.outputs.fqdn}'\n  }\n  {\n    name: 'InventoryApi'\n    value: 'http://${inventory.outputs.fqdn}'\n  }\n]\n\nmodule store 'container_app.bicep' = {\n  name: 'store'\n  params: {\n    name: 'store'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: union(shared_config, frontend_config)\n    externalIngress: true\n  }\n}\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mainbicep-with-dapr",children:(0,r.jsxs)(n.a,{href:"#tab/include-dapper",children:[(0,r.jsx)(n.em,{children:"main.bicep"})," with Dapr"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"\nparam location string = resourceGroup().location\n\n# create the azure container registry\nresource acr 'Microsoft.ContainerRegistry/registries@2021-09-01' = {\n  name: toLower('${resourceGroup().name}acr')\n  location: location\n  sku: {\n    name: 'Basic'\n  }\n  properties: {\n    adminUserEnabled: true\n  }\n}\n\n# create the aca environment\nmodule env 'environment.bicep' = {\n  name: 'containerAppEnvironment'\n  params: {\n    location: location\n  }\n}\n\n# create the various config pairs\nvar shared_config = [\n  {\n    name: 'ASPNETCORE_ENVIRONMENT'\n    value: 'Development'\n  }\n  {\n    name: 'APPINSIGHTS_INSTRUMENTATIONKEY'\n    value: env.outputs.appInsightsInstrumentationKey\n  }\n  {\n    name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'\n    value: env.outputs.appInsightsConnectionString\n  }\n]\n\n# create the products api container app\nmodule products 'container_app.bicep' = {\n  name: 'products'\n  params: {\n    name: 'products'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: shared_config\n    externalIngress: false\n  }\n}\n\n# create the inventory api container app\nmodule inventory 'container_app.bicep' = {\n  name: 'inventory'\n  params: {\n    name: 'inventory'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: shared_config\n    externalIngress: false\n  }\n}\n\n# create the store api container app\nmodule store 'container_app.bicep' = {\n  name: 'store'\n  params: {\n    name: 'store'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: shared_config\n    externalIngress: true\n  }\n}\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"bicep-modules",children:"Bicep Modules"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"main.bicep"})," file references modules to create resources, such as ",(0,r.jsx)(n.code,{children:"module products"}),". Modules are a feature of Bicep templates that enable you to abstract resource declarations into their own files or sub-templates. As the ",(0,r.jsx)(n.em,{children:"main.bicep"})," file is processed, the defined modules are also evaluated. Modules allow you to create resources in a more organized and reusable way. They can also define input and output parameters that are passed to and from the parent template, such as the name of a resource."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the ",(0,r.jsx)(n.em,{children:"environment.bicep"})," module extracts the details of creating a container apps environment into a reusable template. The module defines necessary resource dependencies such as Log Analytics Workspaces and an Application Insights instance."]}),"\n",(0,r.jsx)(n.h3,{id:"environmentbicep-without-dapr",children:(0,r.jsxs)(n.a,{href:"#tab/exclude-dapper",children:[(0,r.jsx)(n.em,{children:"environment.bicep"})," without Dapr"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"param baseName string = resourceGroup().name\nparam location string = resourceGroup().location\n\nresource logs 'Microsoft.OperationalInsights/workspaces@2021-06-01' = {\n  name: '${baseName}logs'\n  location: location\n  properties: any({\n    retentionInDays: 30\n    features: {\n      searchVersion: 1\n    }\n    sku: {\n      name: 'PerGB2018'\n    }\n  })\n}\n\nresource appInsights 'Microsoft.Insights/components@2020-02-02' = {\n  name: '${baseName}ai'\n  location: location\n  kind: 'web'\n  properties: {\n    Application_Type: 'web'\n    WorkspaceResourceId: logs.id\n  }\n}\n\nresource env 'Microsoft.App/managedEnvironments@2022-01-01-preview' = {\n  name: '${baseName}env'\n  location: location\n  properties: {\n    appLogsConfiguration: {\n      destination: 'log-analytics'\n      logAnalyticsConfiguration: {\n        customerId: logs.properties.customerId\n        sharedKey: logs.listKeys().primarySharedKey\n      }\n    }\n  }\n}\n\noutput id string = env.id\noutput appInsightsInstrumentationKey string = appInsights.properties.InstrumentationKey\noutput appInsightsConnectionString string = appInsights.properties.ConnectionString\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"environmentbicep-with-dapr",children:(0,r.jsxs)(n.a,{href:"#tab/include-dapper",children:[(0,r.jsx)(n.em,{children:"environment.bicep"})," with Dapr"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"\nparam baseName string = resourceGroup().name\nparam location string = resourceGroup().location\n\nresource logs 'Microsoft.OperationalInsights/workspaces@2021-06-01' = {\n  name: '${baseName}logs'\n  location: location\n  properties: any({\n    retentionInDays: 30\n    features: {\n      searchVersion: 1\n    }\n    sku: {\n      name: 'PerGB2018'\n    }\n  })\n}\n\nresource appInsights 'Microsoft.Insights/components@2020-02-02' = {\n  name: '${baseName}ai'\n  location: location\n  kind: 'web'\n  properties: {\n    Application_Type: 'web'\n    WorkspaceResourceId: logs.id\n  }\n}\n\nresource env 'Microsoft.App/managedEnvironments@2022-01-01-preview' = {\n  name: '${baseName}env'\n  location: location\n  properties: {\n    appLogsConfiguration: {\n      destination: 'log-analytics'\n      logAnalyticsConfiguration: {\n        customerId: logs.properties.customerId\n        sharedKey: logs.listKeys().primarySharedKey\n      }\n    }\n  }\n}\n\noutput id string = env.id\noutput appInsightsInstrumentationKey string = appInsights.properties.InstrumentationKey\noutput appInsightsConnectionString string = appInsights.properties.ConnectionString\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"container_apps.bicep"})," template defines numerous parameters to provide a reusable template for creating container apps. This allows the module to be used in other CI/CD pipelines as well."]}),"\n",(0,r.jsx)(n.h3,{id:"container_appbicep-without-dapr",children:(0,r.jsxs)(n.a,{href:"#tab/exclude-dapper",children:[(0,r.jsx)(n.em,{children:"container_app.bicep"})," without Dapr"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"param name string\nparam location string = resourceGroup().location\nparam containerAppEnvironmentId string\nparam repositoryImage string = 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'\nparam envVars array = []\nparam registry string\nparam minReplicas int = 1\nparam maxReplicas int = 1\nparam port int = 80\nparam externalIngress bool = false\nparam allowInsecure bool = true\nparam transport string = 'http'\nparam registryUsername string\n@secure()\nparam registryPassword string\n\nresource containerApp 'Microsoft.App/containerApps@2022-01-01-preview' ={\n  name: name\n  location: location\n  properties:{\n    managedEnvironmentId: containerAppEnvironmentId\n    configuration: {\n      activeRevisionsMode: 'single'\n      secrets: [\n        {\n          name: 'container-registry-password'\n          value: registryPassword\n        }\n      ]      \n      registries: [\n        {\n          server: registry\n          username: registryUsername\n          passwordSecretRef: 'container-registry-password'\n        }\n      ]\n      ingress: {\n        external: externalIngress\n        targetPort: port\n        transport: transport\n        allowInsecure: allowInsecure\n      }\n    }\n    template: {\n      containers: [\n        {\n          image: repositoryImage\n          name: name\n          env: envVars\n        }\n      ]\n      scale: {\n        minReplicas: minReplicas\n        maxReplicas: maxReplicas\n      }\n    }\n  }\n}\n\noutput fqdn string = containerApp.properties.configuration.ingress.fqdn\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"container_appbicep-with-dapr",children:(0,r.jsxs)(n.a,{href:"#tab/include-dapper",children:[(0,r.jsx)(n.em,{children:"container_app.bicep"})," with Dapr"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"\nparam name string\nparam location string = resourceGroup().location\nparam containerAppEnvironmentId string\nparam repositoryImage string = 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'\nparam envVars array = []\nparam registry string\nparam minReplicas int = 1\nparam maxReplicas int = 1\nparam port int = 80\nparam externalIngress bool = false\nparam allowInsecure bool = true\nparam transport string = 'http'\nparam appProtocol string = 'http'\nparam registryUsername string\n@secure()\nparam registryPassword string\n\nresource containerApp 'Microsoft.App/containerApps@2022-01-01-preview' ={\n  name: name\n  location: location\n  properties:{\n    managedEnvironmentId: containerAppEnvironmentId\n    configuration: {\n      dapr: {\n        enabled: true\n        appId: name\n        appPort: port\n        appProtocol: appProtocol\n      }\n      activeRevisionsMode: 'single'\n      secrets: [\n        {\n          name: 'container-registry-password'\n          value: registryPassword\n        }\n      ]      \n      registries: [\n        {\n          server: registry\n          username: registryUsername\n          passwordSecretRef: 'container-registry-password'\n        }\n      ]\n      ingress: {\n        external: externalIngress\n        targetPort: port\n        transport: transport\n        allowInsecure: allowInsecure\n      }\n    }\n    template: {\n      containers: [\n        {\n          image: repositoryImage\n          name: name\n          env: envVars\n        }\n      ]\n      scale: {\n        minReplicas: minReplicas\n        maxReplicas: maxReplicas\n      }\n    }\n  }\n}\n\noutput fqdn string = containerApp.properties.configuration.ingress.fqdn\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"understanding-configuration-differences-with-dapr",children:"Understanding configuration differences with Dapr"}),"\n",(0,r.jsx)(n.p,{children:"The code for this specific sample application is largely the same whether or not Dapr is integrated. However, even with this simple app, there are a few benefits and configuration differences when using Dapr that are worth exploring."}),"\n",(0,r.jsxs)(n.p,{children:["In this scenario most of the changes are related to communication between the container apps. However, you can explore the full range of Dapr benefits by reading the ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml",children:"Dapr integration with Azure Container Apps"})," article in the conceptual documentation."]}),"\n",(0,r.jsx)(n.h3,{id:"without-dapr",children:(0,r.jsx)(n.a,{href:"#tab/exclude-dapper",children:"Without Dapr"})}),"\n",(0,r.jsxs)(n.p,{children:["Without Dapr the ",(0,r.jsx)(n.em,{children:"main.bicep"})," template handles wiring up the front-end store app to communicate with the back-end apis by manually managing environment variables. The bicep template retrieves the fully qualified domains (fqdn) of the API apps as output parameters when they are created. Those configurations are then set as environment variables on the store container app."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"\n# Retrieve environment variables from API container creation \nvar frontend_config = [\n  {\n    name: 'ProductsApi'\n    value: 'http://${products.outputs.fqdn}'\n  }\n  {\n    name: 'InventoryApi'\n    value: 'http://${inventory.outputs.fqdn}'\n  }\n]\n\n# create the store api container app, passing in config\nmodule store 'container_app.bicep' = {\n  name: 'store'\n  params: {\n    name: 'store'\n    location: location\n    registryPassword: acr.listCredentials().passwords[0].value\n    registryUsername: acr.listCredentials().username\n    containerAppEnvironmentId: env.outputs.id\n    registry: acr.name\n    envVars: union(shared_config, frontend_config)\n    externalIngress: true\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The environment variables are then retrieved inside of the ",(0,r.jsx)(n.code,{children:"program"})," class and used to configure the base URLs of the corresponding HTTP clients."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'\nbuilder.Services.AddHttpClient("Products", (httpClient) => httpClient.BaseAddress = new Uri(builder.Configuration.GetValue<string>("ProductsApi")));\nbuilder.Services.AddHttpClient("Inventory", (httpClient) => httpClient.BaseAddress = new Uri(builder.Configuration.GetValue<string>("InventoryApi")));\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-dapr",children:(0,r.jsx)(n.a,{href:"#tab/include-dapper",children:"With Dapr"})}),"\n",(0,r.jsx)(n.p,{children:"Dapr can be enabled on a container app when it is created, as seen below. This configuration adds a Dapr sidecar to the app to streamline discovery and communication features between the different container apps in your environment."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"\n# Create the container app with Dapr enabled\nresource containerApp 'Microsoft.App/containerApps@2022-01-01-preview' ={\n  name: name\n  location: location\n  properties:{\n    managedEnvironmentId: containerAppEnvironmentId\n    configuration: {\n      dapr: {\n        enabled: true\n        appId: name\n        appPort: port\n        appProtocol: appProtocol\n      }\n      activeRevisionsMode: 'single'\n      secrets: [\n        {\n          name: 'container-registry-password'\n          value: registryPassword\n        }\n      ]      \n      \n    # Rest of template omitted for brevity...\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Some of these Dapr features can be surfaced through the ",(0,r.jsx)(n.code,{children:"program"})," file. You can configure your HttpClient to leverage Dapr configurations when communicating with other apps in your environment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'\n// reconfigure code to make requests to Dapr sidecar\nvar baseURL = (Environment.GetEnvironmentVariable("BASE_URL") ?? "http://localhost") + ":" + (Environment.GetEnvironmentVariable("DAPR_HTTP_PORT") ?? "3500");\nbuilder.Services.AddHttpClient("Products", (httpClient) =>\n{\n    httpClient.BaseAddress = new Uri(baseURL);\n    httpClient.DefaultRequestHeaders.Add("dapr-app-id", "Products");\n});\n\nbuilder.Services.AddHttpClient("Inventory", (httpClient) =>\n{\n    httpClient.BaseAddress = new Uri(baseURL);\n    httpClient.DefaultRequestHeaders.Add("dapr-app-id", "Inventory");\n});\n\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"clean-up-resources",children:"Clean up resources"}),"\n",(0,r.jsx)(n.p,{children:"If you're not going to continue to use this application, you can delete the Azure Container Apps and all the associated services by removing the resource group."}),"\n",(0,r.jsx)(n.p,{children:"Follow these steps in the Azure portal to remove the resources you created:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["In the Azure portal, navigate to the ",(0,r.jsx)(n.strong,{children:"msdocswebappsapi"})," resource group using the left navigation or search bar."]}),"\n",(0,r.jsxs)(n.li,{children:["Select the ",(0,r.jsx)(n.strong,{children:"Delete resource group"})," button at the top of the resource group ",(0,r.jsx)(n.em,{children:"Overview"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Enter the resource group name ",(0,r.jsx)(n.strong,{children:"msdocswebappsapi"})," in the ",(0,r.jsx)(n.em,{children:'Are you sure you want to delete "msdocswebappsapi"'})," confirmation dialog."]}),"\n",(0,r.jsxs)(n.li,{children:["Select ",(0,r.jsx)(n.strong,{children:"Delete"}),".",(0,r.jsx)(n.br,{}),"\n","The process to delete the resource group may take a few minutes to complete."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},44939:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/banner-7fdb7fe187e430c2baabec8b2ae4b648.png"},45310:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/architecture-a2d16c0719ab5f90fe9e4b66a40198bc.png"},88871:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/azure-resources-10875582a2a87a5283aa93138831819e.png"},38416:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/banner-7fdb7fe187e430c2baabec8b2ae4b648.png"},45782:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/commit-changes-0ad6c269b0d29b68df48a08978134a64.png"},23245:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/create-branch-07796a21bc3c6ad935f349c2e88c8486.png"},62639:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/enable-actions-6cdb57033746b72e51ed61517c896578.png"},8659:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/github-actions-success-8d42fb6cb84d9818e2198d23b712a610.png"},34678:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/store-ui-78a5d31238363380a388f368b62cdbfc.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var r=t(67294);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);