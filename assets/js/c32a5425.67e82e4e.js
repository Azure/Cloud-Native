"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7677],{1650:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/Cloud-Native/blog/welcome","source":"@site/blog/2022-08-17/index.md","title":"Hello, ServerlessSeptember","description":"\ud83c\udf42 It\'s September?","date":"2022-08-17T00:00:00.000Z","formattedDate":"August 17, 2022","tags":[{"label":"hello","permalink":"/Cloud-Native/blog/tags/hello"},{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"}],"readingTime":2.38,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Devanshi Joshi","title":"Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://pbs.twimg.com/profile_images/1520928730230652928/00BaK5xn_400x400.jpg","key":"devanshi"}],"frontMatter":{"slug":"welcome","title":"Hello, ServerlessSeptember","authors":["nitya","devanshi"],"draft":false,"tags":["hello","serverless-september"],"image":"../../static/img/banners/post-kickoff.png"},"nextItem":{"title":"Welcome Students!","permalink":"/Cloud-Native/blog/students"}},"content":"## \ud83c\udf42 It\'s September?\\n\\nWell, almost! September 1 is a few days away and I\'m excited! Why? Because it\'s the perfect time to revisit **#Serverless September**, a month of\\n> \\".. content-driven learning where experts and practitioners share their insights and tutorials on how to use serverless technologies effectively in today\'s ecosystems\\"\\n\\nIf the words look familiar, it\'s because I actually wrote them [2 years ago](https://dev.to/azure/serverlessseptember-just-5-things-you-need-to-know-3p9e) when we launched the 2020 edition of this series. You might even recall _this_ whimsical image I drew to capture the concept of September (fall) and Serverless (event-driven on-demand compute). Since then, a lot has happened in the serverless ecosystem!\\n\\n\\nYou can still browse the [2020 Content Collection](https://dev.to/azure/serverlessseptember-2020-content-collection-443k) to find great talks, articles and code samples to get started using Serverless on Azure. But read on to learn what\'s new!\\n\\n![](./img/2020-banner.png)\\n\\n\\n\\n\\n## \ud83e\uddd0 What\'s New?\\n\\nWell - quite a few things actually. This year, [Devanshi Joshi](https://twitter.com/devanshidiaries) and I expanded the original concept in a number of ways. Here\'s just a few of them that come to mind.\\n\\n### New Website\\n\\nThis year, we created _this_ website (shortcut: [https://aka.ms/serverless-september](https://aka.ms/serverless-september)) to serve as a permanent home for content in 2022 and beyond - making it a  canonical source for the `#serverless` posts we publish to  tech communities like [dev.to](https://dev.to/azure), [Azure Developer Community](https://techcommunity.microsoft.com/t5/azure-developer-community-blog/bg-p/AzureDevCommunityBlog?WT.mc_id=javascript-74010-ninarasi) and [Apps On Azure](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/bg-p/AppsonAzureBlog/label-name/Serverless?WT.mc_id=javascript-74010-ninarasi). We hope this also makes it easier for you to search for, or discover, current and past articles that support your learning journey!\\n\\nStart by bookmarking these two sites:\\n\\n * [Build Cloud Native Apps on Azure](https://azure.microsoft.com/en-us/solutions/cloud-native-apps/?WT.mc_id=javascript-74010-ninarasi)\\n * [Go Serverless On Azure](https://azure.microsoft.com/en-us/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi)\\n\\n\\n### More Options\\n\\nPrevious years focused on curating and sharing content authored by Microsoft and community contributors, showcasing serverless examples and best practices. This was perfect for those who already had experience with the core devtools and concepts.\\n\\nThis year, we wanted to combine _beginner-friendly_ options (for those just starting their serverless journey) with more _advanced insights_ (for those looking to skill up further). Here\'s a sneak peek at some of the initiatives we\'ve got planned!\\n\\n![](../../static/img/banners/post-kickoff.png)\\n\\nWe\'ll also explore the full spectrum of serverless - from Functions-as-a-Service (for granularity) to Containerization (for deployment) and Microservices (for scalability). Here are a few services and technologies you\'ll get to learn more about:\\n\\n * [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Container Apps](https://docs.microsoft.com/en-us/azure/container-apps/overview?WT.mc_id=javascript-74010-ninarasi)\\n * [Distributed Application Runtime (dapr)](https://dapr.io/?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Event Grid](https://docs.microsoft.com/en-us/azure/event-grid/?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Logic Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/logic-apps/?WT.mc_id=javascript-74010-ninarasi)\\n\\n\\n\\n\\n## \u26a1\ufe0f Join us!\\n\\nThis has been a labor of love from multiple teams at Microsoft! We can\'t wait to share all the resources that we hope will help _you_ skill up on all things Serverless this September! Here are a couple of ways to participate:\\n\\n* **[Subscribe to this blog](https://azure.github.io/Cloud-Native/blog/rss.xml)** - get notified early when we publish!\\n* **[Follow Azure on dev.to](https://dev.to/azure)** - look for the #ServerlessSeptember series!\\n* **[Bookmark this site](https://aka.ms/serverless-september)** and check back regularly for updates."},{"id":"students","metadata":{"permalink":"/Cloud-Native/blog/students","source":"@site/blog/2022-08-31/index.md","title":"Welcome Students!","description":"\u2728 Serverless September For Students","date":"2022-08-31T00:00:00.000Z","formattedDate":"August 31, 2022","tags":[{"label":"students","permalink":"/Cloud-Native/blog/tags/students"},{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"}],"readingTime":2.575,"hasTruncateMarker":false,"authors":[{"name":"Sara Gibbons","title":"Next Gen Experiences Advocate @Microsoft","url":"https://github.com/saragibby","imageURL":"https://github.com/saragibby.png","key":"sara"}],"frontMatter":{"slug":"students","title":"Welcome Students!","authors":["sara"],"draft":false,"tags":["students","serverless-september"]},"prevItem":{"title":"Hello, ServerlessSeptember","permalink":"/Cloud-Native/blog/welcome"},"nextItem":{"title":"01. It\'s 30DaysOfServerless!","permalink":"/Cloud-Native/blog/01-kickoff"}},"content":"## \u2728 Serverless September For Students\\n\\nMy love for the tech industry grows as it evolves. Not just for the new technologies to play with, but seeing how paths into a tech career continue to expand. Allowing so many new voices, ideas and perspectives to our industry. With [serverless computing](https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-serverless-computing/?WT.mc_id=academic-75239-sagibbon) removing barriers of entry for so many.\\n\\nIt\'s a reason I enjoy working with universities and students. I get to hear the excitement of learning, fresh ideas and perspectives from our student community. All you students are incredible! How you view serverless, and what it can do, so cool!  \\n\\nThis year for Serverless September we want to hear all the amazing ways our student community is learning and working with Azure Serverless, and have all new ways for you to participate. \\n\\n### Getting Started\\n\\nIf you don\'t already have an [Azure for Students](https://docs.microsoft.com/en-us/azure/education-hub/azure-dev-tools-teaching/azure-students-program?WT.mc_id=academic-75239-sagibbon) account you can easily get your **FREE** account created at [Azure for Students Sign up](https://azure.microsoft.com/en-us/free/students/?WT.mc_id=academic-75239-sagibbon).\\n\\nIf you are new to serverless, here are a couple links to get you started:\\n * [Build Cloud Native Apps on Azure](https://azure.microsoft.com/en-us/solutions/cloud-native-apps/?WT.mc_id=academic-75239-sagibbon)\\n * [Go Serverless On Azure](https://azure.microsoft.com/en-us/solutions/serverless/?WT.mc_id=academic-75239-sagibbon)\\n\\n\\n### No Experience, No problem\\n\\nFor Serverless September we have planned beginner friendly content all month long. Covering such services as:\\n * [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview?WT.mc_id=academic-75239-sagibbon)\\n * [Azure Container Apps](https://docs.microsoft.com/en-us/azure/container-apps/overview?WT.mc_id=academic-75239-sagibbon)\\n * [Distributed Application Runtime (dapr)](https://dapr.io/)\\n * [Azure Event Grid](https://docs.microsoft.com/en-us/azure/event-grid/?WT.mc_id=academic-75239-sagibbon)\\n * [Azure Logic Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/?WT.mc_id=academic-75239-sagibbon)\\n * [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/logic-apps/?WT.mc_id=academic-75239-sagibbon)\\n\\nYou can follow [#30DaysOfServerles](https://azure.github.io/Cloud-Native/blog/) here on the blog for daily posts covering concepts, scenarios, and how to create end-to-end solutions. \\n\\nJoin the [Cloud Skills Challenge](https://azure.github.io/Cloud-Native/serverless-september/CloudSkills/) where we have selected a list of Learn Modules for you to go through at your own pace, including deploying a full stack application with [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/logic-apps/?WT.mc_id=academic-75239-sagibbon).\\n\\n\\n### Have A Question \\n\\nWe want to hear it! All month long we will have **Ask The Expert** sessions. [Submit your questions](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=ask+the+expert&template=---ask-the-expert-.md&title=%5BAsk+The+Expert%5D++) at any time and will be be sure to get one of our Azure Serverless experts to get you an answer. \\n\\n### Share What You\'ve Created \\n\\nIf you have written a blog post, recorded a video, have an open source Azure Serverless project, we\'d love to see it! Here is some links for you to share your creations\\n\\n* [Written an article or recorded a video involving Azure Serverless](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=&template=---community-buzz--share-technical-articles.md&title=)\\n* [Have an open source Serverless project you built](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=&template=---community-showcase--share-code-projects.md&title=%5BShowcase+Submission%5D)\\n* [Crafted a Serverless Hack](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=&template=---serverless-hacks--share-your-hack-.md&title=%5BServerless+Hacks%5D)\\n\\n## \ud83e\udded Explore Student Resources\\n\\n* [Microsoft Student Hub](https://docs.microsoft.com/en-us/learn/student-hub/?WT.mc_id=academic-75239-sagibbon) - highlight student focused resources across Microsoft\\n* [Microsoft Learn Student Ambassadors](https://studentambassadors.microsoft.com/?WT.mc_id=academic-75239-sagibbon) - our student focused community program\\n* [Imagine Cup](https://imaginecup.microsoft.com/en-us/Events?ocid=pre_web_ambassador_learnmore_all?WT.mc_id=academic-75239-sagibbon) - our annual student innovation competition\\n\\n## \u26a1\ufe0f Join us!\\n\\nMultiple teams across Microsoft are working to create Serverless September! They all want to hear from our incredible student community. We can\'t wait to share all the Serverless September resources and hear what you have learned and created. Here are some ways to keep up to date on all Serverless September activity:\\n\\n* **[Subscribe to this blog](https://azure.github.io/Cloud-Native/blog/rss.xml)** - get notified early when we publish!\\n* **[Follow Azure on dev.to](https://dev.to/azure)** - look for the #ServerlessSeptember series!\\n* **[Bookmark this site](https://aka.ms/serverless-september?WT.mc_id=academic-75239-sagibbon)** and check back regularly for updates."},{"id":"01-kickoff","metadata":{"permalink":"/Cloud-Native/blog/01-kickoff","source":"@site/blog/2022-09-01/index.md","title":"01. It\'s 30DaysOfServerless!","description":"What We\'ll Cover","date":"2022-09-01T00:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"hello","permalink":"/Cloud-Native/blog/tags/hello"},{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"}],"readingTime":4.24,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Devanshi Joshi","title":"Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://pbs.twimg.com/profile_images/1520928730230652928/00BaK5xn_400x400.jpg","key":"devanshi"}],"frontMatter":{"slug":"01-kickoff","title":"01. It\'s 30DaysOfServerless!","authors":["nitya","devanshi"],"draft":false,"tags":["hello","serverless-september"],"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"]},"prevItem":{"title":"Welcome Students!","permalink":"/Cloud-Native/blog/students"},"nextItem":{"title":"02. Learn Core Concepts","permalink":"/Cloud-Native/blog/02-functions-intro"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/blog/01-kickoff\\" />\\n  <meta name=\\"twitter:title\\" content=\\"#01 - It\'s 30DaysOfServerless!\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join #ServerlessSeptember as we kickoff #30DaysOfServerless with a look at @AzureFunctions and more. Visit https://aka.ms/serverless-september\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/assets/images/post-kickoff-4a04995b44f0cc4a784fb4ab5e29cf7c.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureStaticApps\\" /> \\n</head>\\n\\n\\n## What We\'ll Cover\\n * What is Serverless September? (6 initiatives)\\n * How can I _participate_? (3 actions)\\n * How can I _skill up_ (30 days)\\n * Who is behind this? (Team Contributors)\\n * How can _you_ contribute? (Custom Issues)\\n * **Exercise**: Take the [Cloud Skills Challenge](https://docs.microsoft.com/en-us/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)!\\n * **Resources**: [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection).\\n\\n---\\n\\n![Serverless September](../../static/img/banners/post-kickoff.png)\\n\\n\\nWelcome to `Day 01` of [\ud83c\udf42 #ServerlessSeptember](https://aka.ms/serverless-september)! Today, we kick off a full month of content and activities to skill you up on all things Serverless on Azure with content, events, and community interactions! Read on to learn about what we have planned!\\n\\n---\\n\\n## Explore our initiatives\\n\\nWe have a number of initiatives planned for the month to help you learn and skill up on relevant technologies. Click on the links to visit the relevant pages for each. \\n\\n* [#30DaysOfServerless](/serverless-september/30DaysOfServerless) - 4 themed weeks of daily articles in a structured roadmap\\n* [Zero To Hero](/serverless-september/ZeroToHero) - 4-part series from Product Engineering teams on best practices\\n* [Serverless Hacks](/serverless-september/ServerlessHacks) - build a serverless tollbooth by solving 8 challenges - with help!\\n* [Cloud Skills Challenge](/serverless-september/30DaysOfServerless) - skill up by competing with peers to complete modules\\n* [Ask The Expert](/serverless-september/AskTheExpert/) - join live Q&A sessions with Product Engineering teams\\n* [Community Buzz](https://github.com/Azure/Cloud-Native/issues/new/choose) - participate by submitting questions, or contributing content\\n\\nWe\'ll go into more details about **#30DaysOfServerless** in this post - don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/blog/rss.xml) to the blog to get daily posts delivered directly to your preferred feed reader!\\n\\n---\\n\\n## Register for events!\\n\\nWhat are 3 things you can do today, to jumpstart your learning journey?\\n\\n * **Register** for live Q&A sessions (free, online)\\n    - Sep 15 - [Ask The Expert: Azure Functions](https://reactor.microsoft.com/en-us/reactor/events/17000/)\\n    - Sep 29 - [Ask the Expert: Azure Container Apps](https://reactor.microsoft.com/en-us/reactor/events/17000/)\\n  * **Register** for the [Cloud Skills Challenge](https://docs.microsoft.com/en-us/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi) - 30 days to complete it!\\n * **Register** for the [Serverless Hacks Challenge](https://docs.microsoft.com/en-us/events/learn-events/reactor-serverlessseptember/?wt.mc_id=eventspg_16946_webpage_reactor&WT.mc_id=javascript-74010-ninarasi) office hours (weekly)\\n\\n![Serverless Hacks](../../static/img/banners/serverless-hacks.png)\\n\\n---\\n\\n## #30DaysOfServerless\\n\\n[#30DaysOfServerless](/serverless-september/30DaysOfServerless) is a month-long series of daily blog posts grouped into 4 themed weeks - taking you from core concepts to end-to-end solution examples in 30 days. Each article will be short (5-8 mins reading time) and provide exercises and resources to help you reinforce learnings and take next steps.\\n\\nThis series focuses on the [Serverless On Azure](https://azure.microsoft.com/en-us/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi) learning journey in **four stages**, each building on the previous week to help you skill up in a beginner-friendly way:\\n * **Week 1:** Get started with serverless using [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview?WT.mc_id=javascript-74010-ninarasi) \\n * **Week 2:** Build & deploy microservices with [Azure Container Apps](https://docs.microsoft.com/en-us/azure/container-apps/overview?WT.mc_id=javascript-74010-ninarasi) and [Dapr](https://dapr.io/?WT.mc_id=javascript-74010-ninarasi).\\n * **Week 3:** Streamline integrations using [Azure Logic Apps](https://docs.microsoft.com/en-us/azure/logic-apps/?WT.mc_id=javascript-74010-ninarasi) and [Azure Event Grid](https://docs.microsoft.com/en-us/azure/event-grid/overview?WT.mc_id=javascript-74010-ninarasi)\\n * **Week 4:** Develop End-to-End solutions with [Serverless on Azure](https://azure.microsoft.com/en-us/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi)\\n\\n![](./img/banner.png)\\n\\nWe have a [tentative roadmap](/serverless-september/30DaysOfServerless) for the topics we hope to cover and will keep this updated as we go with links to actual articles as they get published.\\n\\n:::info Week 1: FOCUS ON FUNCTIONS \u26a1\ufe0f\\n\\nHere\'s a sneak peek at what we have planned for week 1. We\'ll start with a broad look at fundamentals, walkthrough examples for each targeted programming language, then wrap with a post that showcases the role of Azure Functions in powering different serverless scenarios.\\n\\n * Sep 02: Learn Core Concepts for Azure Functions\\n * Sep 03: Build and deploy your first Function\\n * Sep 04: Azure Functions - for Java Developers!\\n * Sep 05: Azure Functions - for JavaScript Developers!\\n * Sep 06: Azure Functions - for .NET Developers!\\n * Sep 07: Azure Functions - for Python Developers!\\n * Sep 08: Wrap: Azure Functions + Serverless on Azure\\n\\n:::\\n\\n---\\n\\n## Ways to Participate..\\n\\nWe hope you are as excited as we are, to jumpstart this journey. We want to make this a **useful, beginner-friendly** journey and we need your help!\\n\\nHere are the many ways you can participate:\\n\\n* **[Follow Azure on dev.to](https://dev.to/azure)** - we\'ll republish posts under [this series page](https://dev.to/nitya/series/19576) and welcome comments and feedback there!\\n* **[Discussions on GitHub](https://github.com/Azure/Cloud-Native/discussions)** - Use this if you have feedback for us (on how we can improve these resources), or want to chat with your peers about serverless topics.\\n* **[Custom Issues](https://github.com/Azure/Cloud-Native/issues/new/choose)** - just pick a template, create a new issue by filling in the requested details, and submit. You can use these to:\\n    - submit questions for **AskTheExpert** (live Q&A) ahead of time\\n    - submit your own articles or projects for community to learn from\\n    - share your **ServerlessHack** and get listed in our Hall Of Fame!\\n    - report bugs or share ideas for improvements\\n\\nHere\'s the list of custom issues currently defined.\\n\\n![Community Buzz](./img/community-buzz.png)\\n\\n\\n## Let\'s Get Started!\\n\\nNow you know everything! We hope you are as excited as we are to dive into a full month of active learning and doing! Don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/blog/rss.xml?WT.mc_id=javascript-74010-ninarasi) for updates in your favorite feed reader! **And look out for our first Azure Functions post tomorrow!**\\n\\n\\n---"},{"id":"02-functions-intro","metadata":{"permalink":"/Cloud-Native/blog/02-functions-intro","source":"@site/blog/2022-09-02/index.md","title":"02. Learn Core Concepts","description":"Introduction to Azure Functions, from core concepts to hello world!","date":"2022-09-02T00:00:00.000Z","formattedDate":"September 2, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"}],"readingTime":8.16,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"02-functions-intro","title":"02. Learn Core Concepts","authors":["nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Introduction to Azure Functions, from core concepts to hello world!","tags":["serverless-september","30-days-of-serverless","azure-functions"]},"prevItem":{"title":"01. It\'s 30DaysOfServerless!","permalink":"/Cloud-Native/blog/01-kickoff"},"nextItem":{"title":"03. Build Your First Function","permalink":"/Cloud-Native/blog/03-functions-quickstart"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/functions-1\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/02-functions-intro\\" />\\n</head>\\n\\n---\\n\\nWelcome to Day 2\ufe0f\u20e3 of #30DaysOfServerless!\\n\\nToday, we kickstart our journey into serveless on Azure with a look at _Functions As a Service_. We\'ll explore Azure Functions - from core concepts to usage patterns. \\n\\nReady? Let\'s Go!\\n\\n---\\n\\n## What We\'ll Cover\\n * What is Functions-as-a-Service? (FaaS)\\n * What is Azure Functions?\\n * Triggers, Bindings and Custom Handlers\\n * What is Durable Functions?\\n * Orchestrators, Entity Functions and Application Patterns\\n * **Exercise**: Take the [Cloud Skills Challenge](https://docs.microsoft.com/en-us/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)!\\n * **Resources**: [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection).\\n\\n![](./img/banner.png)\\n\\n---\\n\\n\\n## 1. What is FaaS?\\n\\nFaas stands for [Functions As a Service (FaaS)](https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/compute-decision-tree?WT.mc_id=javascript-74010-ninarasi ). But what does that mean for us as application developers? We know that \\nbuilding and deploying modern applications **at scale** can get _complicated_ and it starts with us needing to take decisions on _Compute_. In other words, we need to answer this question: \\"**where should I host my application given my resource dependencies and scaling requirements?**\\" \\n\\n![this useful flowchart](./img/compute-choices.png )\\n\\nAzure has [this useful flowchart](https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/compute-decision-tree?WT.mc_id=javascript-74010-ninarasi ) (shown below) to guide your decision-making. You\'ll see that hosting options generally fall into three categories:\\n * **Infrastructure as a Service (IaaS)** - where you provision and manage Virtual Machines yourself (cloud provider manages infra).\\n * **Platform as a Service (PaaS)** - where you use a provider-_managed_ hosting environment like Azure Container Apps.\\n * **Functions as a Service (FaaS)** - where you forget about hosting environments and simply _deploy your code_ for the provider to run.\\n\\nHere, \\"serverless\\" compute refers to hosting options where we (as developers) can focus on building apps _without having to manage the infrastructure_. See [serverless compute options on Azure](https://azure.microsoft.com/en-us/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi ) for more information.\\n\\n---\\n\\n## 2. Azure Functions\\n\\n[Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/?WT.mc_id=javascript-74010-ninarasi ) is the Functions-as-a-Service (FaaS) option on Azure. It is the ideal serverless solution if your application is event-driven with short-lived workloads. With Azure Functions, we develop applications as modular blocks of code (`functions`) that are executed on demand, in response to configured events (`triggers`). This approach brings us two advantages:\\n * _It saves us money._ We only pay for the time the function runs.\\n * _It scales with demand._ We have 3 hosting plans for flexible scaling behaviors.\\n\\nAzure Functions can be programmed in many popular languages (C#, F#, Java, JavaScript, TypeScript, PowerShell or Python), with Azure providing [language-specific](https://docs.microsoft.com/en-us/azure/azure-functions/supported-languages?WT.mc_id=javascript-74010-ninarasi ) handlers and default [runtimes](https://docs.microsoft.com/en-us/azure/azure-functions/supported-languages#languages-by-runtime-version?WT.mc_id=javascript-74010-ninarasi ) to execute them.\\n\\n:::tip Concept: Custom Handlers\\n\\n* What if we wanted to program in a non-supported language? \\n* Or we wanted to use a different runtime for a supported language? \\n:::\\n\\n**[Custom Handlers](https://docs.microsoft.com/en-us/azure/azure-functions/functions-custom-handlers?WT.mc_id=javascript-74010-ninarasi )** have you covered! These are lightweight webservers that can receive and process input events from the Functions host - and return responses that can be delivered to any output targets. By this definition, custom handlers can be implemented by _any language that supports receiving HTTP events_. Check out [the quickstart for writing a custom handler](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-other?tabs=go%2Cmacos&WT.mc_id=javascript-74010-ninarasi ) in Rust or Go.\\n\\n![Custom Handlers](./img/azure-functions-custom-handlers-overview.png)\\n\\n\\n:::tip Concept: Trigger and Bindings\\n\\nWe talked about what functions are (code blocks). But when are they invoked or executed? And how do we provide inputs (arguments) and retrieve outputs (results) from this execution?\\n:::\\n\\nThis is where **triggers** and **bindings** come in.\\n\\n * `Triggers` define how a function is invoked and what associated data it will provide. _A function must have exactly one trigger_.\\n * `Bindings` _declaratively_ define how a resource is connected to the function. The resource or binding can be of type input, output, or both. _Bindings are optional. A Function can have multiple input, output bindings_.\\n\\nAzure Functions comes with a number of [supported bindings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp#supported-bindings&WT.mc_id=javascript-74010-ninarasi) that can be used to integrate relevant services to power a specific scenario. For instance:\\n * [HTTP Triggers](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook?tabs=in-process%2Cfunctionsv2&pivots=programming-language-javascript&WT.mc_id=javascript-74010-ninarasi) - invokes the function in response to an `HTTP request`. Use this to implement serverless APIs for your application.\\n * [Event Grid Triggers](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-grid?tabs=in-process%2Cextensionv3&pivots=programming-language-javascript&WT.mc_id=javascript-74010-ninarasi) invokes the function on receiving events from an Event Grid. Use this to process events reactively, and potentially publish responses back to custom Event Grid topics.\\n * [SignalR Service Trigger](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-signalr-service-trigger?tabs=in-process&pivots=programming-language-javascript&WT.mc_id=javascript-74010-ninarasi) invokes the function in response to messages from Azure SignalR, allowing your application to take actions with _real-time contexts_.\\n\\nTriggers and bindings help you abstract your function\'s interfaces to other components it interacts with, eliminating hardcoded integrations. They are [configured differently based on the programming language](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp#trigger-and-binding-definitions&WT.mc_id=javascript-74010-ninarasi ) you use. For example - JavaScript functions are configured in the [functions.json](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob#function-code?WT.mc_id=javascript-74010-ninarasi ) file. Here\'s an example of what that looks like.\\n\\n\\n```js\\n{\\n    \\"disabled\\":false,\\n    \\"bindings\\":[\\n        // ... bindings here\\n        {\\n            \\"type\\": \\"bindingType\\",\\n            \\"direction\\": \\"in\\",\\n            \\"name\\": \\"myParamName\\",\\n            // ... more depending on binding\\n        }\\n    ]\\n}\\n```\\n\\nThe key thing to remember is that triggers and bindings have a `direction` property - triggers are always `in`, input bindings are `in` and output bindings are `out`. Some bindings can support a special `inout` direction. \\n\\nThe documentation has [code examples](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=javascript#supported-bindings&WT.mc_id=javascript-74010-ninarasi ) for bindings to popular Azure services. Here\'s an example of the bindings and trigger configuration for a [BlobStorage](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-blob-input?tabs=in-process%2Cextensionv5&pivots=programming-language-javascript#example&WT.mc_id=javascript-74010-ninarasi ) use case.\\n\\n```js\\n// function.json configuration\\n\\n{\\n  \\"bindings\\": [\\n    {\\n      \\"queueName\\": \\"myqueue-items\\",\\n      \\"connection\\": \\"MyStorageConnectionAppSetting\\",\\n      \\"name\\": \\"myQueueItem\\",\\n      \\"type\\": \\"queueTrigger\\",\\n      \\"direction\\": \\"in\\"\\n    },\\n    {\\n      \\"name\\": \\"myInputBlob\\",\\n      \\"type\\": \\"blob\\",\\n      \\"path\\": \\"samples-workitems/{queueTrigger}\\",\\n      \\"connection\\": \\"MyStorageConnectionAppSetting\\",\\n      \\"direction\\": \\"in\\"\\n    },\\n    {\\n      \\"name\\": \\"myOutputBlob\\",\\n      \\"type\\": \\"blob\\",\\n      \\"path\\": \\"samples-workitems/{queueTrigger}-Copy\\",\\n      \\"connection\\": \\"MyStorageConnectionAppSetting\\",\\n      \\"direction\\": \\"out\\"\\n    }\\n  ],\\n  \\"disabled\\": false\\n}\\n```\\nThe code below shows the function implementation. In this scenario, the function is triggered by a _queue message_ carrying an _input payload_ with a blob name. In response, it copies that data to the resource associated with the _output binding_.\\n\\n```js\\n// function implementation\\n\\nmodule.exports = async function(context) {\\n    context.log(\'Node.js Queue trigger function processed\', context.bindings.myQueueItem);\\n    context.bindings.myOutputBlob = context.bindings.myInputBlob;\\n};\\n```\\n\\n\\n:::tip Concept: Custom Bindings\\n\\nWhat if we have a more complex scenario that requires bindings for non-supported resources? \\n:::\\n\\nThere is an option create custom bindings if necessary. We don\'t have time to dive into details here but definitely check out the [documentation](https://github.com/Azure/azure-webjobs-sdk/wiki/Creating-custom-input-and-output-bindings)\\n\\n---\\n\\n## 3. Durable Functions\\n\\nThis sounds great, right?. But now, let\'s talk about one challenge for Azure Functions. In the use cases so far, the functions are _stateless_ - they take inputs at runtime if necessary, and return output results if required. But they are otherwise self-contained, which is great for scalability!\\n\\nBut what if I needed to build more complex _workflows_ that need to store and transfer state, and complete operations in a reliable manner? [Durable Functions](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp&WT.mc_id=javascript-74010-ninarasi ) are an extension of Azure Functions that makes _stateful workflows_ possible.\\n\\n:::tip Concept: Orchestrator Functions\\n\\nHow can I create workflows that coordinate functions?\\n:::\\n\\nDurable Functions use [orchestrator functions](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-orchestrations?tabs=csharp&WT.mc_id=javascript-74010-ninarasi ) to coordinate execution of other Durable functions within a given Functions app. These functions are _durable and reliable_. Later in this post, we\'ll talk briefly about some application patterns that showcase popular orchestration scenarios.\\n\\n:::tip Concept:  Entity Functions\\nHow do I persist and manage state across workflows?\\n:::\\n\\nEntity Functions provide explicit _state mangement_ for Durable Functions, defining operations to read and write state to _durable entities_. They are associated with a special _entity trigger_ for invocation. These are currently available only for a subset of programming languages so check to see if they are supported for your programming language of choice.\\n\\n:::tip USAGE: Application Patterns\\n:::\\n\\nDurable Functions are a fascinating topic that would require a separate, longer post, to do justice. For now, \\nlet\'s look at some [application patterns](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-entities?tabs=csharp&WT.mc_id=javascript-74010-ninarasi ) that showcase the value of these starting with the simplest one - [Function Chaining](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp#chaining&WT.mc_id=javascript-74010-ninarasi ) as shown below:\\n\\n![Function Chaining](./img/function-chaining.png )\\n\\n Here, we want to execute a sequence of named functions _in a specific order_. As shown in the snippet below, the orchestrator function coordinates invocations on the given functions in the desired sequence - \\"chaining\\" inputs and outputs to establish the workflow. Take note of the `yield` keyword. This triggers a checkpoint, preserving the current state of the function for reliable operation.\\n\\n\\n```\\nconst df = require(\\"durable-functions\\");\\n\\nmodule.exports = df.orchestrator(function*(context) {\\n    try {\\n        const x = yield context.df.callActivity(\\"F1\\");\\n        const y = yield context.df.callActivity(\\"F2\\", x);\\n        const z = yield context.df.callActivity(\\"F3\\", y);\\n        return    yield context.df.callActivity(\\"F4\\", z);\\n    } catch (error) {\\n        // Error handling or compensation goes here.\\n    }\\n});\\n```\\n\\nOther application patterns for durable functions include:\\n * [Fan-out/fan-in](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#fan-in-out&WT.mc_id=javascript-74010-ninarasi )\\n * [Async HTTP APIs](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#async-http&WT.mc_id=javascript-74010-ninarasi )\\n * [Monitoring](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#monitoring&WT.mc_id=javascript-74010-ninarasi )\\n * [Human Interaction](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#human&WT.mc_id=javascript-74010-ninarasi )\\n * [Aggregator (stateful entities)](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#aggregator&WT.mc_id=javascript-74010-ninarasi )\\n\\nThere\'s a lot more to explore but we won\'t have time to do that today. Definitely [check the documentation](https://docs.microsoft.com/en-us/azure/azure-functions/durable/?WT.mc_id=javascript-74010-ninarasi ) and take a minute to read the [comparison with Azure Logic Apps](https://docs.microsoft.com/en-us/azure/azure-functions/functions-compare-logic-apps-ms-flow-webjobs#compare-azure-functions-and-azure-logic-apps?WT.mc_id=javascript-74010-ninarasi ) to understand what each technology provides for serverless workflow automation.\\n\\n---\\n\\n## 4. Exercise\\n\\nThat was a lot of information to absorb! Thankfully, there are a lot of examples in the documentation that can help put these in context. Here are a couple of exercises you can do, to reinforce your understanding of these concepts.\\n\\n* Explore the [supported bindings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp#supported-bindings&WT.mc_id=javascript-74010-ninarasi ) for Azure Functions.\\n* Look at [code examples](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=javascript#bindings-code-examples&WT.mc_id=javascript-74010-ninarasi ), think of usage scenarios.\\n\\n---\\n\\n## 5. What\'s Next?\\n\\nThe goal for today was to give you a quick tour of key terminology and concepts related to Azure Functions. Tomorrow, we dive into _the developer experience_, starting with core tools for local development and ending by deploying our first Functions app.\\n\\nWant to do some prep work? Here are a few useful links:\\n- [Azure Functions Quickstart](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node?WT.mc_id=javascript-74010-ninarasi )\\n- [Durable Functions Quickstart](https://docs.microsoft.com/en-us/azure/azure-functions/durable/quickstart-js-vscode)\\n- [Azure Functions VS Code Extension](https://docs.microsoft.com/en-us/azure/azure-functions/functions-develop-vs-code?tabs=csharp&WT.mc_id=javascript-74010-ninarasi )\\n- [Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=javascript#bindings-code-examples&WT.mc_id=javascript-74010-ninarasi )\\n\\n\\n---\\n\\n## 6. Resources\\n* Developer Guide: [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob)\\n* Azure Functions: [Tutorials](https://docs.microsoft.com/en-us/azure/azure-functions/functions-twitter-email) and [Samples](https://docs.microsoft.com/en-us/samples/browse/?products=azure-functions&languages=javascript)\\n* Durable Functions: [Tutorials](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-sequence?tabs=javascript) and [Samples](https://docs.microsoft.com/en-us/samples/browse/?products=azure-functions&term=durable&terms=durable&languages=javascript) \\n* Self-Paced Learning: [MS Learn Modules](https://docs.microsoft.com/en-us/learn/browse/?products=azure-functions&filter-products=Functions)\\n* Video Playlists: [Azure Functions on YouTube ](https://www.youtube.com/c/AzureFunctions)\\n\\n---"},{"id":"03-functions-quickstart","metadata":{"permalink":"/Cloud-Native/blog/03-functions-quickstart","source":"@site/blog/2022-09-03/index.md","title":"03. Build Your First Function","description":"Let\'s build our first Azure Functions app - and get familiar with the relevant developer tools and resources!","date":"2022-09-03T00:00:00.000Z","formattedDate":"September 3, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"vscode","permalink":"/Cloud-Native/blog/tags/vscode"},{"label":"devtools","permalink":"/Cloud-Native/blog/tags/devtools"}],"readingTime":8.155,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"03-functions-quickstart","title":"03. Build Your First Function","authors":["nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Let\'s build our first Azure Functions app - and get familiar with the relevant developer tools and resources!","tags":["serverless-september","30-days-of-serverless","azure-functions","vscode","devtools"]},"prevItem":{"title":"02. Learn Core Concepts","permalink":"/Cloud-Native/blog/02-functions-intro"},"nextItem":{"title":"04. Functions For Java Devs","permalink":"/Cloud-Native/blog/04-functions-java"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/03-functions-quickstart\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Build Your First Function\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Build Your First Function\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/03-functions-quickstart\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 3` of #30DaysOfServerless!\\n\\n_Yesterday_ we learned core concepts and terminology for Azure Functions, the signature _Functions-as-a-Service_ option on Azure. _Today_ we take our first steps into building and deploying an Azure Functions app, and validate local development setup.\\n\\nReady? Let\'s go.\\n\\n---\\n\\n## What We\'ll Cover\\n\\n * Review the [Azure Functions Developer Guide](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob&WT.mc_id=javascript-74010-ninarasi)\\n * Build your first Function App [with VS Code](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node?WT.mc_id=javascript-74010-ninarasi)\\n * Develop locally [using Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2)\\n * Review [Local Testing & Development](https://docs.microsoft.com/en-us/azure/azure-functions/functions-develop-local?WT.mc_id=javascript-74010-ninarasi) guidelines\\n * Check out the [Durable Functions Quickstart](https://docs.microsoft.com/en-us/azure/azure-functions/durable/quickstart-js-vscode?WT.mc_id=javascript-74010-ninarasi)\\n * **Exercise**: Take the [Cloud Skills Challenge](https://docs.microsoft.com/en-us/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)!\\n * **Resources**: [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection).\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## Developer Guidance\\n\\nBefore we jump into development, let\'s familiarize ourselves with language-specific guidance from the Azure Functions Developer Guide. We\'ll review the [JavaScript version](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob&WT.mc_id=javascript-74010-ninarasi) but guides for F#, Java, Python, C# and PowerShell are also available.\\n\\n 1. A **function** is defined by two things: _code_ (written in a supported programming language) and _configuration_ (specified in a `functions.json` file, declaring the triggers, bindings and other context for execution).\\n\\n 2. A **function app** is the _unit of deployment_ for your functions, and is associated with a single execution context or runtime. It can contain multiple functions, but they _must_ be in the same language. \\n\\n 3. A **host configuration** is _runtime-specific configuration_ that affects all functions running in a given function app instance. It is defined in a `host.json` file.\\n\\n 4. A recommended **folder structure** is defined for the function app, but may vary based on the programming language used. Check [the documentation on folder structures](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob#folder-structure&WT.mc_id=javascript-74010-ninarasi) to learn the default for _your_ preferred language.\\n\\nHere\'s an [example of the JavaScript folder structure](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-node?WT.mc_id=javascript-74010-ninarasi) for a function app containing two functions with some shared dependencies. Note that `host.json` (runtime configuration) is defined once, in the root directory. And `function.json` is defined separately for each function.\\n\\n```\\nFunctionsProject\\n | - MyFirstFunction\\n | | - index.js\\n | | - function.json\\n | - MySecondFunction\\n | | - index.js\\n | | - function.json\\n | - SharedCode\\n | | - myFirstHelperFunction.js\\n | | - mySecondHelperFunction.js\\n | - node_modules\\n | - host.json\\n | - package.json\\n | - local.settings.json\\n```\\n\\nWe\'ll dive into what the contents of these files look like, when we build and deploy the first function. We\'ll cover `local.settings.json` in the _About Local Testing_ section at the end.\\n\\n---\\n\\n## My First Function App\\n\\nThe documentation provides **quickstart** options for all supported languages. We\'ll walk through the _JavaScript_ versions in this article. You have two options for development: \\n  * using [Visual Studio Code](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node) for an IDE-driven experience\\n  * using [Azure CLI](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-node?tabs=azure-cli%2Cbrowser) for a commandline-driven experience.\\n\\nI\'m a huge fan of VS Code - so I\'ll be working through that tutorial today. \\n\\n:::info PRE-REQUISITES\\n\\n * Have an Azure account (with active subscription) | **[Create one for free](https://azure.microsoft.com/free/?ref=microsoft.com&utm_source=microsoft.com&utm_medium=docs&utm_campaign=visualstudio)**\\n * Install Azure Functions Core Tools | **[Verify it\'s version 4.x](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local#v2)**\\n * Install Azure Functions VS Code Extension | **[Currently v 1.7.4](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions)**\\n * Install Node.js v16 or v18 (preview) | **[Manage versions with NVM](https://github.com/nvm-sh/nvm)**\\n\\nDon\'t forget to validate your setup by checking the versions of installed software.\\n:::\\n\\n### Install VSCode Extension\\nInstalling the Visual Studio Code extension should automatically open this page in your IDE with similar quickstart instructions, but potentially more recent screenshots.\\n\\n![Visual Studio Code Extension for VS Code](./img/vscode.png)\\n\\n Note that it may make sense to install the [Azure tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) extensions pack if you plan on working through the many projects in Serverless September. This includes the Azure Functions extension by default.\\n\\n### Create First Function App\\n\\nWalk through the [Create local [project]](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node#create-an-azure-functions-project) steps of the quickstart. The process is quick and painless and scaffolds out this folder structure and files. Note the existence (and locations) of `functions.json` and `host.json` files.\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-6.png)\\n\\n### Explore the Code\\n\\n**Check out the `functions.json` configuration file.** It shows that the function is activated by an `httpTrigger` with an input binding (tied to `req` payload) and an output binding (tied to `res` payload). And it supports both GET and POST requests on the exposed URL.\\n\\n```json\\n{\\n  \\"bindings\\": [\\n    {\\n      \\"authLevel\\": \\"anonymous\\",\\n      \\"type\\": \\"httpTrigger\\",\\n      \\"direction\\": \\"in\\",\\n      \\"name\\": \\"req\\",\\n      \\"methods\\": [\\n        \\"get\\",\\n        \\"post\\"\\n      ]\\n    },\\n    {\\n      \\"type\\": \\"http\\",\\n      \\"direction\\": \\"out\\",\\n      \\"name\\": \\"res\\"\\n    }\\n  ]\\n}\\n```\\n\\n**Check out `index.js` - the function implementation**. We see it logs a message to the console when invoked. It then extracts a `name` value from the input payload (req) and crafts a different `responseMessage` based on the presence/absence of a valid name. It returns this response in the output payload (res).\\n\\n```js\\nmodule.exports = async function (context, req) {\\n    context.log(\'JavaScript HTTP trigger function processed a request.\');\\n\\n    const name = (req.query.name || (req.body && req.body.name));\\n    const responseMessage = name\\n        ? \\"Hello, \\" + name + \\". This HTTP triggered function executed successfully.\\"\\n        : \\"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\\";\\n\\n    context.res = {\\n        // status: 200, /* Defaults to 200 */\\n        body: responseMessage\\n    };\\n}\\n```\\n\\n### Preview Function App Locally\\n\\nYou can now run this function app locally using [Azure Functions Core Tools](https://docs.microsoft.com/azure/azure-functions/functions-run-local). VS Code integrates seamlessly with this CLI-based tool, making it possible for you to exploit all its capabilities without leaving the IDE. In fact, the workflow will even prompt you to _install_ those tools if they didn\'t already exist in your local dev environment.\\n\\nNow run the function app locally by clicking on the \\"Run and Debug\\" icon in the activity bar (highlighted, left) and pressing the \\"\u25b6\ufe0f\\" (`Attach to Node Functions`) to start execution. On success, your console output should show something like this. \\n\\n ![Final screenshot for VS Code workflow](./img/vscode-7.png)\\n\\nYou can test the function locally by visiting the Function Url shown (`http://localhost:7071/api/HttpTrigger1`) or by opening the _Workspace_ region of the Azure extension, and selecting the `Execute Function now` menu item as shown.\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-8.png)\\n\\nIn the latter case, the `Enter request body` popup will show a pre-populated request of `{\\"name\\":\\"Azure\\"}` that you can submit. \\n\\n ![Final screenshot for VS Code workflow](./img/vscode-9.png)\\n \\n On successful execution, your VS Code window will show a notification as follows. Take note of the console output - it shows the message encoded in `index.js`.\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-10.png)\\n\\nYou can also visit the deployed function URL directly in a local browser - testing the case for a request made with no `name` payload attached. Note how the response in the browser now shows the non-personalized version of the message!\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-11.png)\\n\\n\\n:::success \ud83c\udf89 **Congratulations**\\nYou created and ran a function app locally!\\n:::\\n\\n### (Re)Deploy to Azure\\n\\nNow, just follow the [creating a function app in Azure](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node#publish-the-project-to-azure) steps to deploy it to Azure, using an active subscription! The deployed app resource should now show up under the `Function App` Resources where you can click `Execute Function Now` to test the Azure-deployed version instead. You can also look up the function URL in the portal and visit that link in your local browser to trigger the function without the name context.\\n\\n\\n:::success \ud83c\udf89 **Congratulations**\\nYou have an Azure-hosted serverless function app!\\n:::\\n\\n\\nChallenge yourself and try to [change the code and redeploy](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node#run-the-function-in-azure) to Azure to return something different. _You have effectively created a serverless API endpoint!_ \\n\\n---\\n\\n## About Core Tools\\n\\nThat was a lot to cover! In the next few days we\'ll have more examples for Azure Functions app development - focused on different programming languages. So let\'s wrap today\'s post by reviewing two helpful resources.\\n\\nFirst, let\'s talk about [Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2) - the command-line tool that lets you develop, manage, and deploy, Azure Functions projects from your **local development environment**. It is used transparently by the VS Code extension - but you can use it directly from a terminal for a powerful command-line end-to-end developer experience! The Core Tools commands are organized into the following contexts:\\n \\n  * [`func`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-init) - commands to create and run functions locally\\n  * [`func azure`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-azure-functionapp-fetch-app-settings) - work with resource slike Azure Functions and Azure Storage\\n  * [`func durable`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-durable-delete-task-hub) - work with Durable Functions\\n  * [`func extensions`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-extensions-install) - manage extensions (default nuget.org)\\n  * [`func kubernetes`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-kubernetes-deploy) - work with Kubernetes and Azure Functions\\n  * [`func settings`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-settings-decrypt) - manage environment settings for local Functions host\\n  * [`func templates`](https://docs.microsoft.com/en-us/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-templates-list) - list available templates\\n\\nLearn how to [work with Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cmacos%2Ccsharp%2Cportal%2Cbash). Not only can it help with quick command execution, it can also be invaluable for debugging issues that may not always be visible or understandable in an IDE.\\n\\n## About Local Testing\\n\\nYou might have noticed that the scaffold also produced a `local.settings.json` file. What is that and why is it useful? By definition, the local.settings.json file _\\"stores app settings and settings used by local development tools. Settings in the local.settings.json file are used only when you\'re running your project locally.\\"_\\n\\nRead the guidance on [Code and test Azure Functions Locally](https://docs.microsoft.com/en-us/azure/azure-functions/functions-develop-local?WT.mc_id=javascript-74010-ninarasi#local-settings-file) to learn more about how to configure development environments locally, for your preferred programming language, to support testing and debugging on the local Functions runtime.\\n\\n## Exercise\\nWe made it! Now it\'s your turn!! Here are a few things you can try to apply what you learned and reinforce your understanding:\\n * Walk through this quickstart on your own!\\n * Then try the [Durable Functions Quickstart](https://docs.microsoft.com/en-us/azure/azure-functions/durable/quickstart-js-vscode?WT.mc_id=javascript-74010-ninarasi) as a stretch goal!\\n * And take the [Cloud Skills Challenge](https://docs.microsoft.com/en-us/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi) to skill up in fun ways\\n\\n## Resources\\n\\nBookmark and visit the [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection). It\'s the one-stop collection of resources we will keep updated with links to relevant documentation and learning resources."},{"id":"04-functions-java","metadata":{"permalink":"/Cloud-Native/blog/04-functions-java","source":"@site/blog/2022-09-04/index.md","title":"04. Functions For Java Devs","description":"Introducing Azure Functions to the Java Developer. Learn how to create and deploy your first Java Functions app, and where you can go from here.","date":"2022-09-04T00:00:00.000Z","formattedDate":"September 4, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"java","permalink":"/Cloud-Native/blog/tags/java"},{"label":"serverless","permalink":"/Cloud-Native/blog/tags/serverless"}],"readingTime":7.465,"hasTruncateMarker":false,"authors":[{"name":"Rory Preddy","title":"Principal Cloud Advocate @Microsoft","url":"https://github.com/roryp","imageURL":"https://github.com/roryp.png","key":"rory"}],"frontMatter":{"slug":"04-functions-java","title":"04. Functions For Java Devs","authors":["rory"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Introducing Azure Functions to the Java Developer. Learn how to create and deploy your first Java Functions app, and where you can go from here.","tags":["serverless-september","azure-functions","java","serverless"]},"prevItem":{"title":"03. Build Your First Function","permalink":"/Cloud-Native/blog/03-functions-quickstart"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/04-functions-java\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Azure Functions: For The Java Developer\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions For The Java Developer\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/assets/images/post-kickoff-4a04995b44f0cc4a784fb4ab5e29cf7c.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/04-functions-java\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 4` of #30DaysOfServerless!\\n\\n_Yesterday_ we walked through an Azure Functions Quickstart with JavaScript, and used it to understand the general Functions App structure, tooling and developer experience. \\n\\n_Today_ we\'ll look at developing Functions app with a _different_ programming language - namely, **Java** - and explore developer guidance, tools and resources to build serverless Java solutions on Azure.\\n\\n---\\n\\n## What We\'ll Cover\\n * **Developer Guidance**: For Azure Functions on Java\\n * **Build & Deploy**: Our First Java Functions App\\n * **Usage Tutorials**: Integrate App with other Azure Services\\n * **Azure Samples**: Explore samples for other triggers, bindings\\n * **Exercise:** [Develop Java serverless Functions on Azure using Maven](https://docs.microsoft.com/learn/modules/develop-azure-functions-app-with-maven-plugin/) \\n * **Resources**: Check out [Java at Microsoft](https://developer.microsoft.com/en-us/java/) and use [Java Your Way](https://aka.ms/JavaYourWay)!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## Developer Guidance\\n\\nIf you\'re a Java developer new to serverless on Azure, start by exploring the [Azure Functions Java Developer Guide](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption). It covers: \\n * Quickstarts with [Visual Studio Code](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-java) and [Azure CLI](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-java?tabs=bash%2Cazure-cli%2Cbrowser)\\n * Building with Maven-based tooling for [Gradle](https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-java-gradle), [Eclipse](https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-maven-eclipse) & [IntelliJ IDEA](https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-maven-intellij)\\n * Exploring [project scaffolding](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption#project-scaffolding) & [JDK runtimes](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption#jdk-runtime-availability-and-support) (Java 8 and Java 11)\\n * Using [Java annotations for Triggers, Bindings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption#triggers-and-annotations) - with [reference](https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.functions.annotation?view=azure-java-stable) docs.\\n * Adopting [best practices](https://docs.microsoft.com/en-us/azure/azure-functions/functions-best-practices?tabs=java) for hosting, reliability and efficiency.\\n * Java [code samples](https://docs.microsoft.com/en-us/samples/azure-samples/azure-functions-samples-java/azure-functions-java/) and [integration tutorials](https://docs.microsoft.com/en-us/azure/azure-functions/functions-event-hub-cosmos-db?tabs=bash)\\n\\nIn this blog post, we\'ll dive into one quickstart, and discuss other resources briefly, for awareness! Do check out the recommended exercises and resources for self-study! \\n\\n---\\n\\n## My First Java Functions App\\n\\nIn today\'s post, we\'ll walk through the [Quickstart: Azure Functions](https://docs.microsoft.com/en-gb/azure/azure-functions/create-first-function-vs-code-java) tutorial using Visual Studio Code. In the process, we\'ll setup our development environment with the relevant command-line tools and VS Code extensions to make building Functions app simpler.\\n\\n_Note: Completing this exercise may incur a a cost of a few USD cents based on your Azure subscription. Explore [pricing details](https://azure.microsoft.com/en-us/pricing/details/functions/#pricing) to learn more_.\\n\\nFirst, make sure you have your development environment setup and configured.\\n\\n:::info PRE-REQUISITES\\n\\n 1. **An Azure account with an active subscription** - [Create an account for free](https://azure.microsoft.com/free/?ref=microsoft.com&utm_source=microsoft.com&utm_medium=docs&utm_campaign=visualstudio)\\n 2. **The Java Development Kit, version 11 or 8.** - [Install](https://docs.microsoft.com/azure/developer/java/fundamentals/java-support-on-azure)\\n 3. **Apache Maven, version 3.0 or above.** - [Install](https://maven.apache.org/)\\n 4. **Visual Studio Code.** - [Install](https://code.visualstudio.com/)\\n 5. **The Java extension pack** - [Install](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack)\\n 6. **The Azure Functions extension for Visual Studio Code** - [Install](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions)\\n:::\\n\\n\\n### VS Code Setup\\n\\n:::note NEW TO VISUAL STUDIO CODE?\\nStart with the [Java in Visual Studio Code](https://code.visualstudio.com/docs/languages/java) tutorial to jumpstart your learning!\\n:::\\n\\nInstall the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) (shown below) to install 6 popular extensions to help development workflow from creation to testing, debugging, and deployment.\\n\\n![Extension Pack for Java](./img/java-extensions.png)\\n\\nNow, it\'s time to get started on our first Java-based Functions app.\\n\\n\\n\\n### 1. Create App\\n\\n1. Open a command-line terminal and create a folder for your project. Use the `code` command to launch Visual Studio Code from that directory as shown:\\n\\n    ```bash\\n    $ mkdir java-function-resource-group-api\\n    $ cd java-function-resource-group-api\\n    $ code .\\n    ```\\n\\n2. Open the Visual Studio Command Palette (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>p</kbd>) and select `Azure Functions: create new project` to kickstart the create workflow. Alternatively, you can click the Azure icon (on activity sidebar), to get the `Workspace` window,  click \\"+\\" and pick the \\"Create Function\\" option as shown below.\\n\\n    ![Screenshot of creating function in Azure from Visual Studio Code.](./img/32-create-new-project.png)\\n\\n3. This triggers a multi-step workflow. Fill in the information for each step as shown in the following prompts. **Important:** Start this process from an empty folder - the workflow will populate it with the scaffold for your Java-based Functions app.\\n\\n    |Prompt|Value|\\n    |--|--|\\n    |**Choose the directory location.**|You should either create a new folder or choose an empty folder for the project workspace. Don\'t choose a project folder that is already part of a workspace.|\\n    |**Select a language**| Choose `Java`.|\\n    |**Select a version of Java**| Choose `Java 11` or `Java 8`, the Java version on which your functions run in Azure. Choose a Java version that you\'ve verified locally. |\\n    | **Provide a group ID** | Choose `com.function`. |\\n    | **Provide an artifact ID** | Enter `myFunction`. |\\n    | **Provide a version** | Choose `1.0-SNAPSHOT`. |\\n    | **Provide a package name** | Choose `com.function`. |\\n    | **Provide an app name** | Enter `HttpExample`. |\\n    | **Select the build tool for Java project** | Choose `Maven`. |\\n\\n\\nVisual Studio Code uses the provided information and generates an Azure Functions project. You can view the local project files in the Explorer - it should look like this:\\n\\n![Azure Functions Scaffold For Java](./img/java-scaffold.png)\\n\\n### 2. Preview App\\n\\n\\nVisual Studio Code integrates with the Azure Functions Core tools to let you run this project on your local development computer before you publish to Azure.\\n\\n1. To build and run the application, use the following Maven command. You should see output similar to that shown below.\\n\\n  ```bash\\n  $ mvn clean package azure-functions:run\\n  ..\\n  ..\\n  Now listening on: http://0.0.0.0:7071\\n  Application started. Press Ctrl+C to shut down.\\n\\n  Http Functions:\\n\\n    HttpExample: [GET,POST] http://localhost:7071/api/HttpExample\\n  ...\\n  ```\\n\\n2. Copy the URL of your HttpExample function from this output to a browser and append the query string **?name=<YOUR_NAME>**, making the full URL something like `http://localhost:7071/api/HttpExample?name=Functions`. The browser should display a message that echoes back your query string value. The terminal in which you started your project also shows log output as you make requests.\\n\\n:::success \ud83c\udf89 CONGRATULATIONS\\nYou created and ran a function app locally!\\n:::\\n\\nWith the **Terminal** panel focused, press <kbd>Ctrl + C</kbd> to stop Core Tools and disconnect the debugger. After you\'ve verified that the function runs correctly on your local computer, it\'s time to use Visual Studio Code and Maven to publish and test the project on Azure.\\n\\n### 3. Sign into Azure\\n\\nBefore you can deploy, sign in to your Azure subscription.\\n\\n```bash\\naz login\\n```\\n\\nThe az login command signs you into your Azure account.\\n\\nUse the following command to deploy your project to a new function app.\\n\\n```bash\\nmvn clean package azure-functions:deploy\\n```\\n\\nWhen the creation is complete, the following Azure resources are created in your subscription:\\n\\n* Resource group. Named as java-functions-group.\\n* Storage account. Required by Functions. The name is generated randomly based on Storage account name requirements.\\n* Hosting plan. Serverless hosting for your function app.The name is *java-functions-app-service-plan*.\\n* Function app. A function app is the deployment and execution unit for your functions. The name is randomly generated based on your artifactId, appended with a randomly generated number.\\n\\n\\n### 4. Deploy App\\n\\n1. Back in the **Resources** area in the side bar, expand your subscription, your new function app, and **Functions**. Right-click (Windows) or <kbd>Ctrl -</kbd> click (macOS) the `HttpExample` function and choose **Execute Function Now...**.\\n\\n    ![Screenshot of executing function in Azure from Visual Studio Code.](./img/32-execute-function-now.png)\\n\\n2. In **Enter request body** you see the request message body value of `{ \\"name\\": \\"Azure\\" }`. Press Enter to send this request message to your function.\\n\\n3. When the function executes in Azure and returns a response, a notification is raised in Visual Studio Code.\\n\\nYou can also copy the complete Invoke URL shown in the output of the publish command into a browser address bar, appending the query parameter ?name=Functions. The browser should display similar output as when you ran the function locally.\\n\\n:::success \ud83c\udf89 CONGRATULATIONS\\nYou deployed your function app to Azure, and invoked it!\\n:::\\n\\n\\n### 5. Clean up\\n\\nUse the following command to delete the resource group and all its contained resources to avoid incurring further costs.\\n\\n```bash\\naz group delete --name java-functions-group\\n```\\n\\n## Next Steps\\n\\nSo, where can you go from here? The example above used a familiar `HTTP Trigger` scenario with a single Azure service (Azure Functions). Now, think about how you can build richer workflows by using other triggers and integrating with other Azure or third-party services.\\n\\n### Other Triggers, Bindings\\n\\nCheck out [Azure Functions Samples In Java](https://docs.microsoft.com/en-us/samples/azure-samples/azure-functions-samples-java/azure-functions-java/) for samples (and short use cases) that highlight other triggers - with code! This includes triggers to integrate with CosmosDB, Blob Storage, Event Grid, Event Hub, Kafka and more.\\n\\n### Scenario with Integrations\\n\\nOnce you\'ve tried out the samples, try building an end-to-end scenario by using these triggers to integrate seamlessly with other Services. Here are a couple of useful tutorials:\\n * Azure Functions with [Event Hub trigger and CosmosDB output binding](https://docs.microsoft.com/en-us/azure/azure-functions/functions-event-hub-cosmos-db?tabs=bash)\\n * GitHub Star Count app with [SignalR trigger](https://docs.microsoft.com/en-us/azure/azure-signalr/signalr-quickstart-azure-functions-java?toc=%2Fazure%2Fazure-functions%2Ftoc.json)\\n\\n\\n## Exercise\\n\\nTime to put this into action and validate your development workflow:\\n * Walk through this tutorial yourself, and deploy your first function!\\n * Complete the [Develop Java serverless Functions on Azure using Maven](https://docs.microsoft.com/learn/modules/develop-azure-functions-app-with-maven-plugin/) module\\n\\n## Resources\\n * [Azure Functions: Java Quickstarts](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-java)\\n * [Best Practices for Java Apps On Azure](https://docs.microsoft.com/en-us/learn/paths/best-practices-java-azure/)\\n * [Java at Microsoft](https://developer.microsoft.com/en-us/java/) \\n * [Java with EventHub Trigger and CosmosDB Binding](https://docs.microsoft.com/en-us/azure/azure-functions/functions-event-hub-cosmos-db?tabs=bash)\\n * [Java Integrations: Azure Functions and SignalR](https://docs.microsoft.com/en-us/azure/azure-signalr/signalr-quickstart-azure-functions-java?toc=%2Fazure%2Fazure-functions%2Ftoc.json)\\n * [Java Samples: Azure Functions](https://docs.microsoft.com/en-us/samples/browse/?products=azure-functions&languages=java)"}]}')}}]);