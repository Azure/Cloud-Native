"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7677],{1650:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/Cloud-Native/blog/welcome","source":"@site/blog/2022-08-17/index.md","title":"Hello, ServerlessSeptember","description":"\ud83c\udf42 It\'s September?","date":"2022-08-17T00:00:00.000Z","formattedDate":"August 17, 2022","tags":[{"label":"hello","permalink":"/Cloud-Native/blog/tags/hello"},{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"}],"readingTime":2.38,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Devanshi Joshi","title":"Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://pbs.twimg.com/profile_images/1520928730230652928/00BaK5xn_400x400.jpg","key":"devanshi"}],"frontMatter":{"slug":"welcome","title":"Hello, ServerlessSeptember","authors":["nitya","devanshi"],"draft":false,"tags":["hello","serverless-september"],"image":"../../static/img/banners/post-kickoff.png"},"nextItem":{"title":"Welcome Students!","permalink":"/Cloud-Native/blog/students"}},"content":"## \ud83c\udf42 It\'s September?\\n\\nWell, almost! September 1 is a few days away and I\'m excited! Why? Because it\'s the perfect time to revisit **#Serverless September**, a month of\\n> \\".. content-driven learning where experts and practitioners share their insights and tutorials on how to use serverless technologies effectively in today\'s ecosystems\\"\\n\\nIf the words look familiar, it\'s because I actually wrote them [2 years ago](https://dev.to/azure/serverlessseptember-just-5-things-you-need-to-know-3p9e) when we launched the 2020 edition of this series. You might even recall _this_ whimsical image I drew to capture the concept of September (fall) and Serverless (event-driven on-demand compute). Since then, a lot has happened in the serverless ecosystem!\\n\\n\\nYou can still browse the [2020 Content Collection](https://dev.to/azure/serverlessseptember-2020-content-collection-443k) to find great talks, articles and code samples to get started using Serverless on Azure. But read on to learn what\'s new!\\n\\n![](./img/2020-banner.png)\\n\\n\\n\\n\\n## \ud83e\uddd0 What\'s New?\\n\\nWell - quite a few things actually. This year, [Devanshi Joshi](https://twitter.com/devanshidiaries) and I expanded the original concept in a number of ways. Here\'s just a few of them that come to mind.\\n\\n### New Website\\n\\nThis year, we created _this_ website (shortcut: [https://aka.ms/serverless-september](https://aka.ms/serverless-september)) to serve as a permanent home for content in 2022 and beyond - making it a  canonical source for the `#serverless` posts we publish to  tech communities like [dev.to](https://dev.to/azure), [Azure Developer Community](https://techcommunity.microsoft.com/t5/azure-developer-community-blog/bg-p/AzureDevCommunityBlog?WT.mc_id=javascript-74010-ninarasi) and [Apps On Azure](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/bg-p/AppsonAzureBlog/label-name/Serverless?WT.mc_id=javascript-74010-ninarasi). We hope this also makes it easier for you to search for, or discover, current and past articles that support your learning journey!\\n\\nStart by bookmarking these two sites:\\n\\n * [Build Cloud Native Apps on Azure](https://azure.microsoft.com/solutions/cloud-native-apps/?WT.mc_id=javascript-74010-ninarasi)\\n * [Go Serverless On Azure](https://azure.microsoft.com/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi)\\n\\n\\n### More Options\\n\\nPrevious years focused on curating and sharing content authored by Microsoft and community contributors, showcasing serverless examples and best practices. This was perfect for those who already had experience with the core devtools and concepts.\\n\\nThis year, we wanted to combine _beginner-friendly_ options (for those just starting their serverless journey) with more _advanced insights_ (for those looking to skill up further). Here\'s a sneak peek at some of the initiatives we\'ve got planned!\\n\\n![](../../static/img/banners/post-kickoff.png)\\n\\nWe\'ll also explore the full spectrum of serverless - from Functions-as-a-Service (for granularity) to Containerization (for deployment) and Microservices (for scalability). Here are a few services and technologies you\'ll get to learn more about:\\n\\n * [Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Container Apps](https://docs.microsoft.com/azure/container-apps/overview?WT.mc_id=javascript-74010-ninarasi)\\n * [Distributed Application Runtime (dapr)](https://dapr.io/?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Event Grid](https://docs.microsoft.com/azure/event-grid/?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Logic Apps](https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=javascript-74010-ninarasi)\\n * [Azure Static Web Apps](https://docs.microsoft.com/azure/logic-apps/?WT.mc_id=javascript-74010-ninarasi)\\n\\n\\n\\n\\n## \u26a1\ufe0f Join us!\\n\\nThis has been a labor of love from multiple teams at Microsoft! We can\'t wait to share all the resources that we hope will help _you_ skill up on all things Serverless this September! Here are a couple of ways to participate:\\n\\n* **[Subscribe to this blog](https://azure.github.io/Cloud-Native/blog/rss.xml)** - get notified early when we publish!\\n* **[Follow Azure on dev.to](https://dev.to/azure)** - look for the #ServerlessSeptember series!\\n* **[Bookmark this site](https://aka.ms/serverless-september)** and check back regularly for updates."},{"id":"students","metadata":{"permalink":"/Cloud-Native/blog/students","source":"@site/blog/2022-08-31/index.md","title":"Welcome Students!","description":"\u2728 Serverless September For Students","date":"2022-08-31T00:00:00.000Z","formattedDate":"August 31, 2022","tags":[{"label":"students","permalink":"/Cloud-Native/blog/tags/students"},{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"}],"readingTime":2.575,"hasTruncateMarker":false,"authors":[{"name":"Sara Gibbons","title":"Next Gen Experiences Advocate @Microsoft","url":"https://github.com/saragibby","imageURL":"https://github.com/saragibby.png","key":"sara"}],"frontMatter":{"slug":"students","title":"Welcome Students!","authors":["sara"],"draft":false,"tags":["students","serverless-september"]},"prevItem":{"title":"Hello, ServerlessSeptember","permalink":"/Cloud-Native/blog/welcome"},"nextItem":{"title":"01. It\'s 30DaysOfServerless!","permalink":"/Cloud-Native/blog/01-kickoff"}},"content":"## \u2728 Serverless September For Students\\n\\nMy love for the tech industry grows as it evolves. Not just for the new technologies to play with, but seeing how paths into a tech career continue to expand. Allowing so many new voices, ideas and perspectives to our industry. With [serverless computing](https://azure.microsoft.com/resources/cloud-computing-dictionary/what-is-serverless-computing/?WT.mc_id=academic-75239-sagibbon) removing barriers of entry for so many.\\n\\nIt\'s a reason I enjoy working with universities and students. I get to hear the excitement of learning, fresh ideas and perspectives from our student community. All you students are incredible! How you view serverless, and what it can do, so cool!  \\n\\nThis year for Serverless September we want to hear all the amazing ways our student community is learning and working with Azure Serverless, and have all new ways for you to participate. \\n\\n### Getting Started\\n\\nIf you don\'t already have an [Azure for Students](https://docs.microsoft.com/azure/education-hub/azure-dev-tools-teaching/azure-students-program?WT.mc_id=academic-75239-sagibbon) account you can easily get your **FREE** account created at [Azure for Students Sign up](https://azure.microsoft.com/free/students/?WT.mc_id=academic-75239-sagibbon).\\n\\nIf you are new to serverless, here are a couple links to get you started:\\n * [Build Cloud Native Apps on Azure](https://azure.microsoft.com/solutions/cloud-native-apps/?WT.mc_id=academic-75239-sagibbon)\\n * [Go Serverless On Azure](https://azure.microsoft.com/solutions/serverless/?WT.mc_id=academic-75239-sagibbon)\\n\\n\\n### No Experience, No problem\\n\\nFor Serverless September we have planned beginner friendly content all month long. Covering such services as:\\n * [Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=academic-75239-sagibbon)\\n * [Azure Container Apps](https://docs.microsoft.com/azure/container-apps/overview?WT.mc_id=academic-75239-sagibbon)\\n * [Distributed Application Runtime (dapr)](https://dapr.io/)\\n * [Azure Event Grid](https://docs.microsoft.com/azure/event-grid/?WT.mc_id=academic-75239-sagibbon)\\n * [Azure Logic Apps](https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=academic-75239-sagibbon)\\n * [Azure Static Web Apps](https://docs.microsoft.com/azure/logic-apps/?WT.mc_id=academic-75239-sagibbon)\\n\\nYou can follow [#30DaysOfServerles](https://azure.github.io/Cloud-Native/blog/) here on the blog for daily posts covering concepts, scenarios, and how to create end-to-end solutions. \\n\\nJoin the [Cloud Skills Challenge](https://azure.github.io/Cloud-Native/serverless-september/CloudSkills/) where we have selected a list of Learn Modules for you to go through at your own pace, including deploying a full stack application with [Azure Static Web Apps](https://docs.microsoft.com/azure/logic-apps/?WT.mc_id=academic-75239-sagibbon).\\n\\n\\n### Have A Question \\n\\nWe want to hear it! All month long we will have **Ask The Expert** sessions. [Submit your questions](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=ask+the+expert&template=---ask-the-expert-.md&title=%5BAsk+The+Expert%5D++) at any time and will be be sure to get one of our Azure Serverless experts to get you an answer. \\n\\n### Share What You\'ve Created \\n\\nIf you have written a blog post, recorded a video, have an open source Azure Serverless project, we\'d love to see it! Here is some links for you to share your creations\\n\\n* [Written an article or recorded a video involving Azure Serverless](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=&template=---community-buzz--share-technical-articles.md&title=)\\n* [Have an open source Serverless project you built](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=&template=---community-showcase--share-code-projects.md&title=%5BShowcase+Submission%5D)\\n* [Crafted a Serverless Hack](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=&template=---serverless-hacks--share-your-hack-.md&title=%5BServerless+Hacks%5D)\\n\\n## \ud83e\udded Explore Student Resources\\n\\n* [Microsoft Student Hub](https://docs.microsoft.com/learn/student-hub/?WT.mc_id=academic-75239-sagibbon) - highlight student focused resources across Microsoft\\n* [Microsoft Learn Student Ambassadors](https://studentambassadors.microsoft.com/?WT.mc_id=academic-75239-sagibbon) - our student focused community program\\n* [Imagine Cup](https://imaginecup.microsoft.com/Events?ocid=pre_web_ambassador_learnmore_all?WT.mc_id=academic-75239-sagibbon) - our annual student innovation competition\\n\\n## \u26a1\ufe0f Join us!\\n\\nMultiple teams across Microsoft are working to create Serverless September! They all want to hear from our incredible student community. We can\'t wait to share all the Serverless September resources and hear what you have learned and created. Here are some ways to keep up to date on all Serverless September activity:\\n\\n* **[Subscribe to this blog](https://azure.github.io/Cloud-Native/blog/rss.xml)** - get notified early when we publish!\\n* **[Follow Azure on dev.to](https://dev.to/azure)** - look for the #ServerlessSeptember series!\\n* **[Bookmark this site](https://aka.ms/serverless-september?WT.mc_id=academic-75239-sagibbon)** and check back regularly for updates."},{"id":"01-kickoff","metadata":{"permalink":"/Cloud-Native/blog/01-kickoff","source":"@site/blog/2022-09-01/index.md","title":"01. It\'s 30DaysOfServerless!","description":"What We\'ll Cover","date":"2022-09-01T00:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"hello","permalink":"/Cloud-Native/blog/tags/hello"},{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"}],"readingTime":4.24,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Devanshi Joshi","title":"Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://pbs.twimg.com/profile_images/1520928730230652928/00BaK5xn_400x400.jpg","key":"devanshi"}],"frontMatter":{"slug":"01-kickoff","title":"01. It\'s 30DaysOfServerless!","authors":["nitya","devanshi"],"draft":false,"tags":["hello","serverless-september"],"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"]},"prevItem":{"title":"Welcome Students!","permalink":"/Cloud-Native/blog/students"},"nextItem":{"title":"02. Learn Core Concepts","permalink":"/Cloud-Native/blog/02-functions-intro"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://azure.github.io/Cloud-Native/blog/01-kickoff\\" />\\n  <meta name=\\"twitter:title\\" content=\\"#01 - It\'s 30DaysOfServerless!\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join #ServerlessSeptember as we kickoff #30DaysOfServerless with a look at @AzureFunctions and more. Visit https://aka.ms/serverless-september\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://azure.github.io/Cloud-Native/assets/images/post-kickoff-4a04995b44f0cc4a784fb4ab5e29cf7c.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureStaticApps\\" /> \\n</head>\\n\\n\\n## What We\'ll Cover\\n * What is Serverless September? (6 initiatives)\\n * How can I _participate_? (3 actions)\\n * How can I _skill up_ (30 days)\\n * Who is behind this? (Team Contributors)\\n * How can _you_ contribute? (Custom Issues)\\n * **Exercise**: Take the [Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)!\\n * **Resources**: [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection).\\n\\n---\\n\\n![Serverless September](../../static/img/banners/post-kickoff.png)\\n\\n\\nWelcome to `Day 01` of [\ud83c\udf42 #ServerlessSeptember](https://aka.ms/serverless-september)! Today, we kick off a full month of content and activities to skill you up on all things Serverless on Azure with content, events, and community interactions! Read on to learn about what we have planned!\\n\\n---\\n\\n## Explore our initiatives\\n\\nWe have a number of initiatives planned for the month to help you learn and skill up on relevant technologies. Click on the links to visit the relevant pages for each. \\n\\n* [#30DaysOfServerless](/serverless-september/30DaysOfServerless) - 4 themed weeks of daily articles in a structured roadmap\\n* [Zero To Hero](/serverless-september/ZeroToHero) - 4-part series from Product Engineering teams on best practices\\n* [Serverless Hacks](/serverless-september/ServerlessHacks) - build a serverless tollbooth by solving 8 challenges - with help!\\n* [Cloud Skills Challenge](/serverless-september/30DaysOfServerless) - skill up by competing with peers to complete modules\\n* [Ask The Expert](/serverless-september/AskTheExpert/) - join live Q&A sessions with Product Engineering teams\\n* [Community Buzz](https://github.com/Azure/Cloud-Native/issues/new/choose) - participate by submitting questions, or contributing content\\n\\nWe\'ll go into more details about **#30DaysOfServerless** in this post - don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/blog/rss.xml) to the blog to get daily posts delivered directly to your preferred feed reader!\\n\\n---\\n\\n## Register for events!\\n\\nWhat are 3 things you can do today, to jumpstart your learning journey?\\n\\n * **Register** for live Q&A sessions (free, online)\\n    - Sep 15 - [Ask The Expert: Azure Functions](https://reactor.microsoft.com/reactor/events/17000/)\\n    - Sep 29 - [Ask the Expert: Azure Container Apps](https://reactor.microsoft.com/reactor/events/17000/)\\n  * **Register** for the [Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi) - 30 days to complete it!\\n * **Register** for the [Serverless Hacks Challenge](https://docs.microsoft.com/events/learn-events/reactor-serverlessseptember/?wt.mc_id=eventspg_16946_webpage_reactor&WT.mc_id=javascript-74010-ninarasi) office hours (weekly)\\n\\n![Serverless Hacks](../../static/img/banners/serverless-hacks.png)\\n\\n---\\n\\n## #30DaysOfServerless\\n\\n[#30DaysOfServerless](/serverless-september/30DaysOfServerless) is a month-long series of daily blog posts grouped into 4 themed weeks - taking you from core concepts to end-to-end solution examples in 30 days. Each article will be short (5-8 mins reading time) and provide exercises and resources to help you reinforce learnings and take next steps.\\n\\nThis series focuses on the [Serverless On Azure](https://azure.microsoft.com/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi) learning journey in **four stages**, each building on the previous week to help you skill up in a beginner-friendly way:\\n * **Week 1:** Get started with serverless using [Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=javascript-74010-ninarasi) \\n * **Week 2:** Build & deploy microservices with [Azure Container Apps](https://docs.microsoft.com/azure/container-apps/overview?WT.mc_id=javascript-74010-ninarasi) and [Dapr](https://dapr.io/?WT.mc_id=javascript-74010-ninarasi).\\n * **Week 3:** Streamline integrations using [Azure Logic Apps](https://docs.microsoft.com/azure/logic-apps/?WT.mc_id=javascript-74010-ninarasi) and [Azure Event Grid](https://docs.microsoft.com/azure/event-grid/overview?WT.mc_id=javascript-74010-ninarasi)\\n * **Week 4:** Develop End-to-End solutions with [Serverless on Azure](https://azure.microsoft.com/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi)\\n\\n![](./img/banner.png)\\n\\nWe have a [tentative roadmap](/serverless-september/30DaysOfServerless) for the topics we hope to cover and will keep this updated as we go with links to actual articles as they get published.\\n\\n:::info Week 1: FOCUS ON FUNCTIONS \u26a1\ufe0f\\n\\nHere\'s a sneak peek at what we have planned for week 1. We\'ll start with a broad look at fundamentals, walkthrough examples for each targeted programming language, then wrap with a post that showcases the role of Azure Functions in powering different serverless scenarios.\\n\\n * Sep 02: Learn Core Concepts for Azure Functions\\n * Sep 03: Build and deploy your first Function\\n * Sep 04: Azure Functions - for Java Developers!\\n * Sep 05: Azure Functions - for JavaScript Developers!\\n * Sep 06: Azure Functions - for .NET Developers!\\n * Sep 07: Azure Functions - for Python Developers!\\n * Sep 08: Wrap: Azure Functions + Serverless on Azure\\n\\n:::\\n\\n---\\n\\n## Ways to Participate..\\n\\nWe hope you are as excited as we are, to jumpstart this journey. We want to make this a **useful, beginner-friendly** journey and we need your help!\\n\\nHere are the many ways you can participate:\\n\\n* **[Follow Azure on dev.to](https://dev.to/azure)** - we\'ll republish posts under [this series page](https://dev.to/nitya/series/19576) and welcome comments and feedback there!\\n* **[Discussions on GitHub](https://github.com/Azure/Cloud-Native/discussions)** - Use this if you have feedback for us (on how we can improve these resources), or want to chat with your peers about serverless topics.\\n* **[Custom Issues](https://github.com/Azure/Cloud-Native/issues/new/choose)** - just pick a template, create a new issue by filling in the requested details, and submit. You can use these to:\\n    - submit questions for **AskTheExpert** (live Q&A) ahead of time\\n    - submit your own articles or projects for community to learn from\\n    - share your **ServerlessHack** and get listed in our Hall Of Fame!\\n    - report bugs or share ideas for improvements\\n\\nHere\'s the list of custom issues currently defined.\\n\\n![Community Buzz](./img/community-buzz.png)\\n\\n\\n## Let\'s Get Started!\\n\\nNow you know everything! We hope you are as excited as we are to dive into a full month of active learning and doing! Don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/blog/rss.xml?WT.mc_id=javascript-74010-ninarasi) for updates in your favorite feed reader! **And look out for our first Azure Functions post tomorrow!**\\n\\n\\n---"},{"id":"02-functions-intro","metadata":{"permalink":"/Cloud-Native/blog/02-functions-intro","source":"@site/blog/2022-09-02/index.md","title":"02. Learn Core Concepts","description":"Introduction to Azure Functions, from core concepts to hello world!","date":"2022-09-02T00:00:00.000Z","formattedDate":"September 2, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"}],"readingTime":8.16,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"02-functions-intro","title":"02. Learn Core Concepts","authors":["nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Introduction to Azure Functions, from core concepts to hello world!","tags":["serverless-september","30-days-of-serverless","azure-functions"]},"prevItem":{"title":"01. It\'s 30DaysOfServerless!","permalink":"/Cloud-Native/blog/01-kickoff"},"nextItem":{"title":"03. Build Your First Function","permalink":"/Cloud-Native/blog/03-functions-quickstart"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/functions-1\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/02-functions-intro\\" />\\n</head>\\n\\n---\\n\\nWelcome to Day 2\ufe0f\u20e3 of #30DaysOfServerless!\\n\\nToday, we kickstart our journey into serveless on Azure with a look at _Functions As a Service_. We\'ll explore Azure Functions - from core concepts to usage patterns. \\n\\nReady? Let\'s Go!\\n\\n---\\n\\n## What We\'ll Cover\\n * What is Functions-as-a-Service? (FaaS)\\n * What is Azure Functions?\\n * Triggers, Bindings and Custom Handlers\\n * What is Durable Functions?\\n * Orchestrators, Entity Functions and Application Patterns\\n * **Exercise**: Take the [Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)!\\n * **Resources**: [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection).\\n\\n![](./img/banner.png)\\n\\n---\\n\\n\\n## 1. What is FaaS?\\n\\nFaas stands for [Functions As a Service (FaaS)](https://docs.microsoft.com/azure/architecture/guide/technology-choices/compute-decision-tree?WT.mc_id=javascript-74010-ninarasi ). But what does that mean for us as application developers? We know that \\nbuilding and deploying modern applications **at scale** can get _complicated_ and it starts with us needing to take decisions on _Compute_. In other words, we need to answer this question: \\"**where should I host my application given my resource dependencies and scaling requirements?**\\" \\n\\n![this useful flowchart](./img/compute-choices.png )\\n\\nAzure has [this useful flowchart](https://docs.microsoft.com/azure/architecture/guide/technology-choices/compute-decision-tree?WT.mc_id=javascript-74010-ninarasi ) (shown below) to guide your decision-making. You\'ll see that hosting options generally fall into three categories:\\n * **Infrastructure as a Service (IaaS)** - where you provision and manage Virtual Machines yourself (cloud provider manages infra).\\n * **Platform as a Service (PaaS)** - where you use a provider-_managed_ hosting environment like Azure Container Apps.\\n * **Functions as a Service (FaaS)** - where you forget about hosting environments and simply _deploy your code_ for the provider to run.\\n\\nHere, \\"serverless\\" compute refers to hosting options where we (as developers) can focus on building apps _without having to manage the infrastructure_. See [serverless compute options on Azure](https://azure.microsoft.com/solutions/serverless/?WT.mc_id=javascript-74010-ninarasi ) for more information.\\n\\n---\\n\\n## 2. Azure Functions\\n\\n[Azure Functions](https://docs.microsoft.com/azure/azure-functions/?WT.mc_id=javascript-74010-ninarasi ) is the Functions-as-a-Service (FaaS) option on Azure. It is the ideal serverless solution if your application is event-driven with short-lived workloads. With Azure Functions, we develop applications as modular blocks of code (`functions`) that are executed on demand, in response to configured events (`triggers`). This approach brings us two advantages:\\n * _It saves us money._ We only pay for the time the function runs.\\n * _It scales with demand._ We have 3 hosting plans for flexible scaling behaviors.\\n\\nAzure Functions can be programmed in many popular languages (C#, F#, Java, JavaScript, TypeScript, PowerShell or Python), with Azure providing [language-specific](https://docs.microsoft.com/azure/azure-functions/supported-languages?WT.mc_id=javascript-74010-ninarasi ) handlers and default [runtimes](https://docs.microsoft.com/azure/azure-functions/supported-languages#languages-by-runtime-version?WT.mc_id=javascript-74010-ninarasi ) to execute them.\\n\\n:::tip Concept: Custom Handlers\\n\\n* What if we wanted to program in a non-supported language? \\n* Or we wanted to use a different runtime for a supported language? \\n:::\\n\\n**[Custom Handlers](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers?WT.mc_id=javascript-74010-ninarasi )** have you covered! These are lightweight webservers that can receive and process input events from the Functions host - and return responses that can be delivered to any output targets. By this definition, custom handlers can be implemented by _any language that supports receiving HTTP events_. Check out [the quickstart for writing a custom handler](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-other?tabs=go%2Cmacos&WT.mc_id=javascript-74010-ninarasi ) in Rust or Go.\\n\\n![Custom Handlers](./img/azure-functions-custom-handlers-overview.png)\\n\\n\\n:::tip Concept: Trigger and Bindings\\n\\nWe talked about what functions are (code blocks). But when are they invoked or executed? And how do we provide inputs (arguments) and retrieve outputs (results) from this execution?\\n:::\\n\\nThis is where **triggers** and **bindings** come in.\\n\\n * `Triggers` define how a function is invoked and what associated data it will provide. _A function must have exactly one trigger_.\\n * `Bindings` _declaratively_ define how a resource is connected to the function. The resource or binding can be of type input, output, or both. _Bindings are optional. A Function can have multiple input, output bindings_.\\n\\nAzure Functions comes with a number of [supported bindings](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=csharp#supported-bindings&WT.mc_id=javascript-74010-ninarasi) that can be used to integrate relevant services to power a specific scenario. For instance:\\n * [HTTP Triggers](https://docs.microsoft.com/azure/azure-functions/functions-bindings-http-webhook?tabs=in-process%2Cfunctionsv2&pivots=programming-language-javascript&WT.mc_id=javascript-74010-ninarasi) - invokes the function in response to an `HTTP request`. Use this to implement serverless APIs for your application.\\n * [Event Grid Triggers](https://docs.microsoft.com/azure/azure-functions/functions-bindings-event-grid?tabs=in-process%2Cextensionv3&pivots=programming-language-javascript&WT.mc_id=javascript-74010-ninarasi) invokes the function on receiving events from an Event Grid. Use this to process events reactively, and potentially publish responses back to custom Event Grid topics.\\n * [SignalR Service Trigger](https://docs.microsoft.com/azure/azure-functions/functions-bindings-signalr-service-trigger?tabs=in-process&pivots=programming-language-javascript&WT.mc_id=javascript-74010-ninarasi) invokes the function in response to messages from Azure SignalR, allowing your application to take actions with _real-time contexts_.\\n\\nTriggers and bindings help you abstract your function\'s interfaces to other components it interacts with, eliminating hardcoded integrations. They are [configured differently based on the programming language](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=csharp#trigger-and-binding-definitions&WT.mc_id=javascript-74010-ninarasi ) you use. For example - JavaScript functions are configured in the [functions.json](https://docs.microsoft.com/azure/azure-functions/functions-reference?tabs=blob#function-code?WT.mc_id=javascript-74010-ninarasi ) file. Here\'s an example of what that looks like.\\n\\n\\n```js\\n{\\n    \\"disabled\\":false,\\n    \\"bindings\\":[\\n        // ... bindings here\\n        {\\n            \\"type\\": \\"bindingType\\",\\n            \\"direction\\": \\"in\\",\\n            \\"name\\": \\"myParamName\\",\\n            // ... more depending on binding\\n        }\\n    ]\\n}\\n```\\n\\nThe key thing to remember is that triggers and bindings have a `direction` property - triggers are always `in`, input bindings are `in` and output bindings are `out`. Some bindings can support a special `inout` direction. \\n\\nThe documentation has [code examples](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=javascript#supported-bindings&WT.mc_id=javascript-74010-ninarasi ) for bindings to popular Azure services. Here\'s an example of the bindings and trigger configuration for a [BlobStorage](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-blob-input?tabs=in-process%2Cextensionv5&pivots=programming-language-javascript#example&WT.mc_id=javascript-74010-ninarasi ) use case.\\n\\n```js\\n// function.json configuration\\n\\n{\\n  \\"bindings\\": [\\n    {\\n      \\"queueName\\": \\"myqueue-items\\",\\n      \\"connection\\": \\"MyStorageConnectionAppSetting\\",\\n      \\"name\\": \\"myQueueItem\\",\\n      \\"type\\": \\"queueTrigger\\",\\n      \\"direction\\": \\"in\\"\\n    },\\n    {\\n      \\"name\\": \\"myInputBlob\\",\\n      \\"type\\": \\"blob\\",\\n      \\"path\\": \\"samples-workitems/{queueTrigger}\\",\\n      \\"connection\\": \\"MyStorageConnectionAppSetting\\",\\n      \\"direction\\": \\"in\\"\\n    },\\n    {\\n      \\"name\\": \\"myOutputBlob\\",\\n      \\"type\\": \\"blob\\",\\n      \\"path\\": \\"samples-workitems/{queueTrigger}-Copy\\",\\n      \\"connection\\": \\"MyStorageConnectionAppSetting\\",\\n      \\"direction\\": \\"out\\"\\n    }\\n  ],\\n  \\"disabled\\": false\\n}\\n```\\nThe code below shows the function implementation. In this scenario, the function is triggered by a _queue message_ carrying an _input payload_ with a blob name. In response, it copies that data to the resource associated with the _output binding_.\\n\\n```js\\n// function implementation\\n\\nmodule.exports = async function(context) {\\n    context.log(\'Node.js Queue trigger function processed\', context.bindings.myQueueItem);\\n    context.bindings.myOutputBlob = context.bindings.myInputBlob;\\n};\\n```\\n\\n\\n:::tip Concept: Custom Bindings\\n\\nWhat if we have a more complex scenario that requires bindings for non-supported resources? \\n:::\\n\\nThere is an option create custom bindings if necessary. We don\'t have time to dive into details here but definitely check out the [documentation](https://github.com/Azure/azure-webjobs-sdk/wiki/Creating-custom-input-and-output-bindings)\\n\\n---\\n\\n## 3. Durable Functions\\n\\nThis sounds great, right?. But now, let\'s talk about one challenge for Azure Functions. In the use cases so far, the functions are _stateless_ - they take inputs at runtime if necessary, and return output results if required. But they are otherwise self-contained, which is great for scalability!\\n\\nBut what if I needed to build more complex _workflows_ that need to store and transfer state, and complete operations in a reliable manner? [Durable Functions](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=csharp&WT.mc_id=javascript-74010-ninarasi ) are an extension of Azure Functions that makes _stateful workflows_ possible.\\n\\n:::tip Concept: Orchestrator Functions\\n\\nHow can I create workflows that coordinate functions?\\n:::\\n\\nDurable Functions use [orchestrator functions](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-orchestrations?tabs=csharp&WT.mc_id=javascript-74010-ninarasi ) to coordinate execution of other Durable functions within a given Functions app. These functions are _durable and reliable_. Later in this post, we\'ll talk briefly about some application patterns that showcase popular orchestration scenarios.\\n\\n:::tip Concept:  Entity Functions\\nHow do I persist and manage state across workflows?\\n:::\\n\\nEntity Functions provide explicit _state mangement_ for Durable Functions, defining operations to read and write state to _durable entities_. They are associated with a special _entity trigger_ for invocation. These are currently available only for a subset of programming languages so check to see if they are supported for your programming language of choice.\\n\\n:::tip USAGE: Application Patterns\\n:::\\n\\nDurable Functions are a fascinating topic that would require a separate, longer post, to do justice. For now, \\nlet\'s look at some [application patterns](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-entities?tabs=csharp&WT.mc_id=javascript-74010-ninarasi ) that showcase the value of these starting with the simplest one - [Function Chaining](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=csharp#chaining&WT.mc_id=javascript-74010-ninarasi ) as shown below:\\n\\n![Function Chaining](./img/function-chaining.png )\\n\\n Here, we want to execute a sequence of named functions _in a specific order_. As shown in the snippet below, the orchestrator function coordinates invocations on the given functions in the desired sequence - \\"chaining\\" inputs and outputs to establish the workflow. Take note of the `yield` keyword. This triggers a checkpoint, preserving the current state of the function for reliable operation.\\n\\n\\n```\\nconst df = require(\\"durable-functions\\");\\n\\nmodule.exports = df.orchestrator(function*(context) {\\n    try {\\n        const x = yield context.df.callActivity(\\"F1\\");\\n        const y = yield context.df.callActivity(\\"F2\\", x);\\n        const z = yield context.df.callActivity(\\"F3\\", y);\\n        return    yield context.df.callActivity(\\"F4\\", z);\\n    } catch (error) {\\n        // Error handling or compensation goes here.\\n    }\\n});\\n```\\n\\nOther application patterns for durable functions include:\\n * [Fan-out/fan-in](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#fan-in-out&WT.mc_id=javascript-74010-ninarasi )\\n * [Async HTTP APIs](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#async-http&WT.mc_id=javascript-74010-ninarasi )\\n * [Monitoring](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#monitoring&WT.mc_id=javascript-74010-ninarasi )\\n * [Human Interaction](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#human&WT.mc_id=javascript-74010-ninarasi )\\n * [Aggregator (stateful entities)](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=javascript#aggregator&WT.mc_id=javascript-74010-ninarasi )\\n\\nThere\'s a lot more to explore but we won\'t have time to do that today. Definitely [check the documentation](https://docs.microsoft.com/azure/azure-functions/durable/?WT.mc_id=javascript-74010-ninarasi ) and take a minute to read the [comparison with Azure Logic Apps](https://docs.microsoft.com/azure/azure-functions/functions-compare-logic-apps-ms-flow-webjobs#compare-azure-functions-and-azure-logic-apps?WT.mc_id=javascript-74010-ninarasi ) to understand what each technology provides for serverless workflow automation.\\n\\n---\\n\\n## 4. Exercise\\n\\nThat was a lot of information to absorb! Thankfully, there are a lot of examples in the documentation that can help put these in context. Here are a couple of exercises you can do, to reinforce your understanding of these concepts.\\n\\n* Explore the [supported bindings](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=csharp#supported-bindings&WT.mc_id=javascript-74010-ninarasi ) for Azure Functions.\\n* Look at [code examples](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=javascript#bindings-code-examples&WT.mc_id=javascript-74010-ninarasi ), think of usage scenarios.\\n\\n---\\n\\n## 5. What\'s Next?\\n\\nThe goal for today was to give you a quick tour of key terminology and concepts related to Azure Functions. Tomorrow, we dive into _the developer experience_, starting with core tools for local development and ending by deploying our first Functions app.\\n\\nWant to do some prep work? Here are a few useful links:\\n- [Azure Functions Quickstart](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-node?WT.mc_id=javascript-74010-ninarasi )\\n- [Durable Functions Quickstart](https://docs.microsoft.com/azure/azure-functions/durable/quickstart-js-vscode)\\n- [Azure Functions VS Code Extension](https://docs.microsoft.com/azure/azure-functions/functions-develop-vs-code?tabs=csharp&WT.mc_id=javascript-74010-ninarasi )\\n- [Azure Functions Core Tools](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=javascript#bindings-code-examples&WT.mc_id=javascript-74010-ninarasi )\\n\\n\\n---\\n\\n## 6. Resources\\n* Developer Guide: [Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-reference?tabs=blob)\\n* Azure Functions: [Tutorials](https://docs.microsoft.com/azure/azure-functions/functions-twitter-email) and [Samples](https://docs.microsoft.com/samples/browse/?products=azure-functions&languages=javascript)\\n* Durable Functions: [Tutorials](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-sequence?tabs=javascript) and [Samples](https://docs.microsoft.com/samples/browse/?products=azure-functions&term=durable&terms=durable&languages=javascript) \\n* Self-Paced Learning: [MS Learn Modules](https://docs.microsoft.com/learn/browse/?products=azure-functions&filter-products=Functions)\\n* Video Playlists: [Azure Functions on YouTube ](https://www.youtube.com/c/AzureFunctions)\\n\\n---"},{"id":"03-functions-quickstart","metadata":{"permalink":"/Cloud-Native/blog/03-functions-quickstart","source":"@site/blog/2022-09-03/index.md","title":"03. Build Your First Function","description":"Let\'s build our first Azure Functions app - and get familiar with the relevant developer tools and resources!","date":"2022-09-03T00:00:00.000Z","formattedDate":"September 3, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"vscode","permalink":"/Cloud-Native/blog/tags/vscode"},{"label":"devtools","permalink":"/Cloud-Native/blog/tags/devtools"}],"readingTime":8.155,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"03-functions-quickstart","title":"03. Build Your First Function","authors":["nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Let\'s build our first Azure Functions app - and get familiar with the relevant developer tools and resources!","tags":["serverless-september","30-days-of-serverless","azure-functions","vscode","devtools"]},"prevItem":{"title":"02. Learn Core Concepts","permalink":"/Cloud-Native/blog/02-functions-intro"},"nextItem":{"title":"04. Functions For Java Devs","permalink":"/Cloud-Native/blog/04-functions-java"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/03-functions-quickstart\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Build Your First Function\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Build Your First Function\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/03-functions-quickstart\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 3` of #30DaysOfServerless!\\n\\n_Yesterday_ we learned core concepts and terminology for Azure Functions, the signature _Functions-as-a-Service_ option on Azure. _Today_ we take our first steps into building and deploying an Azure Functions app, and validate local development setup.\\n\\nReady? Let\'s go.\\n\\n---\\n\\n## What We\'ll Cover\\n\\n * Review the [Azure Functions Developer Guide](https://docs.microsoft.com/azure/azure-functions/functions-reference?tabs=blob&WT.mc_id=javascript-74010-ninarasi)\\n * Build your first Function App [with VS Code](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-node?WT.mc_id=javascript-74010-ninarasi)\\n * Develop locally [using Azure Functions Core Tools](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2)\\n * Review [Local Testing & Development](https://docs.microsoft.com/azure/azure-functions/functions-develop-local?WT.mc_id=javascript-74010-ninarasi) guidelines\\n * Check out the [Durable Functions Quickstart](https://docs.microsoft.com/azure/azure-functions/durable/quickstart-js-vscode?WT.mc_id=javascript-74010-ninarasi)\\n * **Exercise**: Take the [Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)!\\n * **Resources**: [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection).\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## Developer Guidance\\n\\nBefore we jump into development, let\'s familiarize ourselves with language-specific guidance from the Azure Functions Developer Guide. We\'ll review the [JavaScript version](https://docs.microsoft.com/azure/azure-functions/functions-reference?tabs=blob&WT.mc_id=javascript-74010-ninarasi) but guides for F#, Java, Python, C# and PowerShell are also available.\\n\\n 1. A **function** is defined by two things: _code_ (written in a supported programming language) and _configuration_ (specified in a `functions.json` file, declaring the triggers, bindings and other context for execution).\\n\\n 2. A **function app** is the _unit of deployment_ for your functions, and is associated with a single execution context or runtime. It can contain multiple functions, but they _must_ be in the same language. \\n\\n 3. A **host configuration** is _runtime-specific configuration_ that affects all functions running in a given function app instance. It is defined in a `host.json` file.\\n\\n 4. A recommended **folder structure** is defined for the function app, but may vary based on the programming language used. Check [the documentation on folder structures](https://docs.microsoft.com/azure/azure-functions/functions-reference?tabs=blob#folder-structure&WT.mc_id=javascript-74010-ninarasi) to learn the default for _your_ preferred language.\\n\\nHere\'s an [example of the JavaScript folder structure](https://docs.microsoft.com/azure/azure-functions/functions-reference-node?WT.mc_id=javascript-74010-ninarasi) for a function app containing two functions with some shared dependencies. Note that `host.json` (runtime configuration) is defined once, in the root directory. And `function.json` is defined separately for each function.\\n\\n```\\nFunctionsProject\\n | - MyFirstFunction\\n | | - index.js\\n | | - function.json\\n | - MySecondFunction\\n | | - index.js\\n | | - function.json\\n | - SharedCode\\n | | - myFirstHelperFunction.js\\n | | - mySecondHelperFunction.js\\n | - node_modules\\n | - host.json\\n | - package.json\\n | - local.settings.json\\n```\\n\\nWe\'ll dive into what the contents of these files look like, when we build and deploy the first function. We\'ll cover `local.settings.json` in the _About Local Testing_ section at the end.\\n\\n---\\n\\n## My First Function App\\n\\nThe documentation provides **quickstart** options for all supported languages. We\'ll walk through the _JavaScript_ versions in this article. You have two options for development: \\n  * using [Visual Studio Code](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-node) for an IDE-driven experience\\n  * using [Azure CLI](https://docs.microsoft.com/azure/azure-functions/create-first-function-cli-node?tabs=azure-cli%2Cbrowser) for a commandline-driven experience.\\n\\nI\'m a huge fan of VS Code - so I\'ll be working through that tutorial today. \\n\\n:::info PRE-REQUISITES\\n\\n * Have an Azure account (with active subscription) | **[Create one for free](https://azure.microsoft.com/free/?ref=microsoft.com&utm_source=microsoft.com&utm_medium=docs&utm_campaign=visualstudio)**\\n * Install Azure Functions Core Tools | **[Verify it\'s version 4.x](https://docs.microsoft.com/azure/azure-functions/functions-run-local#v2)**\\n * Install Azure Functions VS Code Extension | **[Currently v 1.7.4](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions)**\\n * Install Node.js v16 or v18 (preview) | **[Manage versions with NVM](https://github.com/nvm-sh/nvm)**\\n\\nDon\'t forget to validate your setup by checking the versions of installed software.\\n:::\\n\\n### Install VSCode Extension\\nInstalling the Visual Studio Code extension should automatically open this page in your IDE with similar quickstart instructions, but potentially more recent screenshots.\\n\\n![Visual Studio Code Extension for VS Code](./img/vscode.png)\\n\\n Note that it may make sense to install the [Azure tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) extensions pack if you plan on working through the many projects in Serverless September. This includes the Azure Functions extension by default.\\n\\n### Create First Function App\\n\\nWalk through the [Create local [project]](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-node#create-an-azure-functions-project) steps of the quickstart. The process is quick and painless and scaffolds out this folder structure and files. Note the existence (and locations) of `functions.json` and `host.json` files.\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-6.png)\\n\\n### Explore the Code\\n\\n**Check out the `functions.json` configuration file.** It shows that the function is activated by an `httpTrigger` with an input binding (tied to `req` payload) and an output binding (tied to `res` payload). And it supports both GET and POST requests on the exposed URL.\\n\\n```json\\n{\\n  \\"bindings\\": [\\n    {\\n      \\"authLevel\\": \\"anonymous\\",\\n      \\"type\\": \\"httpTrigger\\",\\n      \\"direction\\": \\"in\\",\\n      \\"name\\": \\"req\\",\\n      \\"methods\\": [\\n        \\"get\\",\\n        \\"post\\"\\n      ]\\n    },\\n    {\\n      \\"type\\": \\"http\\",\\n      \\"direction\\": \\"out\\",\\n      \\"name\\": \\"res\\"\\n    }\\n  ]\\n}\\n```\\n\\n**Check out `index.js` - the function implementation**. We see it logs a message to the console when invoked. It then extracts a `name` value from the input payload (req) and crafts a different `responseMessage` based on the presence/absence of a valid name. It returns this response in the output payload (res).\\n\\n```js\\nmodule.exports = async function (context, req) {\\n    context.log(\'JavaScript HTTP trigger function processed a request.\');\\n\\n    const name = (req.query.name || (req.body && req.body.name));\\n    const responseMessage = name\\n        ? \\"Hello, \\" + name + \\". This HTTP triggered function executed successfully.\\"\\n        : \\"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\\";\\n\\n    context.res = {\\n        // status: 200, /* Defaults to 200 */\\n        body: responseMessage\\n    };\\n}\\n```\\n\\n### Preview Function App Locally\\n\\nYou can now run this function app locally using [Azure Functions Core Tools](https://docs.microsoft.com/azure/azure-functions/functions-run-local). VS Code integrates seamlessly with this CLI-based tool, making it possible for you to exploit all its capabilities without leaving the IDE. In fact, the workflow will even prompt you to _install_ those tools if they didn\'t already exist in your local dev environment.\\n\\nNow run the function app locally by clicking on the \\"Run and Debug\\" icon in the activity bar (highlighted, left) and pressing the \\"\u25b6\ufe0f\\" (`Attach to Node Functions`) to start execution. On success, your console output should show something like this. \\n\\n ![Final screenshot for VS Code workflow](./img/vscode-7.png)\\n\\nYou can test the function locally by visiting the Function Url shown (`http://localhost:7071/api/HttpTrigger1`) or by opening the _Workspace_ region of the Azure extension, and selecting the `Execute Function now` menu item as shown.\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-8.png)\\n\\nIn the latter case, the `Enter request body` popup will show a pre-populated request of `{\\"name\\":\\"Azure\\"}` that you can submit. \\n\\n ![Final screenshot for VS Code workflow](./img/vscode-9.png)\\n \\n On successful execution, your VS Code window will show a notification as follows. Take note of the console output - it shows the message encoded in `index.js`.\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-10.png)\\n\\nYou can also visit the deployed function URL directly in a local browser - testing the case for a request made with no `name` payload attached. Note how the response in the browser now shows the non-personalized version of the message!\\n\\n ![Final screenshot for VS Code workflow](./img/vscode-11.png)\\n\\n\\n:::success \ud83c\udf89 **Congratulations**\\nYou created and ran a function app locally!\\n:::\\n\\n### (Re)Deploy to Azure\\n\\nNow, just follow the [creating a function app in Azure](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-node#publish-the-project-to-azure) steps to deploy it to Azure, using an active subscription! The deployed app resource should now show up under the `Function App` Resources where you can click `Execute Function Now` to test the Azure-deployed version instead. You can also look up the function URL in the portal and visit that link in your local browser to trigger the function without the name context.\\n\\n\\n:::success \ud83c\udf89 **Congratulations**\\nYou have an Azure-hosted serverless function app!\\n:::\\n\\n\\nChallenge yourself and try to [change the code and redeploy](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-node#run-the-function-in-azure) to Azure to return something different. _You have effectively created a serverless API endpoint!_ \\n\\n---\\n\\n## About Core Tools\\n\\nThat was a lot to cover! In the next few days we\'ll have more examples for Azure Functions app development - focused on different programming languages. So let\'s wrap today\'s post by reviewing two helpful resources.\\n\\nFirst, let\'s talk about [Azure Functions Core Tools](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2) - the command-line tool that lets you develop, manage, and deploy, Azure Functions projects from your **local development environment**. It is used transparently by the VS Code extension - but you can use it directly from a terminal for a powerful command-line end-to-end developer experience! The Core Tools commands are organized into the following contexts:\\n \\n  * [`func`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-init) - commands to create and run functions locally\\n  * [`func azure`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-azure-functionapp-fetch-app-settings) - work with resource slike Azure Functions and Azure Storage\\n  * [`func durable`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-durable-delete-task-hub) - work with Durable Functions\\n  * [`func extensions`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-extensions-install) - manage extensions (default nuget.org)\\n  * [`func kubernetes`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-kubernetes-deploy) - work with Kubernetes and Azure Functions\\n  * [`func settings`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-settings-decrypt) - manage environment settings for local Functions host\\n  * [`func templates`](https://docs.microsoft.com/azure/azure-functions/functions-core-tools-reference?tabs=v2#func-templates-list) - list available templates\\n\\nLearn how to [work with Azure Functions Core Tools](https://docs.microsoft.com/azure/azure-functions/functions-run-local?tabs=v4%2Cmacos%2Ccsharp%2Cportal%2Cbash). Not only can it help with quick command execution, it can also be invaluable for debugging issues that may not always be visible or understandable in an IDE.\\n\\n## About Local Testing\\n\\nYou might have noticed that the scaffold also produced a `local.settings.json` file. What is that and why is it useful? By definition, the local.settings.json file _\\"stores app settings and settings used by local development tools. Settings in the local.settings.json file are used only when you\'re running your project locally.\\"_\\n\\nRead the guidance on [Code and test Azure Functions Locally](https://docs.microsoft.com/azure/azure-functions/functions-develop-local?WT.mc_id=javascript-74010-ninarasi#local-settings-file) to learn more about how to configure development environments locally, for your preferred programming language, to support testing and debugging on the local Functions runtime.\\n\\n## Exercise\\nWe made it! Now it\'s your turn!! Here are a few things you can try to apply what you learned and reinforce your understanding:\\n * Walk through this quickstart on your own!\\n * Then try the [Durable Functions Quickstart](https://docs.microsoft.com/azure/azure-functions/durable/quickstart-js-vscode?WT.mc_id=javascript-74010-ninarasi) as a stretch goal!\\n * And take the [Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi) to skill up in fun ways\\n\\n## Resources\\n\\nBookmark and visit the [#30DaysOfServerless Collection](https://aka.ms/30DaysOfServerless/collection). It\'s the one-stop collection of resources we will keep updated with links to relevant documentation and learning resources."},{"id":"04-functions-java","metadata":{"permalink":"/Cloud-Native/blog/04-functions-java","source":"@site/blog/2022-09-04/index.md","title":"04. Functions For Java Devs","description":"Introducing Azure Functions to the Java Developer. Learn how to create and deploy your first Java Functions app, and where you can go from here.","date":"2022-09-04T00:00:00.000Z","formattedDate":"September 4, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"java","permalink":"/Cloud-Native/blog/tags/java"},{"label":"serverless","permalink":"/Cloud-Native/blog/tags/serverless"}],"readingTime":7.465,"hasTruncateMarker":false,"authors":[{"name":"Rory Preddy","title":"Principal Cloud Advocate @Microsoft","url":"https://github.com/roryp","imageURL":"https://github.com/roryp.png","key":"rory"}],"frontMatter":{"slug":"04-functions-java","title":"04. Functions For Java Devs","authors":["rory"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Introducing Azure Functions to the Java Developer. Learn how to create and deploy your first Java Functions app, and where you can go from here.","tags":["serverless-september","azure-functions","java","serverless"]},"prevItem":{"title":"03. Build Your First Function","permalink":"/Cloud-Native/blog/03-functions-quickstart"},"nextItem":{"title":"05. Functions for JS Devs","permalink":"/Cloud-Native/blog/05-functions-js"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/04-functions-java\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Azure Functions: For The Java Developer\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions For The Java Developer\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/assets/images/post-kickoff-4a04995b44f0cc4a784fb4ab5e29cf7c.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/04-functions-java\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 4` of #30DaysOfServerless!\\n\\n_Yesterday_ we walked through an Azure Functions Quickstart with JavaScript, and used it to understand the general Functions App structure, tooling and developer experience. \\n\\n_Today_ we\'ll look at developing Functions app with a _different_ programming language - namely, **Java** - and explore developer guidance, tools and resources to build serverless Java solutions on Azure.\\n\\n---\\n\\n## What We\'ll Cover\\n * **Developer Guidance**: For Azure Functions on Java\\n * **Build & Deploy**: Our First Java Functions App\\n * **Usage Tutorials**: Integrate App with other Azure Services\\n * **Azure Samples**: Explore samples for other triggers, bindings\\n * **Exercise:** [Develop Java serverless Functions on Azure using Maven](https://docs.microsoft.com/learn/modules/develop-azure-functions-app-with-maven-plugin/) \\n * **Resources**: Check out [Java at Microsoft](https://developer.microsoft.com/java/) and use [Java Your Way](https://aka.ms/JavaYourWay)!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## Developer Guidance\\n\\nIf you\'re a Java developer new to serverless on Azure, start by exploring the [Azure Functions Java Developer Guide](https://docs.microsoft.com/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption). It covers: \\n * Quickstarts with [Visual Studio Code](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-java) and [Azure CLI](https://docs.microsoft.com/azure/azure-functions/create-first-function-cli-java?tabs=bash%2Cazure-cli%2Cbrowser)\\n * Building with Maven-based tooling for [Gradle](https://docs.microsoft.com/azure/azure-functions/functions-create-first-java-gradle), [Eclipse](https://docs.microsoft.com/azure/azure-functions/functions-create-maven-eclipse) & [IntelliJ IDEA](https://docs.microsoft.com/azure/azure-functions/functions-create-maven-intellij)\\n * Exploring [project scaffolding](https://docs.microsoft.com/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption#project-scaffolding) & [JDK runtimes](https://docs.microsoft.com/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption#jdk-runtime-availability-and-support) (Java 8 and Java 11)\\n * Using [Java annotations for Triggers, Bindings](https://docs.microsoft.com/azure/azure-functions/functions-reference-java?tabs=bash%2Cconsumption#triggers-and-annotations) - with [reference](https://docs.microsoft.com/java/api/com.microsoft.azure.functions.annotation?view=azure-java-stable) docs.\\n * Adopting [best practices](https://docs.microsoft.com/azure/azure-functions/functions-best-practices?tabs=java) for hosting, reliability and efficiency.\\n * Java [code samples](https://docs.microsoft.com/samples/azure-samples/azure-functions-samples-java/azure-functions-java/) and [integration tutorials](https://docs.microsoft.com/azure/azure-functions/functions-event-hub-cosmos-db?tabs=bash)\\n\\nIn this blog post, we\'ll dive into one quickstart, and discuss other resources briefly, for awareness! Do check out the recommended exercises and resources for self-study! \\n\\n---\\n\\n## My First Java Functions App\\n\\nIn today\'s post, we\'ll walk through the [Quickstart: Azure Functions](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-java) tutorial using Visual Studio Code. In the process, we\'ll setup our development environment with the relevant command-line tools and VS Code extensions to make building Functions app simpler.\\n\\n_Note: Completing this exercise may incur a a cost of a few USD cents based on your Azure subscription. Explore [pricing details](https://azure.microsoft.com/pricing/details/functions/#pricing) to learn more_.\\n\\nFirst, make sure you have your development environment setup and configured.\\n\\n:::info PRE-REQUISITES\\n\\n 1. **An Azure account with an active subscription** - [Create an account for free](https://azure.microsoft.com/free/?ref=microsoft.com&utm_source=microsoft.com&utm_medium=docs&utm_campaign=visualstudio)\\n 2. **The Java Development Kit, version 11 or 8.** - [Install](https://docs.microsoft.com/azure/developer/java/fundamentals/java-support-on-azure)\\n 3. **Apache Maven, version 3.0 or above.** - [Install](https://maven.apache.org/)\\n 4. **Visual Studio Code.** - [Install](https://code.visualstudio.com/)\\n 5. **The Java extension pack** - [Install](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack)\\n 6. **The Azure Functions extension for Visual Studio Code** - [Install](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions)\\n:::\\n\\n\\n### VS Code Setup\\n\\n:::note NEW TO VISUAL STUDIO CODE?\\nStart with the [Java in Visual Studio Code](https://code.visualstudio.com/docs/languages/java) tutorial to jumpstart your learning!\\n:::\\n\\nInstall the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) (shown below) to install 6 popular extensions to help development workflow from creation to testing, debugging, and deployment.\\n\\n![Extension Pack for Java](./img/java-extensions.png)\\n\\nNow, it\'s time to get started on our first Java-based Functions app.\\n\\n\\n\\n### 1. Create App\\n\\n1. Open a command-line terminal and create a folder for your project. Use the `code` command to launch Visual Studio Code from that directory as shown:\\n\\n    ```bash\\n    $ mkdir java-function-resource-group-api\\n    $ cd java-function-resource-group-api\\n    $ code .\\n    ```\\n\\n2. Open the Visual Studio Command Palette (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>p</kbd>) and select `Azure Functions: create new project` to kickstart the create workflow. Alternatively, you can click the Azure icon (on activity sidebar), to get the `Workspace` window,  click \\"+\\" and pick the \\"Create Function\\" option as shown below.\\n\\n    ![Screenshot of creating function in Azure from Visual Studio Code.](./img/32-create-new-project.png)\\n\\n3. This triggers a multi-step workflow. Fill in the information for each step as shown in the following prompts. **Important:** Start this process from an empty folder - the workflow will populate it with the scaffold for your Java-based Functions app.\\n\\n    |Prompt|Value|\\n    |--|--|\\n    |**Choose the directory location.**|You should either create a new folder or choose an empty folder for the project workspace. Don\'t choose a project folder that is already part of a workspace.|\\n    |**Select a language**| Choose `Java`.|\\n    |**Select a version of Java**| Choose `Java 11` or `Java 8`, the Java version on which your functions run in Azure. Choose a Java version that you\'ve verified locally. |\\n    | **Provide a group ID** | Choose `com.function`. |\\n    | **Provide an artifact ID** | Enter `myFunction`. |\\n    | **Provide a version** | Choose `1.0-SNAPSHOT`. |\\n    | **Provide a package name** | Choose `com.function`. |\\n    | **Provide an app name** | Enter `HttpExample`. |\\n    | **Select the build tool for Java project** | Choose `Maven`. |\\n\\n\\nVisual Studio Code uses the provided information and generates an Azure Functions project. You can view the local project files in the Explorer - it should look like this:\\n\\n![Azure Functions Scaffold For Java](./img/java-scaffold.png)\\n\\n### 2. Preview App\\n\\n\\nVisual Studio Code integrates with the Azure Functions Core tools to let you run this project on your local development computer before you publish to Azure.\\n\\n1. To build and run the application, use the following Maven command. You should see output similar to that shown below.\\n\\n  ```bash\\n  $ mvn clean package azure-functions:run\\n  ..\\n  ..\\n  Now listening on: http://0.0.0.0:7071\\n  Application started. Press Ctrl+C to shut down.\\n\\n  Http Functions:\\n\\n    HttpExample: [GET,POST] http://localhost:7071/api/HttpExample\\n  ...\\n  ```\\n\\n2. Copy the URL of your HttpExample function from this output to a browser and append the query string **?name=<YOUR_NAME>**, making the full URL something like `http://localhost:7071/api/HttpExample?name=Functions`. The browser should display a message that echoes back your query string value. The terminal in which you started your project also shows log output as you make requests.\\n\\n:::success \ud83c\udf89 CONGRATULATIONS\\nYou created and ran a function app locally!\\n:::\\n\\nWith the **Terminal** panel focused, press <kbd>Ctrl + C</kbd> to stop Core Tools and disconnect the debugger. After you\'ve verified that the function runs correctly on your local computer, it\'s time to use Visual Studio Code and Maven to publish and test the project on Azure.\\n\\n### 3. Sign into Azure\\n\\nBefore you can deploy, sign in to your Azure subscription.\\n\\n```bash\\naz login\\n```\\n\\nThe az login command signs you into your Azure account.\\n\\nUse the following command to deploy your project to a new function app.\\n\\n```bash\\nmvn clean package azure-functions:deploy\\n```\\n\\nWhen the creation is complete, the following Azure resources are created in your subscription:\\n\\n* Resource group. Named as java-functions-group.\\n* Storage account. Required by Functions. The name is generated randomly based on Storage account name requirements.\\n* Hosting plan. Serverless hosting for your function app.The name is *java-functions-app-service-plan*.\\n* Function app. A function app is the deployment and execution unit for your functions. The name is randomly generated based on your artifactId, appended with a randomly generated number.\\n\\n\\n### 4. Deploy App\\n\\n1. Back in the **Resources** area in the side bar, expand your subscription, your new function app, and **Functions**. Right-click (Windows) or <kbd>Ctrl -</kbd> click (macOS) the `HttpExample` function and choose **Execute Function Now...**.\\n\\n    ![Screenshot of executing function in Azure from Visual Studio Code.](./img/32-execute-function-now.png)\\n\\n2. In **Enter request body** you see the request message body value of `{ \\"name\\": \\"Azure\\" }`. Press Enter to send this request message to your function.\\n\\n3. When the function executes in Azure and returns a response, a notification is raised in Visual Studio Code.\\n\\nYou can also copy the complete Invoke URL shown in the output of the publish command into a browser address bar, appending the query parameter ?name=Functions. The browser should display similar output as when you ran the function locally.\\n\\n:::success \ud83c\udf89 CONGRATULATIONS\\nYou deployed your function app to Azure, and invoked it!\\n:::\\n\\n\\n### 5. Clean up\\n\\nUse the following command to delete the resource group and all its contained resources to avoid incurring further costs.\\n\\n```bash\\naz group delete --name java-functions-group\\n```\\n\\n## Next Steps\\n\\nSo, where can you go from here? The example above used a familiar `HTTP Trigger` scenario with a single Azure service (Azure Functions). Now, think about how you can build richer workflows by using other triggers and integrating with other Azure or third-party services.\\n\\n### Other Triggers, Bindings\\n\\nCheck out [Azure Functions Samples In Java](https://docs.microsoft.com/samples/azure-samples/azure-functions-samples-java/azure-functions-java/) for samples (and short use cases) that highlight other triggers - with code! This includes triggers to integrate with CosmosDB, Blob Storage, Event Grid, Event Hub, Kafka and more.\\n\\n### Scenario with Integrations\\n\\nOnce you\'ve tried out the samples, try building an end-to-end scenario by using these triggers to integrate seamlessly with other Services. Here are a couple of useful tutorials:\\n * Azure Functions with [Event Hub trigger and CosmosDB output binding](https://docs.microsoft.com/azure/azure-functions/functions-event-hub-cosmos-db?tabs=bash)\\n * GitHub Star Count app with [SignalR trigger](https://docs.microsoft.com/azure/azure-signalr/signalr-quickstart-azure-functions-java?toc=%2Fazure%2Fazure-functions%2Ftoc.json)\\n\\n\\n## Exercise\\n\\nTime to put this into action and validate your development workflow:\\n * Walk through this tutorial yourself, and deploy your first function!\\n * Complete the [Develop Java serverless Functions on Azure using Maven](https://docs.microsoft.com/learn/modules/develop-azure-functions-app-with-maven-plugin/) module\\n\\n## Resources\\n * [Azure Functions: Java Quickstarts](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-java)\\n * [Best Practices for Java Apps On Azure](https://docs.microsoft.com/learn/paths/best-practices-java-azure/)\\n * [Java at Microsoft](https://developer.microsoft.com/java/) \\n * [Java with EventHub Trigger and CosmosDB Binding](https://docs.microsoft.com/azure/azure-functions/functions-event-hub-cosmos-db?tabs=bash)\\n * [Java Integrations: Azure Functions and SignalR](https://docs.microsoft.com/azure/azure-signalr/signalr-quickstart-azure-functions-java?toc=%2Fazure%2Fazure-functions%2Ftoc.json)\\n * [Java Samples: Azure Functions](https://docs.microsoft.com/samples/browse/?products=azure-functions&languages=java)"},{"id":"05-functions-js","metadata":{"permalink":"/Cloud-Native/blog/05-functions-js","source":"@site/blog/2022-09-05/index.md","title":"05. Functions for JS Devs","description":"Introduction to Azure Functions, from core concepts to hello world!","date":"2022-09-05T00:00:00.000Z","formattedDate":"September 5, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"javascript","permalink":"/Cloud-Native/blog/tags/javascript"}],"readingTime":6.74,"hasTruncateMarker":false,"authors":[{"name":"Aaron Powell","title":"Principal Cloud Advocate @Microsoft","url":"https://github.com/aaronpowell","imageURL":"https://github.com/aaronpowell.png","key":"aaron"}],"frontMatter":{"slug":"05-functions-js","title":"05. Functions for JS Devs","authors":["aaron"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Introduction to Azure Functions, from core concepts to hello world!","tags":["serverless-september","30-days-of-serverless","azure-functions","azure-container-apps","javascript"]},"prevItem":{"title":"04. Functions For Java Devs","permalink":"/Cloud-Native/blog/04-functions-java"},"nextItem":{"title":"\ud83d\ude80 | Go Cloud Native with ACA","permalink":"/Cloud-Native/blog/zero2hero-aca-01"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/05-functions-js\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Azure Functions for JavaScript Developers\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions for JavaScript Developers\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/05-functions-js\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 5` of #30DaysOfServerless!\\n\\n_Yesterday_ we looked at Azure Functions from the perspective of a Java developer. _Today_, we\'ll do a similar walkthrough from the perspective of a JavaScript developer. \\n\\nAnd, we\'ll use this to explore another popular usage scenario for Azure Functions: **building a serverless HTTP API using JavaScript**. \\n\\nReady? Let\'s go.\\n\\n---\\n\\n## What We\'ll Cover\\n * Developer Guidance\\n * Create Azure Function with CLI\\n * Calling an external API\\n * Azure Samples & Scenarios for JS\\n * Exercise: Support searching\\n * Resources: For self-study!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## Developer Guidance\\n\\nIf you\'re a JavaScript developer new to serverless on Azure, start by exploring the [Azure Functions JavaScript Developers Guide](https://docs.microsoft.com/azure/azure-functions/functions-reference-node?tabs=v2-v3-v4-export%2Cv2-v3-v4-done%2Cv2%2Cv2-log-custom-telemetry%2Cv2-accessing-request-and-response%2Cwindows-setting-the-node-version&WT.mc_id=javascript-74010-cxa). It covers:\\n * Quickstarts for Node.js - using Visual Code, CLI or Azure Portal\\n * Guidance on hosting options and performance considerations\\n * Azure Functions [bindings](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=javascript#bindings-code-examples?WT.mc_id=javascript-74010-cxa) and ([code samples](https://docs.microsoft.com/samples/browse/?products=azure-functions&languages=javascript&WT.mc_id=javascript-74010-cxa)) for JavaScript\\n * Scenario examples - integrations with other Azure Services\\n\\n\\n### Node.js 18 Support \\n\\n:::info Node.js 18 Support (Public Preview)\\nAzure Functions support for Node.js 18 [entered Public Preview on Aug 31, 2022](https://azure.microsoft.com/updates/public-preview-nodejs-18-in-azure-functions/?WT.mc_id=javascript-74010-cxa) and is supported by the [Azure Functions v.4.x runtime!](https://docs.microsoft.com/azure/azure-functions/functions-versions?tabs=azure-cli%2Cin-process%2Cv4&pivots=programming-language-javascript&WT.mc_id=javascript-74010-cxa)\\n:::\\n\\nAs we continue to explore how we can use Azure Functions, today we\'re going to look at using JavaScript to create one, and we\'re going to be using the newly released **Node.js 18 support for Azure Functions** to make the most out of the platform. \\n\\nEnsure you have Node.js 18 and Azure Functions v4.x versions installed, along with a text editor (I\'ll use VS Code in this post), and a terminal, then we\'re ready to go.\\n\\n\\n\\n## Scenario: Calling The GitHub API\\n\\nThe application we\'re going to be building today will use the GitHub API to return a random commit message, so that we don\'t need to come up with one ourselves! After all, naming things can be really hard! \ud83e\udd23 \\n\\n\\n### Creating the Azure Function\\nTo create our Azure Function, we\'re going to use the [Azure Functions CLI](https://docs.microsoft.com/azure/azure-functions/functions-run-local?tabs=v4%2Cwindows%2Ccsharp%2Cportal%2Cbash&WT.mc_id=javascript-74010-cxa), which we can install using npm:\\n\\n```bash\\nnpm install --global azure-function-core-tools\\n```\\n\\nOnce that\'s installed, we can use the new `func` command to initalise our project:\\n\\n```bash\\nfunc init --worker-runtime node --language javascript\\n```\\n\\nWhen running `func init` we can either provide the `worker-runtime` and `language` as arguments, or use the menu system that the tool will provide us. For brevity\'s stake, I\'ve used the arguments here, specifying that we want `node` as the runtime and `javascript` as the language, but you could change that to `typescript` if you\'d prefer to use TypeScript.\\n\\nOnce the `init` command is completed, you should have a `.vscode` folder, and the files `.gitignore`, `host.json`, `local.settings.json`, and `package.json`.\\n\\n![Files generated by func init](./img/light/01.png#gh-light-mode-only)![Files generated by func init](./img/01.png#gh-dark-mode-only)\\n\\n### Adding a HTTP Trigger\\n\\nWe have an empty Functions app so far, what we need to do next is create a Function that it will run, and we\'re going to make a HTTP Trigger Function, which is a Function that responds to HTTP requests. We\'ll use the `func new` command to create that:\\n\\n```bash\\nfunc new --template \\"HTTP Trigger\\" --name \\"get-commit-message\\"\\n```\\n\\nWhen this completes, we\'ll have a folder for the Function, using the name we provided, that contains the files`function.json` and `index.js`. Let\'s open the `function.json` to understand it a little bit:\\n\\n```json\\n{\\n  \\"bindings\\": [\\n    {\\n      \\"authLevel\\": \\"function\\",\\n      \\"type\\": \\"httpTrigger\\",\\n      \\"direction\\": \\"in\\",\\n      \\"name\\": \\"req\\",\\n      \\"methods\\": [\\n        \\"get\\",\\n        \\"post\\"\\n      ]\\n    },\\n    {\\n      \\"type\\": \\"http\\",\\n      \\"direction\\": \\"out\\",\\n      \\"name\\": \\"res\\"\\n    }\\n  ]\\n}\\n```\\n\\nThis file is used to tell Functions about the Function that we\'ve created and what it does, so it knows to handle the appropriate events. We have a `bindings` node which contains the event bindings for our Azure Function. The first binding is using the `type` `httpTrigger`, which indicates that it\'ll be executed, or _triggered_, by a HTTP event, and the `methods` indicates that it\'s listening to both **GET** and **POST** (you can change this for the right HTTP methods that you want to support). The HTTP request information will be bound to a property in the Functions context called `req`, so we can access query strings, the request body, etc.\\n\\nThe other binding we have has the direction of `out`, meaning that it\'s something that the Function will _return_ to the called, and since this is a HTTP API, the `type` is `http`, indicating that we\'ll return a HTTP response, and that response will be on a property called `res` that we add to the Functions context.\\n\\nLet\'s go ahead and start the Function and call it:\\n\\n```bash\\nfunc start\\n```\\n\\n![Starting the Function](./img/light/02.png#gh-light-mode-only)![Starting the Function](./img/02.png#gh-dark-mode-only)\\n\\n\\nWith the Function started, access the endpoint `http://localhost:7071/api/get-commit-message` via a browser or using `cURL`:\\n\\n```bash\\ncurl http://localhost:7071/api/get-commit-message\\\\?name\\\\=ServerlessSeptember\\n```\\n\\n![Hello from Azure Functions](./img/light/03.png#gh-light-mode-only)![Hello from Azure Functions](./img/03.png#gh-dark-mode-only)\\n\\n:::success \ud83c\udf89 CONGRATULATIONS\\nYou created and ran a JavaScript function app locally!\\n:::\\n\\n### Calling an external API\\n\\nIt\'s time to update the Function to do what we want to do - call the GitHub Search API and get some commit messages. The endpoint that we\'ll be calling is [https://api.github.com/search/commits?q=language:javascript](https://api.github.com/search/commits?q=language:javascript).\\n\\n_Note: The GitHub API is [rate limited](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting) and this sample will call it unauthenticated, so be aware of that in your own testing._\\n\\nTo call this API, we\'ll leverage the newly released [`fetch` support in Node 18](https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental) and `async`/`await`, to make for a very clean Function.\\n\\nOpen up the `index.js` file, and delete the contents of the existing `Function`, so we have a empty one:\\n\\n```javascript\\nmodule.exports = async function (context, req) {\\n\\n}\\n```\\n\\n_The default template uses CommonJS, but you can use ES Modules with Azure Functions if you prefer._\\n\\nNow we\'ll use `fetch` to call the API, and unpack the JSON response:\\n\\n```javascript\\nmodule.exports = async function (context, req) {\\n    const res = await fetch(\\"https://api.github.com/search/commits?q=language:javascript\\");\\n    const json = await res.json();\\n    const messages = json.items.map(item => item.commit.message);\\n    context.res = {\\n        body: {\\n            messages\\n        }\\n    };\\n}\\n```\\n\\nTo send a response to the client, we\'re setting the `context.res` property, where `res` is the name of the output binding in our `function.json`, and giving it a body that contains the commit messages.\\n\\nRun `func start` again, and call the endpoint:\\n\\n```bash\\ncurl http://localhost:7071/api/get-commit-message\\n```\\n\\nThe you\'ll get some commit messages:\\n\\n![A series of commit messages from the GitHub Search API](./img/light/04.png#gh-light-mode-only)![A series of commit messages from the GitHub Search API](./img/04.png#gh-dark-mode-only)\\n\\n\\n:::success \ud83c\udf89 CONGRATULATIONS\\nThere we go, we\'ve created an Azure Function which is used as a proxy to another API, that we call (using native `fetch` in Node.js 18) and from which we return a subset of the JSON payload.\\n:::\\n\\n\\n## Next Steps\\n\\n### Other Triggers, Bindings\\n\\nThis article focused on using the HTTPTrigger and relevant bindings, to build a serverless API using Azure Functions. How can you explore other supported bindings, with code samples to illustrate usage?\\n * Start with the [Bindings](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=javascript#bindings-code-examples?WT.mc_id=javascript-74010-cxa) documentation to get a list of supported triggers/bindings for JavaScript\\n * Explore the [Azure serverless community library](https://www.serverlesslibrary.net/?language=JavaScript) and [Azure Samples](https://docs.microsoft.com/samples/browse/?products=azure-functions&languages=javascript&WT.mc_id=javascript-74010-cxa) resources by technology.\\n\\n### Scenarios with Integrations\\n\\nOnce you\'ve tried out the samples, try building an end-to-end scenario by using these triggers to integrate seamlessly with other services. Here are some suggestions:\\n * [Azure Queue storage trigger and bindings](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-queue?tabs=in-process%2Cextensionv5%2Cextensionv3&pivots=programming-language-javascript&WT.mc_id=javascript-74010-cxa)\\n * [Show GitHub start count with Azure SignalR service](https://docs.microsoft.com/azure/azure-signalr/signalr-quickstart-azure-functions-javascript?toc=%2Fazure%2Fazure-functions%2Ftoc.json&WT.mc_id=javascript-74010-cxa)\\n * [Deploy a GraphQL API as an Azure Function](https://docs.microsoft.com/azure/developer/javascript/how-to/with-web-app/graphql/azure-function-hello-world?tabs=visualstudiocode&WT.mc_id=javascript-74010-cxa)\\n\\n\\n## Exercise: Support searching\\n\\nThe GitHub Search API allows you to provide search parameters via the `q` query string. In this sample, we hard-coded it to be `language:javascript`, but as a follow-on exercise, expand the Function to allow the caller to provide the search terms as a query string to the Azure Function, which is passed to the GitHub Search API. Hint - have a look at the `req` argument.\\n\\n## Resources\\n\\n- [Public preview of Node.js 18 for Azure Functions](https://azure.microsoft.com/updates/public-preview-nodejs-18-in-azure-functions/?WT.mc_id=javascript-74010-cxa)\\n- [`fetch` support in Node.js 18](https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental)\\n- [Refactor Node.js and Express APIs to Serverless APIs with Azure Functions](https://docs.microsoft.com/learn/modules/shift-nodejs-express-apis-serverless/?WT.mc_id=javascript-74010-cxa)"},{"id":"zero2hero-aca-01","metadata":{"permalink":"/Cloud-Native/blog/zero2hero-aca-01","source":"@site/blog/zero-to-hero/2022-09-06-containerapps.md","title":"\ud83d\ude80 | Go Cloud Native with ACA","description":"In this article, we discuss how Azure Container Apps is purpose-built to support cloud native applications.","date":"2022-09-06T00:00:00.000Z","formattedDate":"September 6, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"zero-to-hero","permalink":"/Cloud-Native/blog/tags/zero-to-hero"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"dapr","permalink":"/Cloud-Native/blog/tags/dapr"}],"readingTime":7.595,"hasTruncateMarker":false,"authors":[{"name":"Kendall Roden","title":"Azure Container Apps PM @Microsoft","url":"https://github.com/kendallroden","imageURL":"https://github.com/kendallroden.png","key":"kendall"}],"frontMatter":{"slug":"zero2hero-aca-01","title":"\ud83d\ude80 | Go Cloud Native with ACA","authors":["kendall"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","containerapps","serverless","concepts"],"image":"./img/banner.png","description":"In this article, we discuss how Azure Container Apps is purpose-built to support cloud native applications.","tags":["serverless-september","zero-to-hero","azure-functions","azure-container-apps","dapr"]},"prevItem":{"title":"05. Functions for JS Devs","permalink":"/Cloud-Native/blog/05-functions-js"},"nextItem":{"title":"\ud83d\ude80 | Durable Entities Walkthrough","permalink":"/Cloud-Native/blog/zero2hero-func-02"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/zero2hero-aca-01\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#ZeroToHero: Go Cloud Native With Azure Container Apps\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#ZeroToHero: Go Cloud Native With Azure Container Apps\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/serverless-zero2hero.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://techcommunity.microsoft.com/t5/apps-on-azure-blog/go-cloud-native-with-azure-container-apps/ba-p/3616407\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 6` of #30DaysOfServerless!\\n\\nToday, we have a special set of posts from our [Zero To Hero \ud83d\ude80](/serverless-september/ZeroToHero) initiative, featuring blog posts authored by our Product Engineering teams for #ServerlessSeptember. _Posts were originally published on the [Apps on Azure](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/go-cloud-native-with-azure-container-apps/ba-p/3616407?WT.mc_id=javascript-74010-cxa) blog on Microsoft Tech Community._\\n\\n---\\n\\n## What We\'ll Cover\\n * Defining Cloud Native\\n * Introduction to Azure Container Apps\\n * Dapr In Azure Container Apps\\n * Conclusion\\n\\n![](./img/zero-to-hero-kendall.png)\\n\\n---\\n\\n\\n## Defining Cloud Native \\n \\nWhile I\u2019m positive I\u2019m not the first person to ask this, I think it\u2019s an appropriate way for us to kick off this article: **\u201cHow many developers does it take to define cloud native?\u201d** I hope you aren\u2019t waiting for a punch line because I seriously want to know your thoughts (drop your perspectives in the comments..) but if you ask me, the limit does not exist!\\n\\nA quick online search of the topic returns a laundry list of articles, e-books, twitter threads, etc. all trying to nail down the one true definition. While diving into the rabbit hole of cloud native, you will inevitably find yourself on the Cloud Native Computing Foundation (CNCF) site. The CNCF is part of the Linux Foundation and aims to make \\"cloud native computing ubiquitous\\" through deep open source project and community involvement. The CNCF has also published arguably the most popularized definition of cloud native which begins with the following statement:\\n\\n> \u201cCloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds.\\"\\n\\nOver the past four years, my day-to-day work has been driven primarily by the surging demand for application containerization and the drastic adoption of Kubernetes as the de-facto container orchestrator. Customers are eager to learn and leverage patterns, practices and technologies that enable building \\"loosely coupled systems that are resilient, manageable, and observable\\". Enterprise developers at these organizations are being tasked with rapidly deploying event-driven, horizontally-scalable, polyglot services via repeatable, code-to-cloud pipelines.\\n\\nWhile building cloud native solutions can enable rapid innovation, the transition to adopting a cloud native architectural approach comes with a steep learning curve and a new set of considerations. In a document published by Microsoft called What is Cloud Native?, there are a few key areas highlighted to aid customers in the adoption of best practices for building modern, portable applications which I will summarize below:\\n \\n**Cloud infrastructure**\\n\\n * Cloud native applications leverage cloud infrastructure and make use of Platform-as-a-service offerings\\n * Cloud native applications depend on highly-elastic infrastructure with automatic scaling, self-healing, and monitoring capabilities\\n \\n**Modern application design**\\n * Cloud native applications should be constructed using principles outlined in the 12 factor methodology\\n \\n**Microservices**\\n * Cloud native applications are typically composed of microservices where each core function, or service, is built and deployed independently\\n \\n**Containers**\\n\\n * Cloud native applications are typically deployed using containers as a packaging mechanism where an application\'s code and dependencies are bundled together for consistency of deployment\\n * Cloud native applications leverage container orchestration technologies- primarily Kubernetes- for achieving capabilities such as workload scheduling, self-healing, auto-scale, etc.\\n \\n**Backing services**\\n * Cloud native applications are ideally stateless workloads which retrieve and store data in data stores external to the application hosting infrastructure. Cloud providers like Azure provide an array of backing data services which can be securely accessed from application code and provide capabilities for ensuring application data is highly-available\\n \\n**Automation**\\n* Cloud native solutions should use deployment automation for backing cloud infrastructure via versioned, parameterized Infrastructure as Code (IaC) templates which provide a consistent, repeatable process for provisioning cloud resources.\\n* Cloud native solutions should make use of modern CI/CD practices and pipelines to ensure successful, reliable infrastructure and application deployment.\\n \\n\\n## Azure Container Apps\\n \\nIn many of the conversations I\'ve had with customers that involve talk of Kubernetes and containers, the topics of cost-optimization, security, networking, and reducing infrastructure and operations inevitably arise. I personally have yet to meet with any customers eager to have their developers get more involved with infrastructure concerns.\\n\\nOne of my former colleagues, Jeff Hollan, made a statement while appearing on a 2019 episode of The Cloud Native Show where he shared his perspective on Cloud Native:\\n\\n> \\"When I think about cloud native... it\'s writing applications in a way where you are specifically thinking about the benefits the cloud can provide... to me, serverless is the perfect realization of that because the only reason you can write serverless applications is because the cloud exists.\\"\\n\\nI must say that I agree with Jeff\'s perspective. In addition to optimizing development practices for the cloud native world, reducing infrastructure exposure and operations is equally as important to many organizations and can be achieved as a result of cloud platform innovation.\\n\\nIn May of 2022, Microsoft announced the general availability of Azure Container Apps. Azure Container Apps provides customers with the ability to run microservices and containerized applications on a serverless, consumption-based platform. \\n\\nFor those interested in taking advantage of the open source ecosystem while reaping the benefits of a managed platform experience, Container Apps run on Kubernetes and provides a set of managed open source projects embedded directly into the platform including the Kubernetes Event Driven Autoscaler (KEDA), the Distributed Application Runtime (Dapr) and Envoy.\\n\\n![Azure Kubernetes Service vs. Azure Container Apps](https://techcommunity.microsoft.com/t5/image/serverpage/image-id/401287i073CFBD50CB3A0B9/image-size/large?v=v2&px=999&WT.mc_id=javascript-74010-cxa)\\n\\nContainer apps provides other cloud native features and capabilities in addition to those above including, but not limited to: \\n\\n * [Revisions](https://docs.microsoft.com/azure/container-apps/application-lifecycle-management?WT.mc_id=javascript-74010-cxa): immutable snapshot representative of a specific version of a container app which can take advantage of the [managed traffic splitting capability](https://docs.microsoft.com/azure/container-apps/revisions-manage?tabs=bash&WT.mc_id=javascript-74010-cxa) \\n * [Health probes](https://docs.microsoft.com/azure/container-apps/health-probes?tabs=arm-template?WT.mc_id=javascript-74010-cxa): Based on [Kubernetes health probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/?WT.mc_id=javascript-74010-cxa) with support for Readiness, Liveness and Startup \\n * [Built-in authentication](https://docs.microsoft.com/azure/container-apps/authentication-openid?WT.mc_id=javascript-74010-cxa)\\n * [Managed Identity](https://docs.microsoft.com/azure/container-apps/managed-identity?tabs=portal%2Cdotnet&WT.mc_id=javascript-74010-cxa)\\n * [Custom domain names and certificates](https://docs.microsoft.com/azure/container-apps/custom-domains-certificates?WT.mc_id=javascript-74010-cxa)\\n * [Virtual Network injection](https://docs.microsoft.com/azure/container-apps/networking?WT.mc_id=javascript-74010-cxa)\\n * [Platform observability](https://docs.microsoft.com/azure/container-apps/observability?tabs=bash&WT.mc_id=javascript-74010-cxa) : log streaming, console connect, Azure monitor \\n \\nThe ability to dynamically scale and support growing numbers of users, events, and requests is one of the core requirements for most cloud native, distributed applications. Azure Container Apps is purpose-built with this and other cloud native tenants in mind. \\n\\n![What can you build with Azure Container Apps?](https://techcommunity.microsoft.com/t5/image/serverpage/image-id/401522iACA9C8FFC49FE161/image-size/large?v=v2&px=999)\\n\\n## Dapr in Azure Container Apps\\n \\nAs a quick personal note before we dive into this section I will say I am a bit bias about Dapr. When Dapr was first released, I had an opportunity to immediately get involved and became an early advocate for the project. It is created by developers for developers, and solves tangible problems customers architecting distributed systems face:\\n\\n:::info HOW DO I\\n * integrate with external systems that my app has to react and respond to?\\n * create event driven apps which reliably send events from one service to another?\\n * observe the calls and events between my services to diagnose issues in production?\\n * access secrets securely from within my application?\\n * discover other services and call methods on them?\\n * prevent committing to a technology early and have the flexibility to swap out an alternative based on project or environment changes?\\n:::\\n \\nWhile existing solutions were in the market which could be used to address some of the concerns above, there was not a lightweight, CNCF-backed project which could provide a unified approach to solve the more fundamental ask from customers: \\"How do I make it easy for developers to build microservices based on cloud native best practices?\\"\\n\\n\\n:::success Enter Dapr!\\n\\nThe [Distributed Application Runtime (Dapr)](https://dapr.io/) provides APIs that simplify microservice connectivity. Whether your communication pattern is service to service invocation or pub/sub messaging, Dapr helps you write resilient and secured microservices. By letting Dapr\u2019s sidecar take care of the complex challenges such as service discovery, message broker integration, encryption, observability, and secret management, you can focus on business logic and keep your code simple.\\"\\n:::\\n\\nThe Container Apps platform provides a managed and supported Dapr integration which eliminates the need for deploying and managing the Dapr OSS project. In addition to providing managed upgrades, the platform also exposes a simplified Dapr interaction model to increase developer productivity and reduce the friction required to leverage Dapr capabilities. While the Dapr integration makes it easier for customers to adopt cloud native best practices in container apps it is not required to make use of the container apps platform. \\n\\n![Image on Dapr](https://techcommunity.microsoft.com/t5/image/serverpage/image-id/401284iA1296A6F33D804B2/image-size/large?v=v2&px=999)\\n\\nFor additional insight into the dapr integration visit aka.ms/aca-dapr. \\n\\n \\n\\n## Conclusion\\n \\nBacked by and integrated with powerful cloud native technologies, Azure Container Apps strives to make developers productive, while reducing the operational overhead and learning curve that typically accompanies adopting a cloud-native strategy. \\n\\nIf you are interested in building resilient, portable and highly-scalable apps visit [Azure Container Apps | Microsoft Azure](https://azure.microsoft.com/services/container-apps/) today!\\n\\n\\n:::info ASK THE EXPERT: LIVE Q&A\\nThe Azure Container Apps team will answer questions live on **September 29**. \\n * [Sign up to attend](https://reactor.microsoft.com/reactor/events/17004/?WT.mc_id=javascript-74010-ninarasi) for live Q&A with the team\\n * [submit your questions](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=ask+the+expert&template=---ask-the-expert-.md&title=%5BAsk+The+Expert%5D++) ahead of time, for prioritization.\\n:::"},{"id":"zero2hero-func-02","metadata":{"permalink":"/Cloud-Native/blog/zero2hero-func-02","source":"@site/blog/zero-to-hero/2022-09-06-azurefunctions.md","title":"\ud83d\ude80 | Durable Entities Walkthrough","description":"Durable Entities are a special type of Azure Functions that allow you to implement stateful objects in a serverless environment.","date":"2022-09-06T00:00:00.000Z","formattedDate":"September 6, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"zero-to-hero","permalink":"/Cloud-Native/blog/tags/zero-to-hero"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"dapr","permalink":"/Cloud-Native/blog/tags/dapr"}],"readingTime":7.465,"hasTruncateMarker":false,"authors":[{"name":"David Justo","title":"Software Engineer @Microsoft","url":"https://github.com/davidmrdavid","imageURL":"https://github.com/davidmrdavid.png","key":"davidjusto"}],"frontMatter":{"slug":"zero2hero-func-02","title":"\ud83d\ude80 | Durable Entities Walkthrough","authors":["davidjusto"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","containerapps","serverless","concepts"],"image":"./img/zero-to-hero-david.png","description":"Durable Entities are a special type of Azure Functions that allow you to implement stateful objects in a serverless environment.","tags":["serverless-september","zero-to-hero","azure-functions","azure-container-apps","dapr"]},"prevItem":{"title":"\ud83d\ude80 | Go Cloud Native with ACA","permalink":"/Cloud-Native/blog/zero2hero-aca-01"},"nextItem":{"title":"06. Functions for .NET Devs","permalink":"/Cloud-Native/blog/06-functions-dotnet"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/zero2hero-func-02\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#ZeroToHero: A Walkthrough of Durable Entities\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#ZeroToHero: A Walkthrough of Durable Entities\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/serverless-zero2hero.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://techcommunity.microsoft.com/t5/apps-on-azure-blog/a-walkthrough-of-durable-entities/ba-p/3616832\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 6` of #30DaysOfServerless!\\n\\n\\nToday, we have a special set of posts from our [Zero To Hero \ud83d\ude80](/serverless-september/ZeroToHero) initiative, featuring blog posts authored by our Product Engineering teams for #ServerlessSeptember. _Posts were originally published on the [Apps on Azure](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/a-walkthrough-of-durable-entities/ba-p/3616832?WT.mc_id=javascript-74010-cxa) blog on Microsoft Tech Community._\\n\\n---\\n\\n## What We\'ll Cover\\n * What are Durable Entities\\n * Some Background\\n * A Programming Model\\n * Entities for a Micro-Blogging Platform\\n\\n![](./img/zero-to-hero-david.png)\\n\\n---\\n \\n\\n[Durable Entities](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-entities?tabs=csharp&WT.mc_id=javascript-74010-cxa) are a special type of Azure Function that allow you to implement stateful objects in a serverless environment. They make it easy to introduce stateful components to your app without needing to manually persist data to external storage, so you can focus on your business logic. We\u2019ll demonstrate their power with a real-life example in the last section.\\n\\n## Entities 101: Some Background\\n \\nProgramming Durable Entities feels a lot like object-oriented programming, except that these \u201cobjects\u201d exist in a distributed system. Like objects, each Entity instance has a unique identifier, i.e. an entity ID that can be used to read and manipulate their internal state. Entities define a list of operations that constrain how their internal state is managed, like an object interface.\\n\\nSome experienced readers may realize that Entities sound a lot like an implementation of the Actor Pattern. For a discussion of the relationship between Entities and Actors, please refer to [this documentation](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-entities?tabs=csharp#comparison-with-virtual-actors).\\n\\nEntities are a part of the Durable Functions Extension, an extension of Azure Functions that empowers programmers with stateful abstractions for serverless, such as Orchestrations (i.e. workflows).\\n\\n[Durable Functions](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-overview?tabs=csharp) is available in most Azure Functions runtime environments: .NET, Node.js, Python, PowerShell, and Java (preview). For this article, we\u2019ll focus on the C# experience, but note that Entities are also available in Node.js and Python; their availability in other languages is underway.\\n\\n\\n## Entities 102: The programming model\\n \\nImagine you want to implement a simple Entity that just counts things. Its interface allows you to get the current count, add to the current count, and to reset the count to zero.\\n\\nIf you implement this in an object-oriented way, you\u2019d probably define a class (say \u201cCounter\u201d) with a method to get the current count (say \u201cCounter.Get\u201d), another to add to the count (say \u201cCounter.Add\u201d), and another to reset the count (say \u201cCounter.Reset\u201d). Well, the implementation of an Entity in C# is not that different from this sketch:\\n\\n\\n```\\n[JsonObject(MemberSerialization.OptIn)] \\npublic class Counter \\n{ \\n    [JsonProperty(\\"value\\")] \\n    public int Value { get; set; } \\n \\n    public void Add(int amount)  \\n    { \\n        this.Value += amount; \\n    } \\n\\n    public Task Reset()  \\n    { \\n        this.Value = 0; \\n        return Task.CompletedTask; \\n    } \\n \\n    public Task<int> Get()  \\n    { \\n        return Task.FromResult(this.Value); \\n    } \\n    [FunctionName(nameof(Counter))] \\n    public static Task Run([EntityTrigger] IDurableEntityContext ctx) \\n        => ctx.DispatchAsync<Counter>(); \\n\\n} \\n```\\n\\nWe\u2019ve defined a class named Counter, with an internal count stored in the variable \u201cValue\u201d which is manipulated through the \u201cAdd\u201d and \u201cReset\u201d methods, and which can be read via \u201cGet\u201d.\\n\\nThe \u201cRun\u201d method is simply boilerplate required for the Azure Functions framework to interact with the object we\u2019ve defined \u2013 it\u2019s the method that the framework calls internally when it needs to load the Entity object. When `DispatchAsync` is called, the Entity and its corresponded state (the last count in \u201cValue\u201d) is loaded from storage. Again, this is mostly just boilerplate: your Entity\u2019s business logic lies in the rest of the class.\\n\\nFinally, the Json annotation on top of the class and the Value field tells the Durable Functions framework that the \u201cValue\u201d field is to be durably persisted as part of the durable state on each Entity invocation. If you were to annotate other class variables with JsonProperty, they would also become part of the managed state.\\n\\n \\n\\n## Entities for a micro-blogging platform\\n \\nWe\u2019ll try to implement a simple micro-blogging platform, a la Twitter. Let\u2019s call it \u201cChirper\u201d. In Chirper, users write chirps (i.e tweets), they can follow, and unfollow other users, and they can read the chirps of users they follow.\\n\\n### Defining Entity\\nJust like in OOP, it\u2019s useful to begin by identifying what are the stateful agents of this scenario. In this case, users have state (who they follow and their chirps), and chirps have state in the form of their content. So, we could model these stateful agents as Entities!\\n\\nBelow is a potential way to implement a User for Chirper as an Entity:\\n\\n```\\n  [JsonObject(MemberSerialization = MemberSerialization.OptIn)] \\n  public class User: IUser  \\n  { \\n      [JsonProperty] \\n      public List<string> FollowedUsers { get; set; }  = new List<string>(); \\n\\n      public void Add(string user) \\n      { \\n          FollowedUsers.Add(user); \\n      } \\n\\n      public void Remove(string user) \\n      { \\n          FollowedUsers.Remove(user); \\n      } \\n\\n      public Task<List<string>> Get() \\n      { \\n          return Task.FromResult(FollowedUsers); \\n      } \\n      // note: removed boilerplate \u201cRun\u201d method, for conciseness. \\n  } \\n```\\n\\nIn this case, our Entity\u2019s internal state is stored in \u201cFollowedUsers\u201d which is an array of accounts followed by this user. The operations exposed by this entity allow clients to read and modify this data: it can be read by \u201cGet\u201d, a new follower can be added via \u201cAdd\u201d, and a user can be unfollowed via \u201cRemove\u201d.\\n\\nWith that, we\u2019ve modeled a Chirper\u2019s user as an Entity! Recall that Entity instances each has a unique ID, so we can consider that unique ID to correspond to a specific user account.\\n\\nWhat about chirps? Should we represent them as Entities as well? That would certainly be valid. However, we would then need to create a mapping between an entity ID and every chirp entity ID that this user wrote.\\n\\nFor demonstration purposes, a simpler approach would be to create an Entity that stores the list of all chirps authored by a given user; call it UserChirps. Then, we could fix each User Entity to share the same entity ID as its corresponding UserChirps Entity, making client operations easier.\\n\\nBelow is a simple implementation of UserChirps:\\n\\n```\\n  [JsonObject(MemberSerialization = MemberSerialization.OptIn)] \\n  public class UserChirps : IUserChirps \\n  { \\n      [JsonProperty] \\n      public List<Chirp> Chirps { get; set; } = new List<Chirp>(); \\n\\n      public void Add(Chirp chirp) \\n      { \\n          Chirps.Add(chirp); \\n      } \\n\\n      public void Remove(DateTime timestamp) \\n      { \\n          Chirps.RemoveAll(chirp => chirp.Timestamp == timestamp); \\n      } \\n\\n      public Task<List<Chirp>> Get() \\n      { \\n          return Task.FromResult(Chirps); \\n      } \\n\\n      // Omitted boilerplate \u201cRun\u201d function \\n  } \\n```\\n\\nHere, our state is stored in Chirps, a list of user posts. Our operations are the same as before: Get, Read, and Add. It\u2019s the same pattern as before, but we\u2019re representing different data.\\n\\nTo put it all together, let\u2019s set up Entity clients to generate and manipulate these Entities according to some REST API.\\n\\n### Interacting with Entity\\n\\nBefore going there, let\u2019s talk briefly about how you can interact with an Entity. Entity interactions take one of two forms -- [calls and signals](https://docs.microsoft.com/azure/azure-functions/durable/durable-functions-entities?tabs=csharp#access-entities):\\n\\nCalling an entity is a two-way communication. You send an operation message to the entity and then wait for the response message before you continue. The response can be a result value or an error.\\nSignaling an entity is a one-way (fire-and-forget) communication. You send an operation message but don\u2019t wait for a response. You have the reassurance that the message will be delivered eventually, but you don\u2019t know when and don\u2019t know what the response is.\\nFor example, when you read the state of an Entity, you are performing a \u201ccall\u201d interaction. When you record that a user has followed another, you may choose to simply signal it.\\n\\nNow say user with a given userId (say \u201cdurableFan99\u201d ) wants to post a chirp. For this, you can write an HTTP endpoint to signal the UserChips entity to record that chirp. We can leverage the HTTP Trigger functionality from Azure Functions and pair it with an entity client binding that signals the Add operation of our Chirp Entity:\\n\\n```\\n[FunctionName(\\"UserChirpsPost\\")] \\npublic static async Task<HttpResponseMessage> UserChirpsPost( \\n    [HttpTrigger(AuthorizationLevel.Function, \\"post\\", Route = \\"user/{userId}/chirps\\")] \\n    HttpRequestMessage req, \\n    DurableClient] IDurableClient client, \\n    ILogger log,  \\n    string userId) \\n    { \\n        Authenticate(req, userId); \\n        var chirp = new Chirp() \\n        { \\n            UserId = userId, \\n            Timestamp = DateTime.UtcNow, \\n            Content = await req.Content.ReadAsStringAsync(), \\n        }; \\n        await client.SignalEntityAsync<IUserChirps>(userId, x => x.Add(chirp)); \\n        return req.CreateResponse(HttpStatusCode.Accepted, chirp); \\n    } \\n``` \\n\\nFollowing the same pattern as above, to get all the chirps from a user, you could read the status of your Entity via `ReadEntityStateAsync`, which follows the call-interaction pattern as your client expects a response:\\n\\n```\\n[FunctionName(\\"UserChirpsGet\\")] \\npublic static async Task<HttpResponseMessage> UserChirpsGet( \\n  [HttpTrigger(AuthorizationLevel.Function, \\"get\\", Route = \\"user/{userId}/chirps\\")] HttpRequestMessage req, \\n  [DurableClient] IDurableClient client, \\n  ILogger log, \\n  string userId) \\n  { \\n\\n      Authenticate(req, userId); \\n      var target = new EntityId(nameof(UserChirps), userId); \\n      var chirps = await client.ReadEntityStateAsync<UserChirps>(target); \\n      return chirps.EntityExists \\n            ? req.CreateResponse(HttpStatusCode.OK, chirps.EntityState.Chirps) \\n            : req.CreateResponse(HttpStatusCode.NotFound); \\n  } \\n```\\n\\nAnd there you have it! To play with a complete implementation of Chirper, you can try out our sample in the [Durable Functions extension repo](https://github.com/Azure/azure-functions-durable-extension/tree/dev/samples/entitites-csharp/Chirper).  \\n\\nThank you!\\n \\n:::info\\nThanks for following along, and we hope you find Entities as useful as we do! If you have questions or feedback, please file issues in the repo above or tag us [@AzureFunctions](https://twitter.com/AzureFunctions) on Twitter\\n:::"},{"id":"06-functions-dotnet","metadata":{"permalink":"/Cloud-Native/blog/06-functions-dotnet","source":"@site/blog/2022-09-06/index.md","title":"06. Functions for .NET Devs","description":"#30DaysOfServerless: Azure Functions for the .NET Developer","date":"2022-09-06T00:00:00.000Z","formattedDate":"September 6, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"dotnet","permalink":"/Cloud-Native/blog/tags/dotnet"}],"readingTime":9.5,"hasTruncateMarker":false,"authors":[{"name":"Mike James","title":"Cloud Advocate @Microsoft","url":"https://github.com/MikeCodesDotNet","imageURL":"https://github.com/MikeCodesDotNet.png","key":"mike"},{"name":"Matt Soucoup","title":"Principal Cloud Advocate @Microsoft","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"}],"frontMatter":{"slug":"06-functions-dotnet","title":"06. Functions for .NET Devs","authors":["mike","matt"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"#30DaysOfServerless: Azure Functions for the .NET Developer","tags":["serverless-september","30-days-of-serverless","azure-functions","dotnet"]},"prevItem":{"title":"\ud83d\ude80 | Durable Entities Walkthrough","permalink":"/Cloud-Native/blog/zero2hero-func-02"},"nextItem":{"title":"07. Functions for Python Devs","permalink":"/Cloud-Native/blog/07-functions-python"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/functions-1\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/06-functions-dotnet\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 6` of #30DaysOfServerless!\\n\\nThe theme for this week is Azure Functions. Today we\'re going to talk about why Azure Functions are a great fit for .NET developers.\\n\\n---\\n\\n## What We\'ll Cover\\n\\n* What is serverless computing? \\n* How does Azure Functions fit in?\\n* Let\'s build a simple Azure Function in .NET\\n* Developer Guide, Samples & Scenarios\\n* Exercise: Explore the [Create Serverless Applications](https://docs.microsoft.com/training/paths/create-serverless-applications/?WT.mc_id=javascript-74010-cxa) path.\\n* Resources: For self-study!\\n\\n![A banner image that has the title of this article with the author\'s photo and a drawing that summarizes the demo application.](./img/banner.png)\\n\\n---\\n\\nThe leaves are changing colors and there\'s a chill in the air, or for those lucky folks in the Southern Hemisphere, the leaves are budding and a warmth is in the air. Either way, that can only mean one thing - it\'s **Serverless September!\ud83c\udf42** So today, we\'re going to take a look at Azure Functions - what they are, and _why they\'re a great fit for .NET developers_.\\n\\n\\n## What is serverless computing?\\n\\nFor developers, serverless computing means you write highly compact individual functions that do one thing - and run in the cloud. These functions [are triggered by some external event](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=csharp&WT.mc_id=javascript-74010-cxa). That event could be a record being inserted into a database, a file uploaded into BLOB storage, a timer interval elapsed, or even a simple HTTP request.\\n\\nBut... servers are still definitely involved! What has changed from other types of cloud computing is that the idea and **ownership of the server** has been abstracted away.\\n\\nA lot of the time you\'ll hear folks refer to this as [Functions as a Service or FaaS](/blog/02-functions-intro). The defining characteristic is all you need to do is put together your application logic. Your code is going to be invoked in response to events - and the cloud provider takes care of everything else. You literally get to focus on only the business logic you need to run in response to something of interest - **no worries about hosting**.\\n\\nYou do not need to worry about wiring up the plumbing between the service that originates the event and the serverless runtime environment. The cloud provider will handle the mechanism to call your function in response to whatever event you chose to have the function react to. And it passes along any data that is relevant to the event to your code.\\n\\nAnd here\'s a really neat thing. **You only pay for the time the serverless function is running.** So, if you have a function that is triggered by an HTTP request, and you rarely get requests to your function, you would rarely pay.\\n\\n### How does Azure Functions fit in?\\n\\nMicrosoft\'s [Azure Functions](https://docs.microsoft.com/azure/azure-functions/?WT.mc_id=javascript-74010-cxa) is a modern serverless architecture, offering event-driven cloud computing that is easy for developers to use. It provides a way to run small pieces of code or Functions in the cloud without developers having to worry themselves about the infrastructure or platform the Function is running on.\\n\\nThat means we\'re only concerned about writing the logic of the Function. And we can write that logic in our choice of languages... like C#. We are also able to add packages from NuGet to Azure Functions\u2014this way, we don\'t have to reinvent the wheel and can use well-tested libraries.\\n\\nAnd the Azure Functions runtime takes care of a ton of neat stuff for us, like passing in information about the event that caused it to kick off - in a strongly typed variable. It also [\\"binds\\"](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?WT.mc_id=javascript-74010-cxa) to other services, like Azure Storage, we can easily access those services from our code without having to worry about new\'ing them up.\\n\\n## Let\'s build an Azure Function!\\n\\n### Scaffold the Function\\n\\nDon\'t worry about having an Azure subscription or even being connected to the internet\u2014we can develop and debug Azure Functions locally using either [Visual Studio](https://docs.microsoft.com/azure/azure-functions/functions-develop-vs?tabs=in-process&WT.mc_id=javascript-74010-cxa) or [Visual Studio Code](https://docs.microsoft.com/azure/azure-functions/functions-develop-vs-code?tabs=csharp&WT.mc_id=javascript-74010-cxa)!\\n\\nFor this example, I\'m going to use Visual Studio Code to build up a Function that responds to an [HTTP trigger](https://docs.microsoft.com/azure/azure-functions/functions-bindings-http-webhook-trigger?WT.mc_id=javascript-74010-cxa) and then writes a message to an [Azure Storage Queue](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-queue-output?WT.mc_id=javascript-74010-cxa).\\n\\n![Diagram of the how the Azure Function will use the HTTP trigger and the Azure Storage Queue Binding](img/flow.png)\\n\\nThe incoming HTTP call is the **trigger** and the message queue the Function writes to is an **output binding**. Let\'s have at it!\\n\\n:::info\\nYou do need to have some tools downloaded and installed to get started. First and foremost, you\'ll need [Visual Studio Code](https://code.visualstudio.com/). Then you\'ll need the [Azure Functions extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions&WT.mc_id=javascript-74010-cxa) for VS Code to do the development with. Finally, you\'ll need the [Azurite Emulator](https://docs.microsoft.com/azure/storage/common/storage-use-azurite?tabs=visual-studio-code&WT.mc_id=javascript-74010-cxa) installed as well\u2014this will allow us to write to a message queue locally.\\n\\nOh! And of course, [.NET 6](https://docs.microsoft.com/dotnet/core/tools/?WT.mc_id=javascript-74010-cxa)!\\n:::\\n\\nNow with all of the tooling out of the way, let\'s write a Function!\\n\\n\\n1. Fire up Visual Studio Code. Then, from the command palette, type: `Azure Functions: Create New Project`\\n\\n  ![Screenshot of create a new function dialog in VS Code](img/1-create-new.png)\\n\\n2. Follow the steps as to which directory you want to create the project in and which .NET runtime and language you want to use.\\n\\n  ![Screenshot of VS Code prompting which directory and language to use](img/2-language.png)\\n\\n3. Pick **.NET 6** and **C#**.\\n\\n  It will then prompt you to pick the folder in which your Function app resides and then select a template.\\n\\n  ![Screenshot of VS Code prompting you to pick the Function trigger template](img/3-selecttemplate.png)\\n\\n  Pick the **HTTP trigger** template. When prompted for a name, call it: **PostToAQueue**.\\n\\n\\n### Execute the Function Locally\\n\\n1. After giving it a namespace, it prompts for an authorization level\u2014pick Anonymous. **Now we have a Function!** Let\'s go ahead and hit F5 and see it run!\\n\\n\\n:::info\\nAfter the templates have finished installing, you may get a prompt to download additional components\u2014these are NuGet packages. Go ahead and do that.\\n:::\\n\\nWhen it runs, you\'ll see the Azure Functions logo appear in the Terminal window with the URL the Function is located at. Copy that link.\\n\\n![Screenshot of the Azure Functions local runtime starting up](img/5-start.png)\\n\\n 2. Type the link into a browser, adding a `name` parameter as shown in this example: `http://localhost:7071/api/PostToAQueue?name=Matt`. The Function will respond with a message. You can even set breakpoints in Visual Studio Code and step through the code!\\n\\n### Write To Azure Storage Queue\\n\\nNext, we\'ll get this HTTP trigger Function to write to a local Azure Storage Queue. First we need to add the Storage NuGet package to our project. In the terminal, type:\\n\\n```bash\\ndotnet add package Microsoft.Azure.WebJobs.Extensions.Storage\\n```\\n\\nThen set a configuration setting to tell the Function runtime where to find the Storage. Open up local.settings.json and set \\"AzureWebJobsStorage\\" to \\"UseDevelopmentStorage=true\\". The full file will look like:\\n\\n```json\\n{\\n  \\"IsEncrypted\\": false,\\n  \\"Values\\": {\\n    \\"AzureWebJobsStorage\\": \\"UseDevelopmentStorage=true\\",\\n    \\"AzureWebJobsDashboard\\": \\"\\"\\n  }\\n}\\n```\\n\\nThen create a new class within your project. This class will hold nothing but properties. Call it whatever you want and add whatever properties you want to it. I called mine TheMessage and added an Id and Name properties to it.\\n\\n```csharp\\npublic class TheMessage\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n}\\n```\\n\\nFinally, change your PostToAQueue Function, so it looks like the following:\\n\\n```csharp\\n\\npublic static class PostToAQueue\\n{\\n    [FunctionName(\\"PostToAQueue\\")]        \\n    public static async Task<IActionResult> Run(\\n        [HttpTrigger(AuthorizationLevel.Anonymous, \\"get\\", \\"post\\", Route = null)] HttpRequest req,\\n        [Queue(\\"demoqueue\\", Connection = \\"AzureWebJobsStorage\\")] IAsyncCollector<TheMessage> messages,\\n        ILogger log)\\n    {        \\n        string name = req.Query[\\"name\\"];\\n\\n        await messages.AddAsync(new TheMessage { Id = System.Guid.NewGuid().ToString(), Name = name });\\n\\n        return new OkResult();\\n    }\\n}\\n\\n```\\n\\nNote the addition of the `messages` variable. This is telling the Function to use the storage connection we specified before via the `Connection` property. And it is also specifying which queue to use in that storage account, in this case `demoqueue`.\\n\\nAll the code is doing is pulling out the `name` from the query string, new\'ing up a new `TheMessage` class and adding that to the `IAsyncCollector` variable.\\n\\n**That will add the new message to the queue!**\\n\\nMake sure Azurite is started within VS Code (both the queue and blob emulators). Run the app and send the same GET request as before: `http://localhost:7071/api/PostToAQueue?name=Matt`.\\n\\nIf you have the Azure Storage Explorer installed, you can browse your local Queue and see the new message in there!\\n\\n![Screenshot of Azure Storage Explorer with the new message in the queue](img/7-new-queue.png)\\n\\n## Summing Up\\n\\nWe had a quick look at what Microsoft\'s serverless offering, Azure Functions, is comprised of. It\'s a full-featured FaaS offering that enables you to write functions in your language of choice, including reusing packages such as those from NuGet.\\n\\nA highlight of Azure Functions is the way they are triggered and bound. The triggers define how a Function starts, and bindings are akin to input and output parameters on it that correspond to external services. The best part is that the Azure Function runtime takes care of maintaining the connection to the external services so you don\'t have to worry about new\'ing up or disposing of the connections yourself. \\n\\nWe then wrote a quick Function that gets triggered off an HTTP request and then writes a query string parameters from that request into a local Azure Storage Queue.\\n\\n## What\'s Next\\n\\nSo, where can you go from here? \\n\\nThink about how you can **build real-world scenarios by integrating other Azure services**. For example, you could use serverless integrations to build a workflow where the input payload received using an HTTP Trigger, is now stored in Blob Storage (output binding), which in turn triggers another service (e.g., Cognitive Services) that processes the blob and returns an enhanced result. \\n\\n_Keep an eye out for an update to this post where we walk through a scenario like this with code_. Check out the  resources below to help you get started on your own.\\n\\n\\n## Exercise\\n\\nThis brings us close to the end of Week 1 with Azure Functions. We\'ve learned core concepts, built and deployed our first Functions app, and explored quickstarts and scenarios for different programming languages. So, what can you do to explore this topic on your own?\\n\\n* Explore the [Create Serverless Applications](https://docs.microsoft.com/training/paths/create-serverless-applications/?WT.mc_id=javascript-74010-cxa) learning path which has several modules that explore Azure Functions integrations with various services.\\n* Take up the [Cloud Skills Challenge](https://docs.microsoft.com/training/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi) and complete those modules in a fun setting where you compete with peers for a spot on the leaderboard!\\n\\nThen come back tomorrow as we wrap up the week with a discussion on end-to-end scenarios, a recap of what we covered this week, and a look at what\'s ahead next week.\\n\\n\\n\\n## Resources\\n\\nStart here for developer guidance in getting started with Azure Functions as a .NET/C# developer:\\n\\n* [Develop C# class library functions using Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-dotnet-class-library?tabs=v2%2Ccmd&WT.mc_id=javascript-74010-cxa). \\n* [Using C# to develop .NET isolated process functions](https://docs.microsoft.com/azure/azure-functions/dotnet-isolated-process-guide?WT.mc_id=javascript-74010-cxa).\\n* [Quickstart: Create your first C# function in Azure using Visual Studio](https://docs.microsoft.com/azure/azure-functions/functions-create-your-first-function-visual-studio?tabs=in-process&WT.mc_id=javascript-74010-cxa).\\n\\nThen learn about [supported Triggers and Bindings](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=csharp#bindings-code-examples?WT.mc_id=javascript-74010-cxa) for C#, with code snippets to show how they are used. \\n\\nFinally, explore [Azure Functions samples for C#](https://docs.microsoft.com/samples/browse/?products=azure-functions&languages=csharp&WT.mc_id=javascript-74010-cxa) and learn to implement serverless solutions. Examples include:\\n * Using Azure Functions to [check storage of Azure Cognitive Services on a schedule](https://docs.microsoft.com/samples/azure-samples/azure-search-dotnet-samples/check-storage-usage/?WT.mc_id=javascript-74010-cxa) using Timer Triggers.\\n* Using Azure Functions to [implement a ToDo Backend API](https://docs.microsoft.com/samples/azure-samples/azure-sql-binding-func-dotnet-todo/todo-backend-dotnet-azure-sql-bindings-azure-functions/?WT.mc_id=javascript-74010-cxa) illustrating Azure SQL integration."},{"id":"07-functions-python","metadata":{"permalink":"/Cloud-Native/blog/07-functions-python","source":"@site/blog/2022-09-07/index.md","title":"07. Functions for Python Devs","description":"Let\'s build a wildfire detection site and application using Azure Functions for Python, with Timer Trigger and CosmosDB bindings!","date":"2022-09-07T00:00:00.000Z","formattedDate":"September 7, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"python","permalink":"/Cloud-Native/blog/tags/python"}],"readingTime":6.865,"hasTruncateMarker":false,"authors":[{"name":"Jay Miller","title":"Senior Cloud Advocate @Microsoft","url":"https://github.com/kjaymiller","imageURL":"https://github.com/kjaymiller.png","key":"jay"}],"frontMatter":{"slug":"07-functions-python","title":"07. Functions for Python Devs","authors":["jay"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Let\'s build a wildfire detection site and application using Azure Functions for Python, with Timer Trigger and CosmosDB bindings!","tags":["serverless-september","30-days-of-serverless","azure-functions","python"]},"prevItem":{"title":"06. Functions for .NET Devs","permalink":"/Cloud-Native/blog/06-functions-dotnet"},"nextItem":{"title":"08. Functions + Serverless On Azure","permalink":"/Cloud-Native/blog/08-functions-azure"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog07-functions-python\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Azure Functions For Python developers\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions For Python developers\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/07-functions-python\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 7` of #30DaysOfServerless!\\n\\nOver the past couple of days, we\'ve explored Azure Functions from the perspective of specific programming languages. Today we\'ll continue that trend by looking at Python - exploring the Timer Trigger and CosmosDB binding, and showcasing integration with a FastAPI-implemented web app.\\n\\nReady? Let\'s go.\\n\\n---\\n\\n## What We\'ll Cover\\n * **Developer Guidance**: Azure Functions On Python\\n * **Build & Deploy**: Wildfire Detection Apps with Timer Trigger + CosmosDB\\n * **Demo: My Fire Map App**: Using FastAPI and Azure Maps to visualize data\\n * **Next Steps**: Explore Azure Samples\\n * **Exercise**: Try this yourself!\\n * **Resources**: For self-study!\\n\\n![](./img/banner.png)\\n\\n\\n---\\n\\n## Developer Guidance\\nIf you\'re a Python developer new to serverless on Azure, start with the [Azure Functions Python Developer Guide](https://docs.microsoft.com/azure/azure-functions/functions-reference-python?tabs=asgi%2Capplication-level&WT.mc_id=javascript-74010-cxa). It covers:\\n\\n* Quickstarts with Visual Studio Code and Azure CLI\\n* Adopting best practices for hosting, reliability and efficiency.\\n* Tutorials showcasing Azure automation, image classification and more\\n* Samples showcasing Azure Functions features for Python developers\\n\\nNow let\'s dive in and build our first Python-based Azure Functions app.\\n\\n---\\n\\n## Detecting Wildfires Around the World?\\n\\nI live in California which is known for lots of wildfires. I wanted to create a proof of concept for developing an application that could let me know if there was a wildfire detected near my home. \\n\\nNASA has a few satelites orbiting the Earth that can detect wildfires. These satelites take scans of the radiative heat in and use that to determine the likelihood of a wildfire. NASA updates their information about every 30 minutes and it can take about four hours for to scan and process information. \\n\\n![Fire Point Near Austin, TX](img/Fire%20Point%20in%20Austin,%20TX.png)\\n\\nI want to get the information but I don\'t want to ping NASA or another service every time I check.\\n\\nWhat if I occaisionally download all the data I need? Then I can ping that as much as I like.\\n\\nI can create a script that does just that. Any time I say _I can create a script_ that is a verbal queue for me to consider using an Azure function. With the function being ran in the cloud, I can ensure the script runs even when I\'m not at my computer. \\n\\n### How the Timer Trigger Works\\n\\nThis function will utilize the Timer Trigger. This means Azure will call this function to run at a scheduled interval. This isn\'t the only way to keep the data in sync, but we know that arcgis, the service that we\'re using says that data is only updated every 30 minutes or so.\\n\\nTo learn more about the TimerTrigger as a concept, check out the [Azure Functions documentation around Timers](https://docs.microsoft.com/azure/azure-functions/functions-bindings-timer?tabs=in-process&pivots=programming-language-python&WT.mc_id=javascript-74010-cxa).\\n\\nWhen we create the function we tell it a few things like where the script will live (in our case in `__init__.py`) the type and direction and notably _often it should run_. We specify the timer using `schedule\\": <The CRON INTERVAL>`. For us we\'re using `0 0,30 * * *` which means every 30 minutes at the hour and half-hour.\\n\\n```json\\n{\\n  \\"scriptFile\\": \\"__init__.py\\",\\n  \\"bindings\\": [\\n    {\\n      \\"name\\": \\"reqTimer\\",\\n      \\"type\\": \\"timerTrigger\\",\\n      \\"direction\\": \\"in\\",\\n      \\"schedule\\": \\"0 0,30 * * * *\\"\\n    }\\n  ]\\n}\\n```\\n\\nNext, we create the code that runs when the function is called.\\n\\n### Connecting to the Database and our Source\\n\\n> Disclaimer: The data that we\'re pulling is for educational purposes only. This is not meant to be a production level application. You\'re welcome play with this project but ensure that you\'re using the data [in compliance with Esri](https://www.esri.com/legal/overview).\\n\\n\\nOur function does two important things. \\n\\n1. It pulls data from ArcGIS that meets the parameters\\n2. It stores that pulled data into our database\\n\\nIf you want to check out the code in its entirety, check out the [GitHub repository](https://github.com/kjaymiller/fire-map).\\n\\nPulling the data from ArcGIS is easy. We can use the [ArcGIS Python API](https://developers.arcgis.com/python/). Then, we need to load the service layer. Finally we query that layer for the specific data.\\n\\n```python\\ndef write_new_file_data(gis_id:str, layer:int=0) -> FeatureSet:\\n    \\"\\"\\"Returns a JSON String of the Dataframe\\"\\"\\"\\n    fire_data = g.content.get(gis_id) \\n    feature = fire_data.layers[layer] # Loading Featured Layer from ArcGIS\\n    q = feature.query(\\n        where=\\"confidence >= 65 AND hours_old  <= 4\\", #The filter for the query\\n        return_distince_values=True,\\n        out_fields=\\"confidence, hours_old\\", # The data we want to store with our points\\n        out_sr=4326, # The spatial reference of the data\\n    )\\n    return q   \\n```\\n\\nThen we need to store the data in our database.\\n\\nWe\'re using [Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/introduction?WT.mc_id=javascript-74010-cxa) for this. COSMOSDB is a NoSQL database, which means that the data looks a lot like a python dictionary as it\'s JSON. This means that we don\'t need to worry about converting the data into a format that can be stored in a relational database.\\n\\nThe second reason is that Cosmos DB is tied into the Azure ecosystem so that if we want to create functions Azure events around it, we can.\\n\\nOur script grabs the information that we pulled from ArcGIS and stores it in our database. \\n\\n```python\\nasync with CosmosClient.from_connection_string(COSMOS_CONNECTION_STRING) as client:\\n    container = database.get_container_client(container=CONTAINER)\\n    for record in data:\\n        await container.create_item(\\n            record,\\n            enable_automatic_id_generation=True,\\n        )\\n```\\n\\nIn our code each of these functions live in their own space. So in the main function we focus solely on what azure functions will be doing. The script that gets called is `__init__.py`. There we\'ll have the function call the other functions running.\\n\\nWe created another function called `load_and_write` that does all the work outlined above. `__init__.py` will call that.\\n\\n```python\\nasync def main(reqTimer: func.TimerRequest) -> None:\\n    database=database\\n    container=container\\n    await update_db.load_and_write(gis_id=GIS_LAYER_ID, database=database, container=container)\\n```\\n\\nThen we deploy the function to Azure. I like to use VS Code\'s Azure Extension but you can also deploy it [a few other ways](https://docs.microsoft.com/azure/azure-functions/functions-deployment-technologies?WT.mc_id=javascript-74010-cxa).\\n\\n![Deploying the function via VS Code](img/Deploy%20to%20Function%20App%20using%20VS%20Code.png)\\n\\nOnce the function is deployed we can load the Azure portal and see a ping whenever the function is called.\\n![The pings correspond to the Function being ran](img/Function%20Execution%20Count.png)\\n\\nWe can also see the data now living in the datastore.\\n![Document in Cosmos DB](img/Data%20Explorer.png)\\n\\n### It\'s in the Database, Now What?\\nNow the real fun begins. We just loaded the last bit of fire data into a database. We can now query that data and serve it to others. \\n\\nAs I mentioned before, our Cosmos DB data is also stored in Azure, which means that we can deploy Azure Functions [to trigger when new data is added](https://docs.microsoft.com/azure/azure-functions/functions-bindings-cosmosdb-v2?tabs=in-process%2Cfunctionsv2&pivots=programming-language-python&WT.mc_id=javascript-74010-cxa). Perhaps you can use this to check for fires near you and use a [Logic App](https://docs.microsoft.com/azure/logic-apps/logic-apps-overview?WT.mc_id=javascript-74010-cxa) to send an alert to your phone or email.\\n\\nAnother option is to create a web application that talks to the database and displays the data. I\'ve created an example of this using FastAPI \u2013 <https://jm-func-us-fire-notify.azurewebsites.net>.\\n\\n![Website that Checks for Fires](img/Check%20for%20Fires.gif)\\n\\n---\\n\\n## Next Steps\\n\\nThis article showcased the Timer Trigger and the HTTP Trigger for Azure Functions in Python. Now try exploring other triggers and bindings by browsing [Bindings code samples for Python](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=python#bindings-code-examples&WT.mc_id=javascript-74010-cxa) and [Azure Functions samples for Python](https://docs.microsoft.com/samples/browse/?products=azure-functions&WT.mc_id=javascript-74010-cxa&languages=python&WT.mc_id=javascript-74010-cxa)\\n\\nOnce you\'ve tried out the samples, you may want to explore more advanced integrations or extensions for serverless Python scenarios. Here are some suggestions:\\n * [Develop Python worker extensions for Azure Functions](https://docs.microsoft.com/azure/azure-functions/develop-python-worker-extensions?tabs=windows%2Cpypi&WT.mc_id=javascript-74010-cxa) and publish to PyPI or GitHub.\\n * [Connect Azure Functions to Azure Storage](https://docs.microsoft.com/azure/azure-functions/functions-add-output-binding-storage-queue-cli?pivots=programming-language-python&tabs=in-process%2Cbash%2Cbrowser&WT.mc_id=javascript-74010-cxa) using the CLI\\n * [Create Real-Time alerts with Azure Functions and SignalR Service](https://docs.microsoft.com/azure/azure-signalr/signalr-quickstart-azure-functions-python?toc=%2Fazure%2Fazure-functions%2Ftoc.json&WT.mc_id=javascript-74010-cxa)\\n\\nAnd check out the resources for more tutorials to build up your Azure Functions skills.\\n\\n\\n## Exercise\\n\\nI encourage you to fork [the repository](https://github.com/kjaymiller/fire-map) and try building and deploying it yourself! You can see the TimerTrigger and a HTTPTrigger building the website. \\n\\nThen try extending it. Perhaps if wildfires are a big thing in your area, you can use some of the data available in [Planetary Computer](https://planetarycomputer.microsoft.com?WT.mc_id=javascript-74010-cxa) to check out some other datasets.\\n\\n\\n## Resources\\n\\n * [Azure For Functions Python Developer Guide](https://docs.microsoft.com/azure/azure-functions/functions-reference-python?tabs=asgi%2Capplication-level&WT.mc_id=javascript-74010-cxa)\\n * [Python Quickstart: Create Your First Function App](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-python?WT.mc_id=javascript-74010-cxa)\\n * [Use FastAPI Framework With Azure Functions](https://docs.microsoft.com/samples/azure-samples/fastapi-on-azure-functions/azure-functions-python-create-fastapi-app/?WT.mc_id=javascript-74010-cxa)\\n * [Use Flask Framework with Azure Functions](https://docs.microsoft.com/samples/azure-samples/flask-app-on-azure-functions/azure-functions-python-create-flask-app/?WT.mc_id=javascript-74010-cxa)\\n * [Tutorial: Apply ML models in Azure Functions with Python and TensorFlow](https://docs.microsoft.com/azure/azure-functions/functions-machine-learning-tensorflow?tabs=bash&WT.mc_id=javascript-74010-cxa)"},{"id":"08-functions-azure","metadata":{"permalink":"/Cloud-Native/blog/08-functions-azure","source":"@site/blog/2022-09-08/index.md","title":"08. Functions + Serverless On Azure","description":"Introduction to Azure Functions, from core concepts to hello world!","date":"2022-09-08T00:00:00.000Z","formattedDate":"September 8, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"serverless-hacks","permalink":"/Cloud-Native/blog/tags/serverless-hacks"},{"label":"zero-to-hero","permalink":"/Cloud-Native/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/blog/tags/ask-the-expert"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"azure-event-grid","permalink":"/Cloud-Native/blog/tags/azure-event-grid"},{"label":"azure-logic-apps","permalink":"/Cloud-Native/blog/tags/azure-logic-apps"},{"label":"serverless-e2e","permalink":"/Cloud-Native/blog/tags/serverless-e-2-e"}],"readingTime":4.965,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Devanshi Joshi","title":"Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://pbs.twimg.com/profile_images/1520928730230652928/00BaK5xn_400x400.jpg","key":"devanshi"}],"frontMatter":{"slug":"08-functions-azure","title":"08. Functions + Serverless On Azure","authors":["nitya","devanshi"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Introduction to Azure Functions, from core concepts to hello world!","tags":["serverless-september","30-days-of-serverless","serverless-hacks","zero-to-hero","ask-the-expert","azure-functions","azure-container-apps","azure-event-grid","azure-logic-apps","serverless-e2e"]},"prevItem":{"title":"07. Functions for Python Devs","permalink":"/Cloud-Native/blog/07-functions-python"},"nextItem":{"title":"09. Hello, Azure Container Apps","permalink":"/Cloud-Native/blog/09-aca-fundamentals"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/functions-1\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Azure Functions Fundamentals\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/08-functions-azure\\" />\\n</head>\\n\\n---\\n:::warning SEP 08: CHANGE IN PUBLISHING SCHEDULE\\n\\nStarting from Week 2 (Sep 8), we\'ll be publishing blog posts in _batches_ rather than on a daily basis, so you can read a series of related posts together. _Don\'t want to miss updates?_ Just [subscribe to the feed](https://azure.github.io/Cloud-Native/blog/rss.xml)\\n:::\\n\\n---\\n\\nWelcome to `Day 8` of #30DaysOfServerless!\\n\\nThis marks the end of our [Week 1 Roadmap](https://azure.github.io/Cloud-Native/serverless-september/30DaysOfServerless/#azure-functions) focused on Azure Functions!! Today, we\'ll do a quick recap of all #ServerlessSeptember activities in Week 1, set the stage for Week 2 - and leave you with some excellent tutorials you should explore to build more advanced scenarios with Azure Functions.\\n\\nReady? Let\'s go.\\n\\n---\\n\\n\\n## What We\'ll Cover\\n * Azure Functions: Week 1 Recap\\n * Advanced Functions: Explore Samples\\n * End-to-End: Serverless Hacks & Cloud Skills\\n * What\'s Next: Hello, Containers & Microservices\\n * Challenge: [Complete the Learning Path](https://docs.microsoft.com/training/paths/create-serverless-applications/?WT.mc_id=javascript-74010-cxa)\\n\\n![](./img/banner.png)\\n\\n---\\n\\n\\n## Week 1 Recap: #30Days & Functions\\n\\nCongratulations!! We made it to the end of Week 1 of #ServerlessSeptember. Let\'s recap what we learned so far:\\n\\n * In [Core Concepts](/blog/02-functions-intro) we looked at where Azure Functions fits into the serverless options available on Azure. And we learned about key concepts like Triggers, Bindings, Custom Handlers and Durable Functions.\\n * In [Build Your First Function](/blog/03-functions-quickstart) we looked at the tooling options for creating Functions apps, testing them locally, and deploying them to Azure - as we built and deployed our first Functions app.\\n * In the next 4 posts, we explored new Triggers, Integrations, and Scenarios - as we looked at building Functions Apps in Java, JavaScript, .NET and Python.\\n * And in the Zero-To-Hero series, we learned about [Durable Entities](/blog/zero2hero-func-02) - and how we can use them to create _stateful_ serverless solutions using a [Chirper Sample](https://github.com/Azure/azure-functions-durable-extension/tree/dev/samples/entitites-csharp/Chirper) as an example scenario.\\n\\nThe illustrated roadmap below summarizes what we covered each day this week, as we bring our **Functions-as-a-Service** exploration to a close.\\n\\n![](./../../static/img/banners/roadmap-Week1.png)\\n\\n---\\n\\n## Advanced Functions: Code Samples\\n\\nSo, now that we\'ve got our first Functions app under our belt, and validated our local development setup for tooling, where can we go next? A good next step is to explore different triggers and bindings, that drive richer end-to-end scenarios. For example:\\n\\n * [**Integrate Functions with Azure Logic Apps**](https://docs.microsoft.com/azure/azure-functions/functions-twitter-email?WT.mc_id=javascript-74010-cxa) - we\'ll discuss Azure Logic Apps in Week 3. For now, think of it as a [workflow automation](https://docs.microsoft.com/azure/logic-apps/logic-apps-overview?WT.mc_id=javascript-74010-cxa) tool that lets you integrate seamlessly with other supported Azure services to drive an end-to-end scenario. In this tutorial, we set up a workflow connecting Twitter (get tweet) to Azure Cognitive Services (analyze sentiment) - and use that to trigger an Azure Functions app to send email about the result.\\n * [**Integrate Functions with Event Grid**](https://docs.microsoft.com/azure/event-grid/resize-images-on-storage-blob-upload-event?tabs=nodejsv10&WT.mc_id=javascript-74010-cxa) - we\'ll discuss Azure Event Grid in Week 3. For now, think of it as an eventing service connecting event sources (publishers) to event handlers (subscribers) at cloud scale. In this tutorial, we handle a common use case - a workflow where loading an image to Blob Storage triggers an Azure Functions app that implements a [resize function](https://github.com/Azure-Samples/storage-blob-resize-function-node), helping automatically generate thumbnails for the uploaded image.\\n * [**Integrate Functions with CosmosDB and SignalR**](https://docs.microsoft.com/training/modules/automatic-update-of-a-webapp-using-azure-functions-and-signalr/?WT.mc_id=javascript-74010-cxa) to bring real-time push-based notifications to your web app. It achieves this by using a Functions app that is triggered by changes in a CosmosDB backend, causing it to broadcast that update (_push notification_ to connected web clients over SignalR, in real time.\\n\\nWant more ideas? Check out the [Azure Samples for Functions](https://docs.microsoft.com/samples/browse/?products=azure-functions&WT.mc_id=javascript-74010-cxa) for implementations, and browse the [Azure Architecture Center](https://docs.microsoft.com/azure/architecture/browse/?expanded=azure&products=azure-functions&WT.mc_id=javascript-74010-cxa) for reference architectures from real-world scenarios that involve Azure Functions usage.\\n\\n---\\n\\n## E2E Scenarios: Hacks & Cloud Skills\\n\\n_Want to systematically work your way through a single End-to-End scenario involving Azure Functions alongside other serverless support technologies?_ Check out the [Serverless Hacks](/serverless-september/ServerlessHacks) activity happening during #ServerlessSeptember, and learn to build this **\\"Serverless Tollbooth Application\\"** in a series of 10 challenges. Check out the [video series for a reference solution in .NET](https://aka.ms/serverless-september/videos) and sign up for weekly office hours to join peers and discuss your solutions or challenges.\\n\\n![](./../../static/img/banners/wth-serverless.png)\\n\\n_Or perhaps you prefer to learn core concepts with code in a structured learning path?_ We have that covered. Check out the [12-module](https://docs.microsoft.com/training/paths/create-serverless-applications/?WT.mc_id=javascript-74010-cxa) **\\"Create Serverless Applications\\"** course from Microsoft Learn which walks your through concepts, one at a time, with code. Even better - [sign up for the free Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi) and _complete the same path_ (in under 30 days) but this time, with the added fun of competing against your peers for a spot on a leaderboard, and swag.\\n\\n---\\n\\n## What\'s Next? Hello, Cloud Native!\\n\\nSo where to next? In Week 2 we turn our attention from _Functions-as-a-Service_ to building more complex backends using _Containers and Microservices_. We\'ll focus on two core technologies - [Azure Container Apps](https://docs.microsoft.com/azure/container-apps/?WT.mc_id=javascript-74010-ninarasi) and [Dapr](https://docs.dapr.io/?WT.mc_id=javascript-74010-ninarasi) (Distributed Application Runtime) - both key components of a broader vision around **[Building Cloud Native Applications in Azure](https://azure.microsoft.com/solutions/cloud-native-apps/?WT.mc_id=javascript-74010-ninarasi)**.\\n\\nWhat is Cloud Native you ask? \\n\\nFortunately for you, we have an excellent introduction in our Zero-to-Hero article on [Go Cloud Native with Azure Container Apps](/blog/zero2hero-aca-01) - that explains the **5 pillars of Cloud Native** and highlights the value of Azure Container Apps (scenarios) and Dapr (sidecar architecture) for simplified microservices-based solution with auto-scale capability. Prefer a visual summary? Here\'s an illustrate guide to that article for convenience.\\n\\n![Go Cloud Native](../../static/img/artwork/Go-Cloud-Native.png) [**Download a higher resolution version of the image**](../../static/img/artwork/Go-Cloud-Native-orig.png)\\n\\n---\\n\\n## [Take The Challenge](https://docs.microsoft.com/learn/challenges?id=b950cd7a-d456-46ab-81ba-3bd1ad86dc1c&WT.mc_id=javascript-74010-ninarasi)\\n\\nWe typically end each post with an exercise or activity to reinforce what you learned. For Week 1, we encourage you to take the Cloud Skills Challenge and work your way through at least a subset of the modules, for hands-on experience with the different Azure Functions concepts, integrations, and usage.\\n\\n> See you in Week 2!"},{"id":"09-aca-fundamentals","metadata":{"permalink":"/Cloud-Native/blog/09-aca-fundamentals","source":"@site/blog/2022-09-09/index.md","title":"09. Hello, Azure Container Apps","description":"Kickstarting Week 2 of #30DaysOfServerless with an introduction to Azure Container Apps and core concepts relevant to building microservices-driven solutions","date":"2022-09-09T00:00:00.000Z","formattedDate":"September 9, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"dapr","permalink":"/Cloud-Native/blog/tags/dapr"},{"label":"microservices","permalink":"/Cloud-Native/blog/tags/microservices"}],"readingTime":11.7,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"09-aca-fundamentals","title":"09. Hello, Azure Container Apps","authors":["nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"Kickstarting Week 2 of #30DaysOfServerless with an introduction to Azure Container Apps and core concepts relevant to building microservices-driven solutions","tags":["serverless-september","30-days-of-serverless","azure-container-apps","dapr","microservices"]},"prevItem":{"title":"08. Functions + Serverless On Azure","permalink":"/Cloud-Native/blog/08-functions-azure"},"nextItem":{"title":"10. Microservices Communication","permalink":"/Cloud-Native/blog/microservices-10"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/09-aca-fundamentals\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Introduction to Container Apps Core Concepts\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Introduction to Container Apps Core Concepts\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/09-aca-fundamentals\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 9` of #30DaysOfServerless!\\n\\n---\\n\\n## What We\'ll Cover\\n * The Week Ahead\\n * Hello, Container Apps!\\n * Quickstart: Build Your First ACA!\\n * Under The Hood: Core ACA Concepts\\n * Exercise: Try this yourself!\\n * Resources: For self-study!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## The Week Ahead\\n\\nWelcome to Week 2 of #ServerlessSeptember, where we put the focus on **Microservices** and building Cloud Native applications that are optimized for **serverless** solutions on Azure. One week is not enough to do this complex topic justice so consider this a 7-part jumpstart to the longer journey.\\n\\n 1. **Hello, Container Apps (ACA)** - Learn about Azure Container Apps, a key service that helps you _run microservices and containerized apps on a serverless platform_. Know the core concepts. (_Tutorial 1: First ACA_)\\n 2. **Communication with Microservices** - Dive deeper into two key concepts: _environments_ and _virtual networking_. Learn how microservices communicate in ACA, and walkthrough an example. _(Tutorial 2: ACA with 3 Microservices)_\\n 3. **Scaling Your Container Apps** - Learn about KEDA. Understand how to configure your ACA for auto-scaling with KEDA-supported triggers. Put this into action by walking through a tutorial. _(Tutorial 3: Configure Autoscaling_)\\n 4. **Hello, Distributed Application Runtime (Dapr)** - Learn about Dapr and how its _Building Block APIs_ simplify microservices development with ACA. Know how the _sidecar pattern_ enables incremental adoption of Dapr APIs without requiring any Dapr code integration in app. (_Tutorial 4: Setup & Explore Dapr_)\\n 5. **Building ACA with Dapr** - See how Dapr works with ACA by building a Dapr-enabled Azure Container App. Walk through a .NET tutorial using Pub/Sub and State Management APIs in an enterprise scenario. (_Tutorial 5: Build ACA with Dapr_)\\n 6. **Managing Secrets With Dapr** - We\'ll look at the Secrets API (a key Building Block of Dapr) and learn how it simplifies management of sensitive information in ACA.\\n 7. **Microservices + Serverless On Azure** - We recap Week 2 (_Microservices_) and set the stage for Week 3 ( _Integrations_) of Serverless September. Plus, self-study resources including ACA development tutorials in different languages.\\n\\nReady? Let\'s go!\\n\\n---\\n\\n## Azure Container Apps!\\n\\nWhen building your application, your first decision is about _where you host your application_. The [Azure Architecture Center has a handy chart](https://docs.microsoft.com/azure/architecture/guide/technology-choices/compute-decision-tree?WT.mc_id=javascript-74010-ninarasi) to help you decide between choices like Azure Functions, Azure App Service, Azure Container Instances, Azure Container Apps and more. But if you are new to this space, you\'ll need a good understanding of the terms and concepts behind the services Today, we\'ll focus on _Azure Container Apps_ (ACA) - so let\'s start with the fundamentals.\\n\\n\\n### Containerized App Defined\\n\\nA containerized app is one where the application components, dependencies, and configuration, are packaged into a single file (**container image**), which can be instantiated in an isolated runtime environment (**container**) that is portable across hosts (OS). This makes containers lightweight and scalable - and ensures that applications behave consistently on different host platforms.\\n\\nContainer images can be shared via  **container registries** (public or private) helping developers discover and deploy related apps with less effort. **Scaling** a containerized app can be as simple as activating more instances of its container image. However, this requires **container orchestrators** to automate the management of container apps for efficiency. Orchestrators use technologies like Kubernetes to support capabilities like _workload scheduling, self-healing and auto-scaling on demand_.\\n\\n### Cloud Native & Microservices\\n\\nContainers are seen as one of the [5 pillars of Cloud Native app development](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/go-cloud-native-with-azure-container-apps/ba-p/3616407?WT.mc_id=javascript-74010-cxa), an approach where applications are designed explicitly to take advantage of the unique benefits of modern dynamic environments (involving public, private and hybrid clouds). Containers are particularly suited to **serverless solutions based on microservices**.\\n\\n * _With serverless_ - developers use **managed services** instead of managing their own infrastructure. Services are typically event-driven and can be configured for autoscaling with rules tied to event triggers. Serverless is cost-effective, with developers paying only for the compute cycles and resources they use.\\n * _With microservices_ - developers **compose their applications from independent components**. Each component can be deployed in its own container, and scaled at that granularity. This simplifies component reuse (across apps) and maintainability (over time) - with developers evolving functionality at microservice (vs. app) levels.\\n\\n### Hello, Azure Container Apps!\\n\\nAzure Container Apps is the managed service that helps you run containerized apps and microservices as a serverless compute solution, on Azure. You can:\\n\\n * **deploy serverless API endpoints** - autoscaled by HTTP request traffic\\n * **host background processing apps** - autoscaled by CPU or memory load\\n * **handle event-driven processing** - autoscaled by #messages in queue\\n * **run microservices** - autoscaled by any KEDA-supported scaler.\\n\\nWant a quick intro to the topic? Start by watching the short video below - then read these two posts from our _ZeroToHero_ series:\\n * [Go cloud native with Azure Container Apps](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/go-cloud-native-with-azure-container-apps/ba-p/3616407?WT.mc_id=javascript-74010-cxa) - also see [the illustrated guide](http://localhost:3000/Cloud-Native/assets/images/Go-Cloud-Native-f6ac3225c3d9741a1fbff81030f7f830.png)\\n * [Journey to the cloud with Azure Container Apps](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/journey-to-the-cloud-with-azure-container-apps/ba-p/3622609?WT.mc_id=javascript-74010-cxa) - for developer tooling options.\\n\\n<iframe width=\\"600\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/b3dopSTnSRg\\" title=\\"How to Build and Deliver Apps Fast and Scalable with Azure Container Apps\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n---\\n\\n## Deploy Your First ACA\\n\\n### Dev Options\\n\\nWe typically have **three options** for development:\\n * Use the [Azure Portal](https://docs.microsoft.com/azure/container-apps/get-started-existing-container-image-portal?pivots=container-apps-private-registry) - provision and deploy from a browser.\\n * Use [Visual Studio Code](https://docs.microsoft.com/azure/container-apps/deploy-visual-studio-code) (with relevant extensions) - if you prefer an IDE\\n * Using [Azure CLI](https://docs.microsoft.com/azure/container-apps/get-started-existing-container-image?tabs=bash&pivots=container-apps-private-registry) - if you prefer to build and deploy from command line.\\n\\nThe documentation site has quickstarts for three contexts:\\n * [using a sample container image](https://docs.microsoft.com/azure/container-apps/quickstart-portal) - pre-existing example on Azure for convenience\\n * [using a custom container image](https://docs.microsoft.com/azure/container-apps/get-started-existing-container-image-portal?pivots=container-apps-private-registry) - to understand container registry usage\\n * [using code on your local machine](https://docs.microsoft.com/azure/container-apps/quickstart-code-to-cloud?tabs=bash%2Ccsharp&pivots=acr-remote) - to start from source repo\\n\\nFor this quickstart, we\'ll go with the first option (sample image) so we can move quickly to core concepts. We\'ll leave the others as an exercise for you to explore.\\n\\n### 1. Setup Resources\\n\\n:::info PRE-REQUISITES\\nYou need:\\n * An Azure account with an active subscription\\n * An installed [Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli)\\n:::\\n\\nStart by logging into Azure from the CLI. The command should launch a browser to complete the auth flow (or give you an option to take an alternative path).\\n\\n```bash\\n$ az login\\n```\\n\\nSuccessful authentication will result in extensive command-line output detailing the status of your subscription. \\n\\nNext, install the Azure Container Apps extension for the CLI\\n\\n```bash\\n$ az extension add --name containerapp --upgrade\\n...\\nThe installed extension \'containerapp\' is in preview.\\n```\\n\\nOnce successfully installed, register the `Microsoft.App` namespace.\\n\\n```bash\\n$ az provider register --namespace Microsoft.App\\n```\\n\\nThen set local _environment variables_ in that terminal - and verify they are set correctly:\\n\\n```bash\\n$ RESOURCE_GROUP=\\"my-container-apps\\"\\n$ LOCATION=\\"canadacentral\\"\\n$ CONTAINERAPPS_ENVIRONMENT=\\"my-environment\\"\\n\\n$ echo $LOCATION $RESOURCE_GROUP $CONTAINERAPPS_ENVIRONMENT\\ncanadacentral my-container-apps my-environment\\n```\\n\\nNow you can use Azure CLI to provision a _resource group_ for this tutorial. Creating a resource group also makes it easier for us to delete/reclaim all resources used at the end of this tutorial.\\n\\n```bash\\naz group create \\\\\\n  --name $RESOURCE_GROUP \\\\\\n  --location $LOCATION\\n```\\n\\n:::success Congratulations\\n\\nYou completed the Setup step!\\n\\nOn completion, the console should print out the details of the newly created resource group. You should also be able to visit the Azure Portal and find the newly-active `my-container-apps` resource group under your active subscription.\\n\\n:::\\n\\n### 2. Create Environment\\n\\nAn environment is like the picket fence around your property. It creates a _secure boundary_ that contains a group of container apps - such that all apps deployed to it share the same virtual network and logging resources.\\n\\n```bash\\n$ az containerapp env create \\\\\\n  --name $CONTAINERAPPS_ENVIRONMENT \\\\\\n  --resource-group $RESOURCE_GROUP \\\\\\n  --location $LOCATION\\n\\nNo Log Analytics workspace provided.\\nGenerating a Log Analytics workspace with name ...\\n```\\nThis can take a few minutes. When done, you will see the terminal display more details. You can also check the resource group in the portal and see that a _Container Apps Environment_ and a _Log Analytics Workspace_ are created for you as part of this step.\\n\\nYou\'ve got the fence set up. Now it\'s time to build your home - er, container app!\\n\\n### 3. Create Container App\\n\\nHere\'s the command we\'ll use to create our first Azure Container App. Note that the `--image` argument provides the link to a pre-existing `containerapps-helloworld` image. \\n\\n```bash\\naz containerapp create \\\\\\n  --name my-container-app \\\\\\n  --resource-group $RESOURCE_GROUP \\\\\\n  --environment $CONTAINERAPPS_ENVIRONMENT \\\\\\n  --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \\\\\\n  --target-port 80 \\\\\\n  --ingress \'external\' \\\\\\n  --query properties.configuration.ingress.fqdn\\n...\\n...\\n\\nContainer app created. Access your app at <URL>\\n```\\n\\nThe `--ingress` property shows that the app is open to _external_ requests; in other words, it is publicly visible at the `<URL>` that is printed out on the terminal on successsful completion of this step.\\n\\n### 4. Verify Deployment\\n\\nLet\'s see if this works. You can verify that your container app by visitng the URL returned above in your browser. You should see something like this!\\n\\n![Container App Hello World](img/container-app.png)\\n\\nYou can also visit the Azure Portal and look under the created Resource Group. You should see a new `Container App` type of resource was created after this step.\\n\\n:::success Congratulations\\nYou just created and deployed your first \\"Hello World\\" Azure Container App! This validates your local development environment setup and existence of a valid Azure subscription.\\n:::\\n\\n### 5. Clean Up Your Resources\\n\\nIt\'s good practice to clean up resources once you are done with a tutorial. \\n\\n:::warning THIS ACTION IS IRREVERSIBLE\\n This command deletes the resource group we created above - and all resources in it. So make sure you specified the right name, then confirm deletion.\\n:::\\n\\n\\n```bash\\n$ az group delete --name $RESOURCE_GROUP\\nAre you sure you want to perform this operation? (y/n): \\n```\\n\\nNote that you can also delete the resource group from the Azure Portal interface if that feels more comfortable. For now, we\'ll just use the Portal to verify that deletion occurred. If you had previously opened the Resource Group page for the created resource, just refresh it. You should see something like this:\\n\\n![Resource Not Found](./img/resource-not-found.png)\\n\\n---\\n\\n## Core Concepts\\n\\n:::info COMING SOON\\nAn illustrated guide summarizing these concepts in a single sketchnote.\\n:::\\n\\nWe covered a lot today - we\'ll stop with a quick overview of core concepts behind Azure Container Apps, each linked to documentation for self-study. We\'ll dive into more details on _some_ of these concepts in upcoming articles:\\n\\n * [Environments](https://docs.microsoft.com/azure/container-apps/environment) - are the _secure boundary_ around a group of container apps that are deployed in the same virtual network. They write logs to a shared Log Analytics workspace and can communicate seamlessly using Dapr, if used.\\n * [Containers](https://docs.microsoft.com/azure/container-apps/containers) refer to the _container image_ deployed in the Azure Container App. They can use any runtime, programming language, or development stack - and be discovered using any public or private container registry. A container app can support multiple containers.\\n * [Revisions](https://docs.microsoft.com/azure/container-apps/revisions) are _immutable_ snapshots of an Azure Container App. The first revision is created when the ACA is first deployed, with new revisions created when redeployment occurs with [revision-scope changes](https://docs.microsoft.com/azure/container-apps/revisions#revision-scope-changes). Multiple revisions can run concurrently in an environment.\\n * [Application Lifecycle Management](https://docs.microsoft.com/azure/container-apps/application-lifecycle-management) revolves around these revisions, with a container app having three phases: _deployment_, _update_ and _deactivation_.\\n * [Microservices](https://docs.microsoft.com/azure/container-apps/microservices) are independent units of functionality in cloud native architectures. _A single container app typically represents a single microservice_, and can be composed from one or more containers. Microservices can now be scaled and upgraded indepedently, giving your application more flexbility and control.\\n * [Networking](https://docs.microsoft.com/azure/container-apps/networking) architecture consist of a virtual network (VNET) associated with the environment. Unless you provide a custom VNET at environment creation time, a default VNET is automatically created. The VNET configuration determines access (ingress, internal vs. external) and can influence auto-scaling choices (e.g., use HTTP Edge Proxy and scale based on number of HTTP requests).\\n * [Observability](https://docs.microsoft.com/azure/container-apps/observability) is about monitoring the health of your application and diagnosing it to improve reliability or performance. Azure Container Apps has a number of features - from Log streaming and Container console to integration with Azure Monitor - to provide a holistic view of application status over time.\\n * [Easy Auth](https://docs.microsoft.com/azure/container-apps/authentication) is possible with built-in support for authentication and authorization including support for popular identity providers like Facebook, Google, Twitter and GitHub - alongside the Microsoft Identity Platform.\\n\\nKeep these terms in mind as we walk through more tutorials this week, to see how they find application in real examples. Finally, a note on Dapr, the [Distributed Application Runtime](http://dapr.io) that abstracts away many of the challenges posed by distributed systems - and lets you focus on your application logic.\\n\\n:::info DAPR INTEGRATION MADE EASY\\n \\n[Dapr](https://docs.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml) uses a sidecar architecture, allowing Azure Container Apps to communicate with Dapr Building Block APIs over either gRPC or HTTP. Your ACA can be built to run with or without Dapr - giving you the flexibility to _incrementally adopt_ specific APIs and unlock related capabilities as the need arises.\\n:::\\n\\n![](https://docs.dapr.io/images/overview-sidecar-model.png)\\n\\nIn later articles this week, we\'ll do a deeper dive into Dapr and build our first Dapr-enable Azure Container App to get a better understanding of this integration.\\n\\n## Exercise\\n\\nCongratulations! You made it! By now you should have a good idea of what Cloud Native development means, why Microservices and Containers are important to that vision - and how Azure Container Apps helps simplify the building and deployment of _microservices based applications_ using _serverless architectures_ on Azure.\\n\\nNow it\'s your turn to reinforce learning by doing.\\n * Try walking through this quickstart yourself, but [using the Azure Portal](https://docs.microsoft.com/azure/container-apps/quickstart-portal) option.\\n * Then try a [custom container image](https://docs.microsoft.com/azure/container-apps/deploy-visual-studio-code) option using Visual Studio Code, and validate your IDE-based setup for future tutorials.\\n\\n## Resources\\n\\nThree key resources to bookmark and explore:\\n * [Azure Container Apps](https://docs.microsoft.com/azure/container-apps/) - documentation\\n * [Distributed Application Runtime (Dapr)](https://docs.dapr.io/) - documentation\\n * [Azure Container Apps](https://docs.microsoft.com/azure/container-apps/samples) - samples for exploration"},{"id":"microservices-10","metadata":{"permalink":"/Cloud-Native/blog/microservices-10","source":"@site/blog/2022-09-10/index.md","title":"10. Microservices Communication","description":"Continuing our journey into Azure Container Apps with a look at microservices hosting, and how they communicate with each other in the context of Azure Container Apps!","date":"2022-09-10T00:00:00.000Z","formattedDate":"September 10, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"microservices","permalink":"/Cloud-Native/blog/tags/microservices"},{"label":"docker-compose","permalink":"/Cloud-Native/blog/tags/docker-compose"}],"readingTime":7.655,"hasTruncateMarker":false,"authors":[{"name":"Paul Yu","title":"Cloud Native Advocate @Microsoft","url":"https://github.com/pauldotyu","imageURL":"https://github.com/pauldotyu.png","key":"paul"}],"frontMatter":{"slug":"microservices-10","title":"10. Microservices Communication","authors":["paul"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","serverless","containers","microservices"],"image":"./img/banner.png","description":"Continuing our journey into Azure Container Apps with a look at microservices hosting, and how they communicate with each other in the context of Azure Container Apps!","tags":["serverless-september","30-days-of-serverless","azure-container-apps","microservices","docker-compose"]},"prevItem":{"title":"09. Hello, Azure Container Apps","permalink":"/Cloud-Native/blog/09-aca-fundamentals"},"nextItem":{"title":"11. Scaling Container Apps","permalink":"/Cloud-Native/blog/11-scaling-container-apps"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/microservices-10\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Microservices Communications with Azure Container Apps\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Microservices Communications with Azure Container Apps\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/microservices-10\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 10` of #30DaysOfServerless!\\n\\nWe continue our exploraton into Azure Container Apps, with today\'s focus being _communication_ between microservices, and how to configure your Azure Container Apps environment in the context of a deployment example.\\n\\n---\\n\\n## What We\'ll Cover\\n\\n- ACA Environments & Virtual Networking\\n- Basic Microservices Communications\\n- Walkthrough: ACA Deployment Example\\n- Summary and Next Steps\\n- Exercise: Try this yourself!\\n- Resources: For self-study!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n## Introduction\\n\\nIn yesterday\'s post, we learned what the Azure Container Apps (ACA) service is and the problems it aims to solve. It is considered to be a Container-as-a-Service platform since much of the complex implementation details of running a Kubernetes cluster is managed for you.\\n\\nSome of the use cases for ACA include event-driven processing jobs and background tasks, but this article will focus on hosting microservices, and how they can communicate with each other within the ACA service. At the end of this article, you will have a solid understanding of how networking and communication is handled and will leave you with a few tutorials to try.\\n\\n## Environments and virtual networking in ACA\\n\\nBefore we jump into microservices communication, we should review how networking works within ACA. With ACA being a managed service, Azure will take care of most of your underlying infrastructure concerns. As you provision an ACA resource, Azure provisions an Environment to deploy Container Apps into. This environment is your isolation boundary.\\n\\n![Azure Container Apps Environment](https://docs.microsoft.com/azure/container-apps/media/environments/azure-container-apps-environments.png)\\n\\nBy default, Azure creates and manages a new Virtual Network (VNET) for you and the VNET is associated with the environment. As you deploy container apps, they are deployed into the same VNET and the environment is assigned a static public IP address which allows your apps to be accessible over the internet. This VNET is not visible or manageable.\\n\\nIf you need control of the networking flows within the VNET, you can pre-provision one and tell Azure to deploy an environment within it. This \\"bring-your-own\\" VNET model allows you to deploy an environment in either **External** or **Internal** modes. Deploying an environment in **External** mode gives you the flexibility of managing your own VNET, while still allowing your containers to be accessible from outside the environment; a static public IP address is assigned to the environment. When deploying in **Internal** mode, your containers are accessible within the environment and/or VNET but not accessible from the internet.\\n\\nBringing your own VNET will require some planning and you will need dedicate an empty subnet which will be used exclusively by the ACA environment. The size of your subnet will be dependant on how many containers you plan on deploying and your scaling requirements and one requirement to know is that the subnet address range must have have a `/23` CIDR prefix at minimum. You will also need to think about your deployment strategy since ACA has the concept of **Revisions** which will also consume IPs from your subnet.\\n\\nSome additional restrictions to consider when planning your subnet address space is listed in the Resources section below and can be addressed in future posts, so be sure to follow us on [dev.to](https://dev.to/azure) and bookmark the [ServerlessSeptember](https://aka.ms/serverless-september) site.\\n\\n## Basic microservices communication in ACA\\n\\nWhen it comes to communications between containers, ACA addresses this concern with its **Ingress** capabilities. With **HTTP Ingress** enabled on your container app, you can expose your app on a HTTPS endpoint.\\n\\nIf your environment is deployed using default networking and your containers needs to be accessible from outside the environment, you will need to set the **Ingress traffic** option to **Accepting traffic from anywhere**. This will generate a Full-Qualified Domain Name (FQDN) which you can use to access your app right away. The ingress feature also generates and assigns a Secure Socket Layer (SSL) certificate for the FQDN.\\n\\n![External ingress on Container App](./img/external-ingress.png)\\n\\nIf your environment is deployed using default networking and your containers only need to communicate with other containers in the environment, you\'ll need to set the **Ingress traffic** option to **Limited to Container Apps Environment**. You get a FQDN here as well, but in the section below we\'ll see how that changes.\\n\\n![Internal ingress on Container App](./img/internal-ingress.png)\\n\\nAs mentioned in the networking section above, if you deploy your ACA environment into a VNET in **internal** mode, your options will be **Limited to Container Apps Environment** or **Limited to VNet**.\\n\\n![Ingress on internal virtual network](./img/internal-vnet-ingress.png)\\n\\n> Note how the **Accepting traffic from anywhere** option is greyed out. If your VNET is deployed in **external** mode, then the option will be available.\\n\\n## Let\'s walk though an example ACA deployment\\n\\nThe diagram below illustrates a simple microservices application that I deployed to ACA. The three container apps all have ingress enabled. The `greeting-service` app calls two backend services; a `hello-service` that returns the text **Hello** (in random casing) and a `world-service` that returns the text **World** (in a few random languages). The greeting-service concatenates the two strings together and returns **Hello World** to the browser. The greeting-service is the only service accessible via external ingress while two backend services are only accessible via internal ingress.\\n\\n![Greeting Service overview](./img/greeting-service-overview.png)\\n\\nWith ingress enabled, let\'s take a quick look at the FQDN structures. Here is the FQDN of the **external** greeting-service.\\n\\n`https://greeting-service.victoriouswave-3749d046.eastus.azurecontainerapps.io`\\n\\nWe can break it down into these components:\\n\\n`https://`**[YOUR-CONTAINER-APP-NAME]**`.`**[RANDOM-NAME]**`-`**[RANDOM-CHARACTERS]**`.`**[AZURE-REGION]**`.containerapps.io`\\n\\nAnd here is the FQDN of the **internal** hello-service.\\n\\n`https://hello-service.internal.victoriouswave-3749d046.eastus.azurecontainerapps.io`\\n\\nCan you spot the difference between FQDNs?\\n\\nThat was too easy \ud83d\ude09... the word `internal` is added as a subdomain in the FQDN between your container app name and the random name for all internal ingress endpoints.\\n\\n`https://`**[YOUR-CONTAINER-APP-NAME]**`.internal.`**[RANDOM-NAME]**`-`**[RANDOM-CHARACTERS]**`.`**[AZURE-REGION]**`.containerapps.io`\\n\\nNow that we know the internal service FQDNs, we use them in the greeting-service app to achieve basic service-to-service communications.\\n\\nSo we can inject FQDNs of downstream APIs to upstream apps using environment variables, but the downside to this approach is that need to deploy downstream containers ahead of time and this dependency will need to be planned for during your deployment process. There are ways around this and one option is to leverage the auto-injected environment variables within your app code.\\n\\nIf I use the Console blade for the hello-service container app and run the `env` command, you will see environment variables named `CONTAINER_APP_NAME` and `CONTAINER_APP_ENV_DNS_SUFFIX`. You can use these values to determine FQDNs within your upstream app.\\n\\n![hello-service environment variables](./img/hello-service.png)\\n\\nBack in the `greeting-service` container I can invoke the hello-service container\'s `sayhello` method. I know the container app name is hello-service and this service is exposed over an internal ingress, therefore, if I add the `internal` subdomain to the `CONTAINER_APP_ENV_DNS_SUFFIX` I can invoke a HTTP request to the hello-service from my greeting-service container.\\n\\n![Invoke the sayHello method from the greeting-service container](./img/say-hello.png)\\n\\nAs you can see, the ingress feature enables communications to other container apps over HTTP/S and ACA will inject environment variables into our container to help determine what the ingress FQDNs would be. All we need now is a little bit of code modification in the greeting-service app and build the FQDNs of our backend APIs by retrieving these environment variables.\\n\\n![Greeting service code](./img/greeting-service-code.png)\\n\\n... and now we have a working microservices app on ACA! \ud83c\udf89\\n\\n![Hello World](./img/aca-microservice.png)\\n\\n## Summary and next steps\\n\\nWe\'ve covered Container Apps networking and the basics of how containers communicate with one another. However, there is a better way to address service-to-service invocation using Dapr, which is an open-source framework for building microservices. It is natively integrated into the ACA service and in a future post, you\'ll learn how to enable it in your Container App to address microservices concerns and more. So stay tuned!\\n\\n## Exercises\\n\\nAs a takeaway for today\'s post, I encourage you to complete this [tutorial](https://docs.microsoft.com/azure/container-apps/communicate-between-microservices?tabs=bash&pivots=acr-remote) and if you\'d like to deploy the sample app that was presented in this article, my teammate [@StevenMurawski](https://github.com/smurawski) is hosting a [docker-compose-examples](https://github.com/smurawski/docker-compose-examples) repo which includes samples for deploying to ACA using Docker Compose files. To learn more about the `az containerapp compose` command, a link to his blog articles are listed in the Resources section below.\\n\\nIf you have any questions or feedback, please let us know in the comments below or reach out on Twitter [@pauldotyu](https://twitter.com/pauldotyu)\\n\\nHave fun packing and shipping containers! See you in the next post!\\n\\n## Resources\\n\\n- [Tutorial: Communication between microservices in Azure Container Apps](https://docs.microsoft.com/azure/container-apps/communicate-between-microservices?tabs=bash&pivots=acr-remote)\\n- [Tutorial: greeting-service (docker-compose-example)](https://github.com/smurawski/docker-compose-examples/tree/main/nodejs_greet)\\n- [Concept: Azure Container App Environments](https://docs.microsoft.com/azure/container-apps/environment)\\n- [Concept: Azure Container App Ingress](https://docs.microsoft.com/azure/container-apps/networking#http-edge-proxy-behavior)\\n- [Concept: Azure Container App VNET Restrictions](https://docs.microsoft.com/azure/container-apps/networking#restrictions)\\n- [Blog: Accelerating Azure Container Apps with the Azure CLI and Compose Files](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/accelerating-azure-container-apps-with-the-azure-cli-and-compose/ba-p/3516636)\\n- [Blog: More Fun with Azure Container Apps and Compose Files](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/more-fun-with-azure-container-apps-and-compose-files/ba-p/3570234)\\n\\n> The sample app presented here was inspired by services demonstrated in the book [Introducing Distributed Application Runtime (Dapr): Simplifying Microservices Applications Development Through Proven and Reusable Patterns and Practices](https://www.amazon.com/Introducing-Distributed-Application-Runtime-Dapr/dp/1484269977). Go check it out to leran more about Dapr!\\n\\n\x3c!-- hidden links --\x3e\\n\\n[vnets]: https://docs.microsoft.com/azure/virtual-network/virtual-networks-overview\\n[nsg]: https://docs.microsoft.com/azure/virtual-network/network-security-groups-overview\\n[vnet-peering]: https://docs.microsoft.com/azure/virtual-network/virtual-network-peering-overview\\n[aca-external-vnet]: https://docs.microsoft.com/azure/container-apps/vnet-custom?tabs=bash&pivots=azure-cli\\n[aca-internal-vnet]: https://docs.microsoft.com/azure/container-apps/vnet-custom-internal?tabs=bash&pivots=azure-cli\\n[aca-console]: https://docs.microsoft.com/azure/container-apps/observability?tabs=bash#container-console"},{"id":"11-scaling-container-apps","metadata":{"permalink":"/Cloud-Native/blog/11-scaling-container-apps","source":"@site/blog/2022-09-11/index.md","title":"11. Scaling Container Apps","description":"<FIXME>","date":"2022-09-11T00:00:00.000Z","formattedDate":"September 11, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"keda","permalink":"/Cloud-Native/blog/tags/keda"},{"label":"autoscaling","permalink":"/Cloud-Native/blog/tags/autoscaling"}],"readingTime":6.275,"hasTruncateMarker":false,"authors":[{"name":"Paul Yu","title":"Cloud Native Advocate @Microsoft","url":"https://github.com/pauldotyu","imageURL":"https://github.com/pauldotyu.png","key":"paul"}],"frontMatter":{"slug":"11-scaling-container-apps","title":"11. Scaling Container Apps","authors":["paul"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","container-apps","keda","serverless","concepts","scaling"],"image":"./img/banner.png","description":"<FIXME>","tags":["serverless-september","30-days-of-serverless","azure-container-apps","keda","autoscaling"]},"prevItem":{"title":"10. Microservices Communication","permalink":"/Cloud-Native/blog/microservices-10"},"nextItem":{"title":"\ud83d\ude80 | Journey to the Cloud With ACA","permalink":"/Cloud-Native/blog/zero2hero-aca-04"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/11-scaling-container-apps\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Scaling Your Container Apps\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Scaling Your Container Apps\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/11-scaling-container-apps\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 11` of #30DaysOfServerless!\\n\\nYesterday we explored Azure Container Concepts related to environments, networking and microservices communication - and illustrated these with a deployment example. Today, we turn our attention to _scaling_ your container apps with demand.\\n\\n---\\n\\n## What We\'ll Cover\\n * What makes ACA Serverless?\\n * What is Keda?\\n * Scaling Your ACA\\n * ACA Scaling In Action\\n * Exercise: Explore [azure-opensource-labs](https://aka.ms/oss-labs) examples\\n * Resources: For self-study!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n\\n## So, what makes Azure Container Apps \\"serverless\\"?\\n\\nToday we are going to focus on what makes Azure Container Apps (ACA) a \\"serverless\\" offering. But what does the term \\"*serverless*\\" really mean? As much as we\'d like to think there aren\'t any servers involved, that is certainly not the case. In general, \\"serverless\\" means that most (if not all) server maintenance has been abstracted away from you.\\n\\nWith serverless, you don\'t spend any time managing and patching servers. This concern is offloaded to Azure and you simply focus on adding business value through application delivery. In addition to operational efficiency, cost efficiency can be achieved with serverless on-demand pricing models. Your workload horizontally scales out based on need and you only pay for what you use. To me, this is **serverless**, and my teammate [@StevenMurawski](https://github.com/smurawski) said it best... \\"*being able to **scale to zero **is what gives ACA it\'s serverless magic*.\\"\\n\\n## Scaling your Container Apps\\n\\nIf you don\'t know by now, ACA is built on a solid open-source foundation. Behind the scenes, it runs on a managed Kubernetes cluster and includes several open-source components out-of-the box including [Dapr](https://dapr.io/) to help you build and run microservices, [Envoy Proxy](https://www.envoyproxy.io/) for ingress capabilities, and [KEDA](https://keda.sh/) for event-driven autoscaling. Again, you do not need to install these components yourself. All you need to be concerned with is enabling and/or configuring your container app to leverage these components.\\n\\nLet\'s take a closer look at autoscaling in ACA to help you optimize your container app.\\n\\n### What is KEDA?\\n\\nKEDA stands for **K**ubernetes **E**vent-**D**riven **A**utoscaler. It is an open-source project initially started by Microsoft and Red Hat and has been donated to the [Cloud Native Computing Foundation (CNCF)](https://www.cncf.io/). It is being maintained by a [community of 200+ contributors and adopted by many large organizations](https://keda.sh/community/). In terms of its status as a CNCF project it is currently in the [**Incubating Stage**](https://github.com/cncf/toc/blob/main/process/graduation_criteria.md#incubating-stage) which means the project has gone through significant due diligence and on its way towards the [**Graduation Stage**](https://github.com/cncf/toc/blob/main/process/graduation_criteria.md#graduation-stage).\\n\\nPrior to KEDA, horizontally scaling your Kubernetes deployment was achieved through the [Horizontal Pod Autoscaler (HPA)](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/) which relies on resource metrics such as CPU and memory to determine when additional replicas should be deployed. Being limited to CPU and memory falls a bit short for certain workloads. This is especially true for apps that need to processes messages from a queue or HTTP-based apps that can handle a specific amount of incoming HTTP requests at a time. KEDA aims to fill that gap and provides a much more robust framework for scaling by working in conjunction with HPA. It offers many [scalers](https://keda.sh/docs/scalers/) for you to implement and even allows your deployments to **scale to zero**! \ud83e\udd73\\n\\n![KEDA architecture](./img/keda-arch.png)\\n\\n### Configuring ACA scale rules\\n\\nAs I mentioned above, ACA\'s autoscaling feature leverages KEDA and gives you the ability to configure the number of replicas to deploy based on rules (event triggers). The number of replicas can be configured as a static number or a range (minimum and maximum). So if you need your containers to run 24/7, set the min and max to be the same value. By default, when you deploy a container app, it is set to scale from 0 to 10 replicas. The default scaling rule uses **HTTP scaling** and defaults to a [minimum of 10 concurrent requests](https://docs.microsoft.com/azure/container-apps/scale-app#http) per second. Once the threshold of 10 concurrent request per second is met, another replica will be deployed until it reaches the maximum number of replicas.\\n\\n> At the time of this writing, a container app can have up to 30 replicas.\\n\\n![Default autoscaler](./img/default-autoscaler.png)\\n\\nAs a best practice, if you have a **Min / max replicas** range configured, you should configure a scaling rule even if it is just explicitly setting the default values.\\n\\n![Adding HTTP scaling rule](./img/http-rule.png)\\n\\nIn addition to **HTTP scaling**, you can also configure an **Azure queue** rule, which allows you to use [Azure Storage Queues](https://docs.microsoft.com/azure/storage/queues/storage-queues-introduction) as an event data source.\\n\\n![Adding Azure Queue scaling rule](./img/queue-rule.png)\\n\\nThe most flexibility comes with the **Custom** rule type. This opens up a LOT more options for scaling. All of [KEDA\'s event-based scalers](https://keda.sh/docs/scalers/) are supported with this option \ud83d\ude80\\n\\n![Adding Custom scaling rule](./img/custom-rule.png)\\n\\n### Translating KEDA templates to Azure templates\\n\\nWhen you implement **Custom** rules, you need to become familiar with translating KEDA templates to [Azure Resource Manager templates](https://docs.microsoft.com/azure/container-apps/azure-resource-manager-api-spec?tabs=arm-template) or [ACA YAML manifests](https://docs.microsoft.com/azure/container-apps/azure-resource-manager-api-spec?tabs=yaml). The [KEDA scaler](https://keda.sh/docs/scalers/) documentation is great and it should be simple to translate KEDA template `metadata` to an ACA rule `metadata`.\\n\\nThe images below shows how to translated a scaling rule which uses Azure Service Bus as an event data source. The custom rule type is set to `azure-servicebus` and details of the service bus is added to the Metadata section. One important thing to note here is that the connection string to the service bus was added as a secret on the container app and the trigger parameter must be set to `connection`.\\n\\n![Azure Container App custom rule metadata](./img/keda-metadata.png)\\n\\n![Azure Container App custom rule metadata](./img/aca-metadata.png)\\n\\nAdditional examples of KEDA scaler conversion can be found in the resources section and example video below.\\n\\n## See Container App scaling in action\\n\\nNow that we\'ve built up some foundational knowledge on how ACA autoscaling is implemented and configured, let\'s look at a few examples.\\n\\n### Autoscaling based on HTTP traffic load\\n\\n<div style={{ padding:\'56.25% 0 0 0\', position:\'relative\' }}><iframe src=\\"https://player.vimeo.com/video/746678347?h=8f5ada4431&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479\\" frameborder=\\"0\\" allow=\\"autoplay; fullscreen; picture-in-picture\\" allowfullscreen style={{ position:\'absolute\', top:0, left:0, width:\'100%\', height:\'100%\' }} title=\\"http-scaling\\"></iframe></div><script src=\\"https://player.vimeo.com/api/player.js\\"><\/script>\\n\\n### Autoscaling based on Azure Service Bus message queues\\n\\n<div style={{ padding:\'56.25% 0 0 0\', position:\'relative\' }}><iframe src=\\"https://player.vimeo.com/video/746678266?h=89701121ed&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479\\" frameborder=\\"0\\" allow=\\"autoplay; fullscreen; picture-in-picture\\" allowfullscreen style={{ position:\'absolute\' ,top:0, left:0, width:\'100%\', height:\'100%\' }} title=\\"event-driven-scaling.mp4\\"></iframe></div><script src=\\"https://player.vimeo.com/api/player.js\\"><\/script>\\n\\n## Summary\\n\\nACA brings you a true serverless experience and gives you the ability to configure autoscaling rules based on KEDA scaler templates. This gives you flexibility to scale based on a wide variety of data sources in an event-driven manner. With the amount built-in scalers currently available, there is probably a scaler out there for all your use cases. If not, I encourage you to get involved with the [KEDA community](https://keda.sh/community/) and help make it better!\\n\\n## Exercise\\n\\nBy now, you\'ve probably read and seen enough and now ready to give this autoscaling thing a try. The example I walked through in the videos above can be found at the [azure-opensource-labs](https://aka.ms/oss-labs) repo. I highly encourage you to head over to the [containerapps-terraform](https://github.com/Azure-Samples/azure-opensource-labs/tree/main/cloud-native/containerapps-terraform) folder and try the lab out. There you\'ll find instructions which will cover all the steps and tools you\'ll need implement autoscaling container apps within your own Azure subscription.\\n\\nIf you have any questions or feedback, please let us know in the comments below or reach out on Twitter [@pauldotyu](https://twitter.com/pauldotyu)\\n\\nHave fun scaling your containers!\\n\\n## Resources\\n\\n* [Set scaling rules in Azure Container Apps](https://docs.microsoft.com/azure/container-apps/scale-app)\\n* [Kubernetes Event-driven Autoscaling (KEDA)](https://keda.sh/)\\n* [KEDA Scalers](https://keda.sh/docs/scalers/)\\n* [KEDA scalers conversion](https://docs.microsoft.com/azure/container-apps/scale-app#keda-scalers-conversion)"},{"id":"zero2hero-aca-04","metadata":{"permalink":"/Cloud-Native/blog/zero2hero-aca-04","source":"@site/blog/zero-to-hero/2022-09-12-containerapps.md","title":"\ud83d\ude80 | Journey to the Cloud With ACA","description":"In this article, we discuss how Azure Container Apps is purpose-built to support cloud native applications.","date":"2022-09-12T00:00:00.000Z","formattedDate":"September 12, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"zero-to-hero","permalink":"/Cloud-Native/blog/tags/zero-to-hero"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"dapr","permalink":"/Cloud-Native/blog/tags/dapr"}],"readingTime":4.92,"hasTruncateMarker":false,"authors":[{"name":"Anthony Chu","title":"Principal Product Manager @Microsoft","url":"https://github.com/anthonychu","imageURL":"https://github.com/anthonychu.png","key":"anthony"}],"frontMatter":{"slug":"zero2hero-aca-04","title":"\ud83d\ude80 | Journey to the Cloud With ACA","authors":["anthony"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","containerapps","serverless","concepts"],"image":"./img/banner.png","description":"In this article, we discuss how Azure Container Apps is purpose-built to support cloud native applications.","tags":["serverless-september","zero-to-hero","azure-functions","azure-container-apps","dapr"]},"prevItem":{"title":"11. Scaling Container Apps","permalink":"/Cloud-Native/blog/11-scaling-container-apps"},"nextItem":{"title":"\ud83d\ude80 | Use Custom Handlers For Go","permalink":"/Cloud-Native/blog/zero2hero-func-03"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/zero2hero-aca-01\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#ZeroToHero: Go Cloud Native With Azure Container Apps\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#ZeroToHero: Go Cloud Native With Azure Container Apps\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/serverless-zero2hero.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://techcommunity.microsoft.com/t5/apps-on-azure-blog/go-cloud-native-with-azure-container-apps/ba-p/3616407\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 12` of #30DaysOfServerless!\\n\\nToday, we have a special set of posts from our [Zero To Hero \ud83d\ude80](/serverless-september/ZeroToHero) initiative, featuring blog posts authored by our Product Engineering teams for #ServerlessSeptember. _Posts were originally published on the [Apps on Azure](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/journey-to-the-cloud-with-azure-container-apps/ba-p/3622609?WT.mc_id=javascript-74010-cxa) blog on Microsoft Tech Community._\\n\\n---\\n\\n## What We\'ll Cover\\n * Using Visual Studio\\n * Using Visual Studio Code: Docker, ACA extensions\\n * Using Azure CLI\\n * Using CI/CD Pipelines\\n\\n![](./img/zero-to-hero-anthony.png)\\n\\n---\\n\\nLast week, [@kendallroden](https://techcommunity.microsoft.com/t5/user/viewprofilepage/user-id/296868?WT.mc_id=javascript-74010-cxa) wrote about [what it means to be cloud native](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/go-cloud-native-with-azure-container-apps/ba-p/3616407) and how Azure Container Apps provides a serverless containers platform for hosting all of your cloud native applications. Today, we\u2019ll walk through a few ways to get your apps up and running on Azure Container Apps.\\n\\nDepending on where you are in your cloud native app development journey, you might choose to use different tools to deploy your apps.\\n\\n * **\u201cRight-click, publish\u201d** \u2013 Deploying an app directly from an IDE or code editor is often seen as a bad practice, but it\u2019s one of the quickest ways to test out an app in a cloud environment.\\n * **Command line interface** \u2013 CLIs are useful for deploying apps from a terminal. Commands can be run manually or in a script.\\n * **Continuous integration/deployment** \u2013 To deploy production apps, the recommended approach is to automate the process in a robust CI/CD pipeline.\\n \\nLet\'s explore some of these options in more depth.\\n\\n## Visual Studio\\n \\nVisual Studio 2022 has built-in support for deploying .NET applications to Azure Container Apps. You can use the familiar publish dialog to provision Container Apps resources and deploy to them directly. This helps you prototype an app and see it run in Azure Container Apps with the least amount of effort.\\n\\n![Journey to the cloud with Azure Container Apps](./img/anthony-create-new.png)\\n\\nOnce you\u2019re happy with the app and it\u2019s ready for production, Visual Studio allows you to push your code to GitHub and set up a GitHub Actions workflow to build and deploy your app every time you push changes. You can do this by checking a box.\\n\\n![Journey to the cloud with Azure Container Apps](./img/anthony-deployment-type.png)\\n \\n\\n## Visual Studio Code\\n \\nThere are a couple of valuable extensions that you\u2019ll want to install if you\u2019re working in VS Code.\\n\\n\\n### Docker extension\\n \\nThe Docker extension provides commands for building a container image for your app and pushing it to a container registry. It can even do this without requiring Docker Desktop on your local machine --- the \u201cBuild image in Azure\u201d command remotely builds and pushes a container image to Azure Container Registry.\\n\\n![Journey to the cloud with Azure Container Apps](./img/anthony-vscode-docker.png)\\n\\nAnd if your app doesn\u2019t have a dockerfile, the extension will generate one for you.\\n\\n![Journey to the cloud with Azure Container Apps](./img/anthony-vscode-dockerfile.png)\\n\\n### Azure Container Apps extension\\n\\nOnce you\u2019ve built your container image and pushed it to a registry, the Azure Container Apps VS Code extension provides commands for creating a container app and deploying revisions using the image you\u2019ve built.\\n\\n![Journey to the cloud with Azure Container Apps](./img/anthony-aca-extension.png)\\n\\n\\n## Azure CLI\\n \\n\\nThe Azure CLI can be used to manage pretty much anything in Azure. For Azure Container Apps, you\u2019ll find commands for creating, updating, and managing your Container Apps resources.\\n\\nJust like in VS Code, with a few commands in the Azure CLI, you can create your Azure resources, build and push your container image, and then deploy it to a container app.\\n\\nTo make things as simple as possible, the Azure CLI also has an \u201caz containerapp up\u201d command. This single command takes care of everything that\u2019s needed to turn your source code from your local machine to a cloud-hosted application in Azure Container Apps.\\n\\n```bash\\naz containerapp up --name myapp --source ./src\\n```\\n \\nWe saw earlier that Visual Studio can generate a GitHub Actions workflow to automatically build and deploy your app on every commit. \u201caz containerapp up\u201d can do this too. The following adds a workflow to a repo.\\n\\n```bash\\naz containerapp up --name myapp --repo https://github.com/myorg/myproject\\n```\\n\\n## CI/CD pipelines\\n\\nWhen it\u2019s time to take your app to production, it\u2019s strongly recommended to set up a CI/CD pipeline to automatically and repeatably build, test, and deploy it. We\u2019ve already seen that tools such as Visual Studio and Azure CLI can automatically generate a workflow for GitHub Actions. You can set up a pipeline in Azure DevOps too. This is an example Azure DevOps pipeline.\\n\\n \\n```yml\\ntrigger:\\n  branches:\\n    include:\\n    - main\\n\\npool:\\n  vmImage: ubuntu-latest\\n\\nstages:\\n\\n- stage: Build\\n\\n  jobs:\\n  - job: build\\n    displayName: Build app\\n\\n    steps:\\n    - task: Docker@2\\n      inputs:\\n        containerRegistry: \'myregistry\'\\n        repository: \'hello-aca\'\\n        command: \'buildAndPush\'\\n        Dockerfile: \'hello-container-apps/Dockerfile\'\\n        tags: \'$(Build.BuildId)\'\\n\\n- stage: Deploy\\n\\n  jobs:\\n  - job: deploy\\n    displayName: Deploy app\\n\\n    steps:\\n    - task: AzureCLI@2\\n      inputs:\\n        azureSubscription: \'my-subscription(5361b9d6-46ea-43c3-a898-15f14afb0db6)\'\\n        scriptType: \'bash\'\\n        scriptLocation: \'inlineScript\'\\n        inlineScript: |\\n          # automatically install Container Apps CLI extension\\n          az config set extension.use_dynamic_install=yes_without_prompt\\n\\n          # ensure registry is configured in container app\\n          az containerapp registry set \\\\\\n            --name hello-aca \\\\\\n            --resource-group mygroup \\\\\\n            --server myregistry.azurecr.io \\\\\\n            --identity system\\n\\n          # update container app\\n          az containerapp update \\\\\\n            --name hello-aca \\\\\\n            --resource-group mygroup \\\\\\n            --image myregistry.azurecr.io/hello-aca:$(Build.BuildId)\\n```\\n\\nConclusion\\n \\n\\nIn this article, we looked at a few ways to deploy your cloud native applications to Azure Container Apps and how to decide which one to use based on where you are in your app\u2019s journey to the cloud.\\n\\nTo learn more, visit [Azure Container Apps | Microsoft Azure](https://azure.microsoft.com/services/container-apps/?WT.mc_id=javascript-74010-cxa) today!\\n\\n:::info ASK THE EXPERT: LIVE Q&A\\nThe Azure Container Apps team will answer questions live on **September 29**. \\n * [Sign up to attend](https://reactor.microsoft.com/reactor/events/17004/?WT.mc_id=javascript-74010-ninarasi) for live Q&A with the team\\n * [submit your questions](https://github.com/Azure/Cloud-Native/issues/new?assignees=&labels=ask+the+expert&template=---ask-the-expert-.md&title=%5BAsk+The+Expert%5D++) ahead of time, for prioritization.\\n:::"},{"id":"zero2hero-func-03","metadata":{"permalink":"/Cloud-Native/blog/zero2hero-func-03","source":"@site/blog/zero-to-hero/2022-09-12-azurefunctions.md","title":"\ud83d\ude80 | Use Custom Handlers For Go","description":"Azure functions support multiple programming languages including C#, F#, Java, JavaScript, Python, typescript, and PowerShell. If you want to get extended language support with Azure functions for other languages such as Go, and Rust, that\u2019s where custom handler comes in.","date":"2022-09-12T00:00:00.000Z","formattedDate":"September 12, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"zero-to-hero","permalink":"/Cloud-Native/blog/tags/zero-to-hero"},{"label":"azure-functions","permalink":"/Cloud-Native/blog/tags/azure-functions"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"dapr","permalink":"/Cloud-Native/blog/tags/dapr"}],"readingTime":5.075,"hasTruncateMarker":false,"authors":[{"name":"Melony Qin","title":"Product Manager, Azure Functions @Microsoft","url":"https://github.com/cloudmelon","imageURL":"https://github.com/cloudmelon.png","key":"melony"}],"frontMatter":{"slug":"zero2hero-func-03","title":"\ud83d\ude80 | Use Custom Handlers For Go","authors":["melony"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/zero-to-hero-david.png","description":"Azure functions support multiple programming languages including C#, F#, Java, JavaScript, Python, typescript, and PowerShell. If you want to get extended language support with Azure functions for other languages such as Go, and Rust, that\u2019s where custom handler comes in.","tags":["serverless-september","zero-to-hero","azure-functions","azure-container-apps","dapr"]},"prevItem":{"title":"\ud83d\ude80 | Journey to the Cloud With ACA","permalink":"/Cloud-Native/blog/zero2hero-aca-04"},"nextItem":{"title":"12. Build With Dapr!","permalink":"/Cloud-Native/blog/12-build-with-dapr"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/zero2hero-func-03\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#ZeroToHero: Serverless Go Apps Using Custom Handlers\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#ZeroToHero: Serverless Go Apps Using Custom Handlers\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/serverless-zero2hero.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://techcommunity.microsoft.com/t5/apps-on-azure-blog/building-serverless-go-applications-with-azure-functions-custom/ba-p/3623617\\" />\\n</head>\\n\\n---\\n\\n\\nWelcome to `Day 12` of #30DaysOfServerless!\\n\\n\\nToday, we have a special set of posts from our [Zero To Hero \ud83d\ude80](/serverless-september/ZeroToHero) initiative, featuring blog posts authored by our Product Engineering teams for #ServerlessSeptember. _Posts were originally published on the [Apps on Azure](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/building-serverless-go-applications-with-azure-functions-custom/ba-p/3623617?WT.mc_id=javascript-74010-cxa) blog on Microsoft Tech Community._\\n\\n---\\n\\n## What We\'ll Cover\\n * What are Custom Handlers, and why use them?\\n * How Custom Handler Works\\n * Message Processing With Azure Custom Handler\\n * Azure Portal Monitoring\\n\\n![](./img/zero-to-hero-melony.png)\\n\\n---\\n \\nIf you have been working with [Azure Functions](https://docs.microsoft.com/azure/azure-functions/?WT.mc_id=javascript-74010-cxa) for a while, you may know Azure Functions is a serverless FaaS (Function as a Service) offered provided by Microsoft Azure, which is built for your key scenarios, including building web APIs, processing file uploads, responding to database changes, processing IoT data streams, managing message queues, and more.\\n\\n\\n## Custom Handlers: What and Why\\n\\nAzure functions support multiple programming languages including C#, F#, Java, JavaScript, Python, typescript, and PowerShell. If you want to get **extended language support with Azure functions for other languages** such as Go, and Rust, that\u2019s where custom handler comes in.\\n\\nAn Azure function custom handler allows the use of any language that supports HTTP primitives and author Azure functions. With custom handlers, you can use triggers and input and output bindings via extension bundles,  hence it supports all the triggers and bindings you\'re used to with Azure functions.\\n\\n\\n## How a Custom Handler Works\\n\\nLet\u2019s take a look at custom handlers and how it works.  \\n * A request is sent to the function host when an event is triggered.  It\u2019s up to the function host to issue a request payload to the custom handler, which holds the trigger and inputs binding data as well as other metadata for the function. \\n  * The custom handler is a local HTTP web server. It executes the function code and returns a response payload to the Functions host. \\n  * The Functions host passes data from the response to the function\'s output bindings which will be passed to the downstream stream services for data processing. \\n  \\nCheck out [this article to know more about Azure functions custom handlers](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers?WT.mc_id=javascript-74010-cxa).\\n\\n---\\n\\n## Message processing with Custom Handlers\\n\\n[Message processing](https://docs.microsoft.com/azure/architecture/guide/technology-choices/messaging?WT.mc_id=javascript-74010-cxa) is one of the key scenarios that Azure functions are trying to address. In the message-processing scenario, events are often collected in queues. These events can trigger Azure functions to execute a piece of business logic. \\n\\nYou can use the Service Bus trigger to respond to messages from an [Azure Service Bus queue](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview?WT.mc_id=javascript-74010-cxa) - it\'s then up to the Azure functions custom handlers to take further actions to process the messages. The process is described in the following diagram:\\n\\n![Building Serverless Go Applications with Azure functions custom handlers](./img/melony-processing.png)\\n\\nIn Azure function, the `function.json` defines the function\'s trigger, input and output bindings, and other configuration settings. Note that every function can have multiple bindings, but it can only have one trigger. The following is an example of setting up the Service Bus queue trigger in the function.json file :\\n\\n```json\\n{\\n \\"bindings\\": [\\n   {\\n     \\"name\\": \\"queueItem\\",\\n     \\"type\\": \\"serviceBusTrigger\\",\\n     \\"direction\\": \\"in\\",\\n     \\"queueName\\": \\"functionqueue\\",\\n     \\"connection\\": \\"ServiceBusConnection\\"\\n    }\\n   ]\\n}\\n```\\n\\nYou can add a binding definition in the function.json to write the output to a database or other locations of your desire. [Supported bindings can be found here](https://docs.microsoft.com/azure/azure-functions/functions-triggers-bindings?tabs=csharp#add-bindings-to-a-function&WT.mc_id=javascript-74010-cxa).\\n\\nAs we\u2019re programming in Go, so we need to set the value of `defaultExecutablePath` to handler in the `customHandler.description` section in the `host.json` file.\\n\\nAssume we\u2019re programming in Windows OS, and we have named our go application as `server.go`,  after we executed `go build server.go` command,  it produces an executable called `server.exe`. So here we set `server.exe` in the `host.json` as the following example :\\n\\n```json\\n  \\"customHandler\\": {\\n    \\"description\\": {\\n      \\"defaultExecutablePath\\": \\"./server.exe\\",\\n      \\"workingDirectory\\": \\"\\",\\n      \\"arguments\\": []\\n    }\\n  }\\n```\\n\\nWe\u2019re showcasing a simple Go application here with Azure functions custom handlers where we print out the messages received from the function host. The following is the full code of `server.go` application :\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"encoding/json\\"\\n\\t\\"fmt\\"\\n\\t\\"log\\"\\n\\t\\"net/http\\"\\n\\t\\"os\\"\\n)\\n\\ntype InvokeRequest struct {\\n\\tData     map[string]json.RawMessage\\n\\tMetadata map[string]interface{}\\n}\\n\\nfunc queueHandler(w http.ResponseWriter, r *http.Request) {\\n\\tvar invokeRequest InvokeRequest\\n\\n\\td := json.NewDecoder(r.Body)\\n\\td.Decode(&invokeRequest)\\n\\n\\tvar parsedMessage string\\n\\tjson.Unmarshal(invokeRequest.Data[\\"queueItem\\"], &parsedMessage)\\n\\n\\tfmt.Println(parsedMessage)\\n}\\n\\nfunc main() {\\n\\tcustomHandlerPort, exists := os.LookupEnv(\\"FUNCTIONS_CUSTOMHANDLER_PORT\\")\\n\\tif !exists {\\n\\t\\tcustomHandlerPort = \\"8080\\"\\n\\t}\\n\\tmux := http.NewServeMux()\\n\\tmux.HandleFunc(\\"/MessageProcessorFunction\\", queueHandler)\\n\\tfmt.Println(\\"Go server Listening on: \\", customHandlerPort)\\n\\tlog.Fatal(http.ListenAndServe(\\":\\"+customHandlerPort, mux))\\n\\n}\\n```\\n\\nEnsure you have [Azure functions core tools](https://github.com/Azure/azure-functions-core-tools) installed, then we can use func start command to start our function. Then we\u2019ll have have a [C#-based Message Sender application](https://github.com/cloudmelon/cloud-native-serverless/tree/main/message-sender-servicebus/MessageSendToServiceBus) on Github to send out 3000 messages to the Azure service bus queue. You\u2019ll see Azure functions instantly start to process the messages and print out the message as the following:\\n\\n![Monitoring Serverless Go Applications with Azure functions custom handlers](./img/melony-logging.png)\\n\\n---\\n\\n## Azure portal monitoring\\n\\nLet\u2019s go back to Azure portal portal the events see how those messages in Azure Service Bus queue were being processed. There was 3000 messages were queued in the Service Bus queue ( the Blue line stands for incoming Messages ). The outgoing messages (the red line in smaller wave shape ) showing there are progressively being read by Azure functions as the following :\\n\\n![Monitoring Serverless Go Applications with Azure functions custom handlers](./img/melony-monitoring.png)\\n\\nCheck out [this article about monitoring Azure Service bus](https://docs.microsoft.com/azure/service-bus-messaging/monitor-service-bus?WT.mc_id=javascript-74010-cxa) for further information.\\n\\n## Next steps\\n\\nThanks for following along, we\u2019re looking forward to hearing your feedback.  Also, if you discover potential issues, please record them on [Azure Functions host](https://github.com/Azure/azure-functions-host/issues)  GitHub repository or tag us [@AzureFunctions on Twitter](https://twitter.com/AzureFunctions). \\n\\n\\n:::info RESOURCES \\nStart to build your serverless applications with custom handlers, check out the official documentation:\\n\\n * [Getting started with Azure functions custom handlers](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers?WT.mc_id=javascript-74010-cxa) \\n * [Create a Go or Rust function in Azure using Visual Studio Code](https://docs.microsoft.com/azure/azure-functions/create-first-function-vs-code-other?tabs=go%2Cwindows&WT.mc_id=javascript-74010-cxa)\\n:::\\n\\nLife is a journey of learning.  Let\u2019s stay tuned!"},{"id":"12-build-with-dapr","metadata":{"permalink":"/Cloud-Native/blog/12-build-with-dapr","source":"@site/blog/2022-09-12/index.md","title":"12. Build With Dapr!","description":"<FIXME>","date":"2022-09-12T00:00:00.000Z","formattedDate":"September 12, 2022","tags":[{"label":"serverless-september","permalink":"/Cloud-Native/blog/tags/serverless-september"},{"label":"30-days-of-serverless","permalink":"/Cloud-Native/blog/tags/30-days-of-serverless"},{"label":"azure-container-apps","permalink":"/Cloud-Native/blog/tags/azure-container-apps"},{"label":"dapr","permalink":"/Cloud-Native/blog/tags/dapr"},{"label":"microservices","permalink":"/Cloud-Native/blog/tags/microservices"}],"readingTime":7.395,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"12-build-with-dapr","title":"12. Build With Dapr!","authors":["nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["azure","functions","serverless","concepts"],"image":"./img/banner.png","description":"<FIXME>","tags":["serverless-september","30-days-of-serverless","azure-container-apps","dapr","microservices"]},"prevItem":{"title":"\ud83d\ude80 | Use Custom Handlers For Go","permalink":"/Cloud-Native/blog/zero2hero-func-03"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/blog/12-build-with-dapr\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"#30DaysOfServerless: Dapr Integration with ACA\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"#30DaysOfServerless: Dapr Integration with ACA\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://azure.github.io/Cloud-Native/img/banners/post-kickoff.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/blog/12-build-with-dapr\\" />\\n</head>\\n\\n---\\n\\nWelcome to `Day 12` of #30DaysOfServerless!\\n\\nSo far we\'ve looked at Azure Container Apps - what it is, how it enables microservices communication, and how it enables auto-scaling with KEDA compliant scalers. Today we\'ll shift gears and talk about Dapr - the Distributed Application Runtime - and how it makes microservices development with ACA _easier_ with core building blocks and a sidecar architecture!\\n\\nReady? Let\'s go!\\n\\n---\\n\\n## What We\'ll Cover\\n * What is Dapr and why use it?\\n * Building Block APIs\\n * Dapr Quickstart and Tutorials\\n * Dapr-enabled ACA: A Sidecar Approach\\n * Exercise: Build & Deploy a Dapr-enabled ACA.\\n * Resources: For self-study!\\n\\n![](./img/banner.png)\\n\\n---\\n\\n\\n## Hello, Dapr! \\n\\nBuilding distributed applications is hard. Building **reliable and portable microservces** means having middleware that deals with challenges like service discovery, sync and async communications, state management, secure information sharing and more. Integrating these support services into your application can be challenging from both development and maintenance perspectives, adding complexity that is independent of the core application logic you want to focus on.\\n\\nThis is where [**Dapr (Distributed Application Runtime)**](https://dapr.io) shines - [it\'s defined as:](https://docs.dapr.io/):\\n>  a portable, event-driven runtime that makes it easy for any developer to build resilient, stateless and stateful applications that run on the cloud and edge and embraces the diversity of languages and developer frameworks. \\n\\nBut what does this actually mean to me as an app developer? \\n\\n---\\n\\n## Dapr + Apps: A Sidecar Approach\\n\\nThe strength of Dapr lies in its ability to:\\n\\n * abstract complexities of distributed systems middleware - with  **Building Block APIs** that implement components using best practices to tackle key challenges.\\n * implement a **Sidecar Pattern** with interactions via APIs - allowing applications to keep their codebase clean and focus on app logic.\\n * be **Incrementally Adoptable** - allowing developers to start by integrating one API, then evolving to use more as and when needed.\\n * be **Platform Agnostic** - allowing applications to be developed in a preferred language or framework without impacting integration capabilities.\\n\\nThe application-dapr sidecar interaction is illustrated below. The API abstraction allows applications to get the desired functionality without having to know _how_ it was implemented, or without having to integrate Dapr-specific code into their codebase. Note how the sidecar process listens on port `3500` and the API provides clear routes for the specific building blocks supported by Dapr (e.g, `/secrets`, `/state` etc.)\\n\\n![](https://docs.dapr.io/images/overview-sidecar-model.png)\\n\\n---\\n\\n## Dapr Building Blocks: API Interactions\\n\\nDapr Building Blocks refers to **HTTP and gRPC endpoints exposed by Dapr** API endpoints exposed by the Dapr sidecar, providing key capabilities like state management, observability, service-to-service invocation, pub/sub messaging and more to the associated application. \\n\\n| | **Building Blocks: Under the Hood**|\\n|:--|:--|\\n|![](https://docs.dapr.io/images/concepts-building-blocks.png) | The Dapr API is implemented by [modular components](https://docs.dapr.io/concepts/building-blocks-concept/) that codify best practices for tackling the specific challenge that they represent. The API abstraction allows component implementations to evolve, or alternatives to be used , without requiring changes to the application codebase. |\\n\\n![](https://docs.dapr.io/images/building_blocks.png)\\n\\nThe [latest Dapr release](https://docs.dapr.io/concepts/building-blocks-concept/) has the building blocks shown in the above figure. Not all capabilities are available to Azure Container Apps by default -  check the [documentation](https://learn.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml#unsupported-dapr-capabilities) for the latest updates on this. For now, Azure Container Apps + Dapr integration provides the following capabilities to the application:\\n \\n * [Service-to-Service Invocation](https://docs.dapr.io/developing-applications/building-blocks/service-invocation/service-invocation-overview/) for synchronous communications\\n * [State management](https://docs.dapr.io/developing-applications/building-blocks/state-management/state-management-overview/) for transactions and CRUD operations\\n * [Pub/Sub messaging](https://docs.dapr.io/developing-applications/building-blocks/pubsub/pubsub-overview) for asynchronous (message-driven) communications\\n * [Bindings](https://docs.dapr.io/developing-applications/building-blocks/bindings/bindings-overview/) for seamless workflow integrations using event triggers\\n * [Actors](https://docs.dapr.io/developing-applications/building-blocks/actors/actors-overview/) for encapsulated & reusable objects that enable reliable, scalable behaviors\\n * [Observability](https://learn.microsoft.com/azure/container-apps/observability) to monitor application events for health and performance\\n * [Secrets](https://docs.dapr.io/developing-applications/building-blocks/secrets/) for securely accessing sensitive values.\\n\\nIn the next section, we\'ll dive into Dapr-enabled Azure Container Apps. Before we do that, here are a couple of resources to help you explore the Dapr platform by itself, and get more hands-on experience with the concepts and capabilities:\\n * [Dapr Quickstarts](https://docs.dapr.io/getting-started/quickstarts/) - build your first Dapr app, then explore quickstarts for a core APIs including service-to-service invocation, pub/sub, state mangement, bindings and secrets management.\\n * [Dapr Tutorials](https://docs.dapr.io/getting-started/tutorials/) - go beyond the basic quickstart and explore more realistic service integrations and usage scenarios. Try the [distributed calculator](https://github.com/dapr/quickstarts/tree/master/tutorials/distributed-calculator) example!\\n\\n\\n## Integrate Dapr & Azure Container Apps\\n\\nDapr currently has a [v1.9 (preview)](https://v1-9.docs.dapr.io/) version, but Azure Container Apps supports [Dapr v1.8](https://learn.microsoft.com/azure/container-apps/dapr-overview#current-supported-dapr-version). In this section, we\'ll look at what it takes to enable, configure, and use, Dapr integration with Azure Container Apps. It involves 3 steps: _enabling_ Dapr using settings, _configuring_ Dapr components (API) for use, then invoking the APIs.\\n\\nHere\'s a simple [a publisher-subscriber scenario](https://learn.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml#dapr-settings) from the documentation. We have two Container apps identified as `publisher-app` and `subscriber-app` deployed in a single environment. Each ACA has an activated `daprd` sidecar, allowing them to use the _Pub/Sub_ API to communicate asynchronously with each other - without having to write the underlying pub/sub implementation themselves. Rather, we can see that the Dapr API uses a `pubsub,azure.servicebus` **component** to implement that capability.\\n\\n![Pub/sub example](https://learn.microsoft.com/azure/container-apps/media/dapr-overview/dapr-in-aca.png)\\n\\nLet\'s look at how this is setup.\\n\\n### 1. [Enable Dapr in ACA: Settings](https://learn.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml#enable-dapr) \\n\\nWe can enable Dapr integration in the Azure Container App during creation by _specifying settings_ in one of two ways, based on your development preference:\\n * **Using Azure CLI**: use custom commandline options for each setting\\n * **Using Infrastructure-as-Code (IaC)**: using properties for Bicep, ARM templates\\n\\nOnce enabled, Dapr will run in the same _environment_ as the Azure Container App, and listen on **port 3500** for API requests. The Dapr sidecar can be shared my multiple Container Apps _deployed in the same environment_. \\n\\nThere are four main settings we will focus on for this demo - the example below shows the ARM template properties, but you can [find the equivalent CLI parameters here](https://learn.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml#enable-dapr) for comparison.\\n * `dapr.enabled` - enable Dapr for Azure Container App\\n * `dapr.appPort` - specify port on which app is listening\\n * `dapr.appProtocol` - specify if using `http` (default) or `gRPC` for API\\n * `dapr.appId` - specify unique application ID for service discovery, usage\\n\\nThese are defined under the `properties.configuration` section for your resource. Changing Dapr settings does not update the revision but it _will_ restart ACA revisions and replicas. Here is what the relevant section of the ARM template looks like for the `publisher-app` ACA in the scenario shown above.\\n\\n ```json\\n \\"dapr\\": {\\n    \\"enabled\\": true,\\n    \\"appId\\": \\"publisher-app\\",\\n    \\"appProcotol\\": \\"http\\",\\n    \\"appPort\\": 80\\n  }\\n ```\\n\\n### 2. [Configure Dapr in ACA:  Components](https://learn.microsoft.com/azure/container-apps/dapr-overview?tabs=bicep1%2Cyaml#configure-dapr-components)\\n\\nThe next step after activating the Dapr sidecar, is to define the _APIs_ that you want to use and potentially specify the **Dapr components** (specific implementations of that API) that you prefer. These components are created at environment-level and by default, Dapr-enabled containers apps in an environment will load the complete set of deployed components -- **use the `scopes` property** to ensure only components needed by a given app are loaded at runtime. Here\'s what the ARM template `resources` section looks like for the example above. This tells us that the environment has a `dapr-pubsub` component of type `pubsub.azure.servicebus` deployed - where that component is loaded by container apps with dapr ids (`publisher-app`, `subscriber-app`).\\n\\n:::info  USING MANAGED IDENTITY + DAPR\\n\\nThe secrets approach used here is idea for demo purposes. However, we recommend using _Managed Identity with Dapr_ in production. For more details on secrets, check out tomorrow\'s post on _Secrets and Managed Identity in Azure Container Apps_\\n:::\\n  \\n```json\\n{\\n  \\"resources\\": [\\n    {\\n      \\"type\\": \\"daprComponents\\",\\n      \\"name\\": \\"dapr-pubsub\\",\\n      \\"properties\\": {\\n        \\"componentType\\": \\"pubsub.azure.servicebus\\",\\n        \\"version\\": \\"v1\\",\\n        \\"secrets\\": [\\n          {\\n            \\"name\\": \\"sb-root-connectionstring\\",\\n            \\"value\\": \\"value\\"\\n          }\\n        ],\\n        \\"metadata\\": [\\n          {\\n            \\"name\\": \\"connectionString\\",\\n            \\"secretRef\\": \\"sb-root-connectionstring\\"\\n          }\\n        ],\\n        // Application scopes\\n        \\"scopes\\": [\\"publisher-app\\", \\"subscriber-app\\"]\\n\\n      }\\n    }\\n  ]\\n}\\n```\\n\\nWith this configuration, the ACA is now set to use pub/sub capabilities from the Dapr sidecar, using standard HTTP requests to the exposed API endpoint for this service.\\n\\n## Exercise: Deploy Dapr-enabled ACA\\n\\nIn the next couple posts in this series, we\'ll be discussing how you can use the Dapr secrets API and doing a walkthrough of a more complex example, to show how Dapr-enabled Azure Container Apps are created and deployed. \\n\\nHowever, you can get hands-on experience with these concepts by walking through one of these two tutorials, each providing an alternative approach to configure and setup the application describe in the scenario below:\\n * **Tutorial 1**: [Deploy a Dapr-enabled ACA using **Azure CLI**](https://learn.microsoft.com/azure/container-apps/microservices-dapr)\\n * **Tutorial 2**: [Deploy a Dapr-enabled ACA using **Bicep or ARM templates**](https://learn.microsoft.com/azure/container-apps/microservices-dapr)\\n\\n![](https://learn.microsoft.com/azure/container-apps/media/microservices-dapr/azure-container-apps-microservices-dapr.png)\\n\\n\\n## Resources\\n\\nHere are the main resources to explore for self-study:\\n * [Dapr Documentation: Core Concepts](https://v1-9.docs.dapr.io/concepts/)\\n * [Dapr Quickstarts](https://docs.dapr.io/getting-started/quickstarts/)\\n * [Dapr Tutorials](https://docs.dapr.io/getting-started/tutorials/)\\n * [Azure Container Apps: Dapr Integration](https://learn.microsoft.com/azure/container-apps/dapr-overview)\\n * [Dapr-enable Azure Container Apps: Using Azure CLI](https://learn.microsoft.com/azure/container-apps/microservices-dapr)\\n * [Dapr-enabled Azure Container Apps: Using Bicep or ARM](https://learn.microsoft.com/azure/container-apps/microservices-dapr-azure-resource-manager)"}]}')}}]);