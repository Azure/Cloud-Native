"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42267],{41196:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"fundamentals-day-1","metadata":{"permalink":"/Cloud-Native/cnny-2023/fundamentals-day-1","source":"@site/blog-cnny/2023-01-30/PodsAndDeployments.md","title":"2-1. Kubernetes Fundamentals - Pods and Deployments","description":"The theme for this week is Kubernetes fundamentals. Today we\'ll explore the topic of Pods and Deployments in Kubernetes.","date":"2023-01-30T00:00:00.000Z","formattedDate":"January 30, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"}],"readingTime":12.92,"hasTruncateMarker":false,"authors":[{"name":"Steven Murawski","title":"Principal Cloud Advocate","url":"https://github.com/smurawski","imageURL":"https://github.com/smurawski.png","key":"steven"}],"frontMatter":{"slug":"fundamentals-day-1","title":"2-1. Kubernetes Fundamentals - Pods and Deployments","authors":["steven"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["pods","deployments","kubernetes","aks","container-apps","cloud-native"],"image":"https://azure.github.io/Cloud-Native/img/og/30-06.png","description":"The theme for this week is Kubernetes fundamentals. Today we\'ll explore the topic of Pods and Deployments in Kubernetes.","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service"]},"nextItem":{"title":"1-5. Exploring Cloud-Native Options","permalink":"/Cloud-Native/cnny-2023/explore-options"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://azure.github.io/Cloud-Native/blog/fundamentals-day-1\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"2-1. Kubernetes Fundamentals - Pods and Deployments\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"The theme for this week is Kubernetes fundamentals. Today we\'ll explore the topic of Pods and Deployments in Kubernetes.\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"image: https://azure.github.io/Cloud-Native/img/og/30-06.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@stevenmurawski\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://azure.github.io/Cloud-Native/blog/fundamentals-day-1\\" />\\n</head>\\n\\nWelcome to `Day #1 of Week 2` of #CloudNativeNewYear!\\n\\nThe theme for this week is Kubernetes fundamentals. Last week we talked about Cloud Native architectures and the Cloud Native landscape. Today we\'ll explore the topic of Pods and Deployments in Kubernetes.\\n\\n:::tip Friday, February 3rd at 11 AM PST\\n\\nJoin us for a live demo and let us answer your questions.\\n\\n[We\'ll be live on YouTube walking through today\'s (and the rest of this week\'s) demos](https://aka.ms/cnny/live-coding).  Join us Friday, February 3rd and bring your questions!\\n\\n:::\\n\\n## What We\'ll Cover\\n * Setting Up A Kubernetes Environment in Azure\\n * Running Containers in Kubernetes Pods\\n * Making the Pods Resilient with Deployments\\n * Exercise\\n * Resources\\n\\n## Setting Up A Kubernetes Environment in Azure\\n\\nFor this week, we\'ll be working with a simple app - [the Azure Voting App](https://aka.ms/azure-voting-app-rust). My teammate [Paul Yu](https://github.com/pauldotyu) ported the app to Rust and we tweaked it a bit to let us highlight some of the basic features of Kubernetes.\\n\\nYou should be able to replicate this in just about any Kubernetes environment, but we\'ll use [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/intro-kubernetes?WT.mc_id=containers-84290-stmuraws) (AKS) as our working environment for this week.\\n\\nTo make it easier to get started, there\'s a [Bicep](https://learn.microsoft.com/azure/azure-resource-manager/bicep/overview?WT.mc_id=containers-84290-stmuraws&tabs=bicep) template to deploy an AKS cluster, an Azure Container Registry (ACR) (to host our container image), and connect the two so that we can easily deploy our application.\\n\\n### Step 0 - Prerequisites\\n\\nThere are a few things you\'ll need if you want to work through this and the following examples this week.\\n\\nRequired:\\n\\n* Git (and probably a GitHub account if you want to persist your work outside of your computer)\\n* Azure CLI\\n* An Azure subscription (if you want to follow along with the Azure steps)\\n* Kubectl (the command line tool for managing Kubernetes)\\n\\nHelpful:\\n\\n* Visual Studio Code (or equivalent editor)\\n\\n### Step 1 - Clone the application repository\\n\\nFirst, I forked [the source repository](https://aka.ms/azure-voting-app-rust) to my account.\\n\\n```powershell\\n$GitHubOrg = \'smurawski\' # Replace this with your GitHub account name or org name\\ngit clone \\"https://github.com/$GitHubOrg/azure-voting-app-rust\\"\\ncd azure-voting-app-rust\\n```\\n\\nLeave your shell opened with your current location inside the application repository.\\n\\n### Step 2 - Set up AKS\\n\\nRunning the template deployment from the demo script (I\'m using the PowerShell example in [cnny23-week2-day1.ps1](https://aka.ms/azure-voting-app-rust/setup-powershell), but there\'s a Bash variant at [cnny23-week2-day1.sh](https://aka.ms/azure-voting-app-rust/setup-bash)) stands up the environment.  The second, third, and fourth commands take some of the output from the Bicep deployment to set up for later commands, so don\'t close out your shell after you run these commands.\\n\\n```powershell\\naz deployment sub create --template-file ./deploy/main.bicep --location eastus --parameters \'resourceGroup=cnny-week2\'\\n$AcrName = az deployment sub show --name main --query \'properties.outputs.acr_name.value\' -o tsv\\n$AksName = az deployment sub show --name main --query \'properties.outputs.aks_name.value\' -o tsv\\n$ResourceGroup = az deployment sub show --name main --query \'properties.outputs.resource_group_name.value\' -o tsv\\n\\naz aks get-credentials --resource-group $ResourceGroup --name $AksName\\n```\\n\\n### Step 3 - Build our application container\\n\\nSince we have an Azure Container Registry set up, I\'ll use ACR Build Tasks to build and store my container image.\\n\\n```powershell\\naz acr build --registry $AcrName --% --image cnny2023/azure-voting-app-rust:{{.Run.ID}} .\\n$BuildTag = az acr repository show-tags `\\n                              --name $AcrName `\\n                              --repository cnny2023/azure-voting-app-rust `\\n                              --orderby time_desc `\\n                              --query \'[0]\' -o tsv\\n```\\n\\n:::tip\\nWondering what the `--%` is in the first command line?  That tells the PowerShell interpreter to pass the input after it \\"as is\\" to the command without parsing/evaluating it. Otherwise, PowerShell messes a bit with the templated `{{.Run.ID}}` bit.\\n:::\\n\\n## Running Containers in Kubernetes Pods\\n\\nNow that we have our AKS cluster and application image ready to go, let\'s look into how Kubernetes runs containers.\\n\\nIf you\'ve been in tech for any length of time, you\'ve seen that every framework, runtime, orchestrator, etc.. can have their own naming scheme for their concepts. So let\'s get into some of what Kubernetes calls things.\\n\\n### The Pod\\n\\nA container running in Kubernetes is called a [Pod](https://learn.microsoft.com/azure/aks/concepts-clusters-workloads?WT.mc_id=containers-84290-stmuraws#pods). A Pod is basically a running container on a [Node](https://learn.microsoft.com/azure/aks/concepts-clusters-workloads?WT.mc_id=containers-84290-stmuraws#nodes-and-node-pools) or VM. It can be more. For example you can run multiple containers and specify some funky configuration, but we\'ll keep it simple for now - add the complexity when you need it.\\n\\nOur Pod definition can be created via the `kubectl` command imperatively from arguments or declaratively from a configuration file.  We\'ll do a little of both.  We\'ll use the `kubectl` command to help us write our configuration files.  Kubernetes configuration files are YAML, so having an editor that supports and can help you syntax check YAML is really helpful.\\n\\n### Creating a Pod Definition\\n\\nLet\'s create a few Pod definitions.  Our application requires two containers to get working - the application and a database.\\n\\nLet\'s create the database Pod first.  And before you comment, the configuration isn\'t secure nor best practice.  We\'ll fix that later this week.  For now, let\'s focus on getting up and running.\\n\\nThis is a trick I learned from one of my teammates - Paul.  By using the `--output yaml` and `--dry-run=client` options, we can have the command help us write our YAML.  And with a bit of output redirection, we can stash it safely in a file for later use.\\n\\n```powershell\\nkubectl run azure-voting-db `\\n            --image \\"postgres:15.0-alpine\\" `\\n            --env \\"POSTGRES_PASSWORD=mypassword\\" `\\n            --output yaml `\\n            --dry-run=client > manifests/pod-db.yaml\\n```\\n\\nThis creates a file that looks like:\\n\\n```yml\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  creationTimestamp: null\\n  labels:\\n    run: azure-voting-db\\n  name: azure-voting-db\\nspec:\\n  containers:\\n  - env:\\n    - name: POSTGRES_PASSWORD\\n      value: mypassword\\n    image: postgres:15.0-alpine\\n    name: azure-voting-db\\n    resources: {}\\n  dnsPolicy: ClusterFirst\\n  restartPolicy: Always\\nstatus: {}\\n```\\n\\nThe file, when supplied to the Kubernetes API, will identify what kind of resource to create, the API version to use, and the details of the container (as well as an environment variable to be supplied).\\n\\nWe\'ll get that container image started with the `kubectl` command.  Because the details of what to create are in the file, we don\'t need to specify much else to the `kubectl` command but the path to the file.\\n\\n```powershell\\nkubectl apply -f ./manifests/pod-db.yaml\\n```\\n\\nI\'m going to need the IP address of the Pod, so that my application can connect to it, so we can use `kubectl` to get some information about our pod.  By default, `kubectl get pod` only displays certain information but it retrieves a lot more.  We can use the [JSONPath syntax](https://kubernetes.io/docs/reference/kubectl/jsonpath/) to index into the response and get the information you want.\\n\\n:::tip\\n\\nTo see what you can get, I usually run the `kubectl` command with the output type (`-o JSON`) of JSON and then I can find where the data I want is and create my JSONPath query to get it.\\n\\n:::\\n\\n```powershell,\\n$DB_IP = kubectl get pod azure-voting-db -o jsonpath=\'{.status.podIP}\'\\n```\\n\\nNow, let\'s create our Pod definition for our application.  We\'ll use the same technique as before.\\n\\n```powershell\\nkubectl run azure-voting-app `\\n            --image \\"$AcrName.azurecr.io/cnny2023/azure-voting-app-rust:$BuildTag\\" `\\n            --env \\"DATABASE_SERVER=$DB_IP\\" `\\n            --env \\"DATABASE_PASSWORD=mypassword`\\n            --output yaml `\\n            --dry-run=client > manifests/pod-app.yaml\\n```\\n\\nThat command gets us a similar YAML file to the database container - you can see [the full file here](https://github.com/azure-samples/azure-voting-app-rust/blob/week2/day1/manifests/pod-app.yaml)\\n\\nLet\'s get our application container running.\\n\\n```powershell\\nkubectl apply -f ./manifests/pod-app.yaml\\n```\\n\\n### Now that the Application is Running\\n\\nWe can check the status of our Pods with:\\n\\n```powershell\\nkubectl get pods\\n```\\n\\nAnd we should see something like:\\n\\n```\\nazure-voting-app-rust \u276f  kubectl get pods\\nNAME               READY   STATUS    RESTARTS   AGE\\nazure-voting-app   1/1     Running   0          36s\\nazure-voting-db    1/1     Running   0          84s\\n```\\n\\nOnce our pod is running, we can check to make sure everything is working by letting `kubectl` proxy network connections to our Pod running the application. If we get the voting web page, we\'ll know the application found the database and we can start voting!\\n\\n```powershell\\nkubectl port-forward pod/azure-voting-app 8080:8080\\n```\\n\\n![Azure voting website in a browser with three buttons, one for Dogs, one for Cats, and one for Reset.  The counter is Dogs - 0 and Cats - 0.](../../static/img/cnny23/azure_voting_app.png)\\n\\nWhen you are done voting, you can stop the port forwarding by using Control-C to break the command.\\n\\n### Clean Up\\n\\nLet\'s clean up after ourselves and see if we can\'t get Kubernetes to help us keep our application running.  We can use the same configuration files to ensure that Kubernetes only removes what we want removed.\\n\\n```powershell\\nkubectl delete -f ./manifests/pod-app.yaml\\nkubectl delete -f ./manifests/pod-db.yaml\\n```\\n\\n### Summary - Pods\\n\\nA Pod is the most basic unit of work inside Kubernetes. Once the Pod is deleted, it\'s gone.  That leads us to our next topic (and final topic for today.)\\n\\n## Making the Pods Resilient with Deployments\\n\\nWe\'ve seen how easy it is to deploy a Pod and get our containers running on Nodes in our Kubernetes cluster.  But there\'s a problem with that.  Let\'s illustrate it.\\n\\n### Breaking Stuff\\n\\n#### Setting Back Up\\n\\nFirst, let\'s redeploy our application environment.  We\'ll start with our application container.\\n\\n```powershell\\nkubectl apply -f ./manifests/pod-db.yaml\\nkubectl get pod azure-voting-db -o jsonpath=\'{.status.podIP}\'\\n```\\n\\nThe second command will report out the new IP Address for our database container.  Let\'s open `./manifests/pod-app.yaml` and update the container IP to our new one.\\n\\n```yml\\n- name: DATABASE_SERVER\\n  value: YOUR_NEW_IP_HERE\\n```\\n\\nThen we can deploy the application with the information it needs to find its database.  We\'ll also list out our pods to see what is running.\\n\\n```powershell\\nkubectl apply -f ./manifests/pod-app.yaml\\nkubectl get pods\\n```\\n\\nFeel free to look back and use the port forwarding trick to make sure your app is running if you\'d like.\\n\\n#### Knocking It Down\\n\\nThe first thing we\'ll try to break is our application pod.  Let\'s delete it.\\n\\n```powershell\\nkubectl delete pod azure-voting-app\\n```\\n\\nThen, we\'ll check our pod\'s status:\\n\\n```powershell\\nkubectl get pods\\n```\\n\\nWhich should show something like:\\n\\n```\\nazure-voting-app-rust \u276f  kubectl get pods\\nNAME              READY   STATUS    RESTARTS   AGE\\nazure-voting-db   1/1     Running   0          50s\\n```\\n\\nWe should be able to recreate our application pod deployment with no problem, since it has the current database IP address and nothing else depends on it.\\n\\n```powershell\\nkubectl apply -f ./manifests/pod-app.yaml\\n```\\n\\nAgain, feel free to do some fun port forwarding and check your site is running.\\n\\n#### Uncomfortable Truths\\n\\nHere\'s where it gets a bit stickier, what if we delete the database container?\\n\\nIf we delete our database container and recreate it, it\'ll likely have a new IP address, which would force us to update our application configuration.  We\'ll look at some solutions for these problems in the next three posts this week.\\n\\nBecause our database problem is a bit tricky, we\'ll primarily focus on making our application layer more resilient and prepare our database layer for those other techniques over the next few days.\\n\\nLet\'s clean back up and look into making things more resilient.\\n\\n```powershell\\nkubectl delete -f ./manifests/pod-app.yaml\\nkubectl delete -f ./manifests/pod-db.yaml\\n```\\n\\n### The Deployment\\n\\nOne of the reasons you may want to use Kubernetes is it\'s ability to orchestrate workloads.  Part of that orchestration includes being able to ensure that certain workloads are running (regardless of what Node they might be on).\\n\\nWe saw that we could delete our application pod and then restart it from the manifest with little problem.  It just meant that we had to run a command to restart it.  We can use the [Deployment](https://learn.microsoft.com/azure/aks/concepts-clusters-workloads?WT.mc_id=containers-84290-stmuraws#deployments-and-yaml-manifests) in Kubernetes to tell the orchestrator to ensure we have our application pod running.\\n\\nThe Deployment also can encompass a lot of extra configuration - controlling how many containers of a particular type should be running, how upgrades of container images should proceed, and more.\\n\\n#### Creating the Deployment\\n\\nFirst, we\'ll create a Deployment for our database. We\'ll use a technique similar to what we did for the Pod, with just a bit of difference.\\n\\n```powershell\\nkubectl create deployment azure-voting-db `\\n                            --image \\"postgres:15.0-alpine\\" `\\n                            --port 5432 `\\n                            --output yaml `\\n                            --dry-run=client > manifests/deployment-db.yaml\\n```\\n\\nUnlike our Pod definition creation, we can\'t pass in environment variable configuration from the command line.  We\'ll have to edit the YAML file to add that.\\n\\nSo, let\'s open `./manifests/deployment-db.yaml` in our editor and add the following in the `spec/containers` configuration.\\n\\n```yml\\n        env:\\n        - name: POSTGRES_PASSWORD\\n          value: \\"mypassword\\"\\n```\\n\\nYour file should look like this [deployment-db.yaml](https://github.com/azure-samples/azure-voting-app-rust/blob/week2/day1/manifests/deployment-db.yaml).\\n\\nOnce we have our configuration file updated, we can deploy our database container image.\\n\\n```powershell\\nkubectl apply -f ./manifests/deployment-db.yaml\\n```\\n\\nFor our application, we\'ll use the same technique.\\n\\n```powershell\\nkubectl create deployment azure-voting-app `\\n                        --image \\"$AcrName.azurecr.io/cnny2023/azure-voting-app-rust:$BuildTag\\" `\\n                        --port 8080 `\\n                        --output yaml `\\n                        --dry-run=client > manifests/deployment-app.yaml\\n```\\n\\nNext, we\'ll need to add an environment variable to the generated configuration.  We\'ll also need the new IP address for the database deployment.\\n\\nPreviously, we named the pod and were able to ask for the IP address with `kubectl` and a bit of JSONPath. Now, the deployment created the pod for us, so there\'s a bit of random in the naming.  Check out:\\n\\n```powershell\\nkubectl get pods\\n```\\n\\nShould return something like:\\n\\n```\\nazure-voting-app-rust \u276f  kubectl get pods\\nNAME                               READY   STATUS    RESTARTS   AGE\\nazure-voting-db-686d758fbf-8jnq8   1/1     Running   0          7s\\n```\\n\\nWe can either ask for the IP with the new pod name, or we can use a [selector](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors) to find our desired pod.\\n\\n```powershell\\nkubectl get pod --selector app=azure-voting-db -o jsonpath=\'{.items[0].status.podIP}\'\\n```\\n\\nNow, we can update our application deployment configuration file with:\\n\\n```yml\\n        env:\\n        - name: DATABASE_SERVER\\n          value: YOUR_NEW_IP_HERE\\n        - name: DATABASE_PASSWORD\\n          value: mypassword\\n```\\n\\nYour file should look like this [deployment-app.yaml](https://github.com/azure-samples/azure-voting-app-rust/blob/week2/day1/manifests/deployment-app.yaml) (but with IPs and image names matching your environment).\\n\\nAfter we save those changes, we can deploy our application.\\n\\n```powershell\\nkubectl apply -f ./manifests/deployment-app.yaml\\n```\\n\\nLet\'s test the resilience of our app now. First, we\'ll delete the pod running our application, then we\'ll check to make sure Kubernetes restarted our application pod.\\n\\n```powershell\\nkubectl get pods\\n```\\n\\n```\\nazure-voting-app-rust \u276f  kubectl get pods\\nNAME                                READY   STATUS    RESTARTS   AGE\\nazure-voting-app-56c9ccc89d-skv7x   1/1     Running   0          71s\\nazure-voting-db-686d758fbf-8jnq8    1/1     Running   0          12m\\n```\\n\\n```powershell\\nkubectl delete pod azure-voting-app-56c9ccc89d-skv7x\\nkubectl get pods\\n```\\n\\n```\\nazure-voting-app-rust \u276f  kubectl delete pod azure-voting-app-56c9ccc89d-skv7x\\n>> kubectl get pods\\npod \\"azure-voting-app-56c9ccc89d-skv7x\\" deleted\\nNAME                                READY   STATUS    RESTARTS   AGE\\nazure-voting-app-56c9ccc89d-2b5mx   1/1     Running   0          2s\\nazure-voting-db-686d758fbf-8jnq8    1/1     Running   0          14m\\n```\\n\\n:::info\\nYour Pods will likely have different identifiers at the end, so adjust your commands to match the names in your environment.\\n:::\\n\\nAs you can see, by the time the `kubectl get pods` command was run, Kubernetes had already spun up a new pod for the application container image.  Thanks Kubernetes!\\n\\n### Clean up\\n\\nSince we can\'t just delete the pods, we have to delete the deployments.\\n\\n```powershell\\nkubectl delete -f ./manifests/deployment-app.yaml\\nkubectl delete -f ./manifests/deployment-db.yaml\\n```\\n\\n### Summary - Deployments\\n\\nDeployments allow us to create more durable configuration for the workloads we deploy into Kubernetes. As we dig deeper, we\'ll discover more capabilities the deployments offer. Check out the Resources below for more.\\n\\n## Exercise\\n\\nIf you want to try these steps, head over to [the source repository](https://aka.ms/azure-voting-app-rust), fork it, clone it locally, and give it a spin!\\n\\nYou can check your manifests against the manifests in the `week2/day1` [branch of the source repository](https://github.com/azure-samples/azure-voting-app-rust/tree/week2/day1/manifests).\\n\\n## Resources\\n\\n### Documentation\\n\\n* [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/intro-kubernetes?WT.mc_id=containers-84290-stmuraws)\\n* [Bicep](https://learn.microsoft.com/azure/azure-resource-manager/bicep/overview?WT.mc_id=containers-84290-stmuraws&tabs=bicep)\\n* [Azure Voting App in Rust](https://aka.ms/azure-voting-app-rust)\\n* [Pods](https://learn.microsoft.com/azure/aks/concepts-clusters-workloads?WT.mc_id=containers-84290-stmuraws#pods).\\n* [Nodes](https://learn.microsoft.com/azure/aks/concepts-clusters-workloads?WT.mc_id=containers-84290-stmuraws#nodes-and-node-pools)\\n* [kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/)\\n* [JSONPath syntax](https://kubernetes.io/docs/reference/kubectl/jsonpath/)\\n* [Deployment](https://learn.microsoft.com/azure/aks/concepts-clusters-workloads?WT.mc_id=containers-84290-stmuraws#deployments-and-yaml-manifests)\\n* [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)\\n\\n### Training\\n\\n* [Learning Path - Introduction to Kubernetes on Azure](https://learn.microsoft.com/training/paths/intro-to-kubernetes-on-azure/?WT.mc_id=containers-84290-stmuraws)"},{"id":"explore-options","metadata":{"permalink":"/Cloud-Native/cnny-2023/explore-options","source":"@site/blog-cnny/2023-01-27/explore-options.md","title":"1-5. Exploring Cloud-Native Options","description":"There are many cloud-native technologies - but which are the best fit for your projects?","date":"2023-01-27T00:00:00.000Z","formattedDate":"January 27, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"}],"readingTime":5.55,"hasTruncateMarker":false,"authors":[{"name":"Cory Skimming","title":"Sr. Product Marketing Manager","url":"https://twitter.com/cskimming","imageURL":"https://pbs.twimg.com/profile_images/1493684068227055617/iC9r8v6Z_400x400.jpg","key":"cory"}],"frontMatter":{"slug":"explore-options","title":"1-5. Exploring Cloud-Native Options","authors":["cory"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["cloud-native","containers","decision-tree","kubernetes","serverless","microservices"],"image":"https://azure.github.io/Cloud-Native/img/og/30-05.png","description":"There are many cloud-native technologies - but which are the best fit for your projects?","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service"]},"prevItem":{"title":"2-1. Kubernetes Fundamentals - Pods and Deployments","permalink":"/Cloud-Native/cnny-2023/fundamentals-day-1"},"nextItem":{"title":"1-4. Microservices 101","permalink":"/Cloud-Native/cnny-2023/microservices-101"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/cnny-2023/explore-options\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Serverless Container Options\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Explore technology and tooling options for building and deploying your Cloud-native solution\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://azure.github.io/Cloud-Native/img/og/30-05.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@cskimming\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/cnny-2023/explore-options\\" />\\n</head>\\n\\nWe are excited to be wrapping up our first week of #CloudNativeNewYear! This week, we have tried to set the stage by covering the fundamentals of cloud-native practices and technologies, including primers on [containerization](https://azure.github.io/Cloud-Native/cnny-2023/containers-101/), [microservices](https://azure.github.io/Cloud-Native/cnny-2023/microservices-101), and [Kubernetes](https://azure.github.io/Cloud-Native/cnny-2023/Kubernetes-101).  \\n\\n:::tip Don\'t forget to sign up for the the [Cloud Skills Challenge](https://aka.ms/CNNY/Challenge)!\\n\\n:::\\n\\nToday, we will do a brief recap of some of these technologies and provide some basic guidelines for when it is optimal to use each. \\n\\n---\\n\\n## What We\'ll Cover\\n* To Containerize or not to Containerize?\\n* The power of Kubernetes\\n* Where does Serverless fit? \\n* Resources\\n* What\'s coming next!\\n\\n![](./../../static/img/cnny23/hero-banner.png)\\n\\n---\\n\\n:::info Just joining us now? Check out these other Week 1 posts:\\n\\n * [Cloud-native fundamentals](https://azure.github.io/Cloud-Native/cnny-2023/cloud-native-fundamentals)\\n * [Containers 101](https://azure.github.io/Cloud-Native/cnny-2023/containers-101)\\n * [Microservices 101](https://azure.github.io/Cloud-Native/cnny-2023/microservices-101)\\n * [Kubernetes 101](https://azure.github.io/Cloud-Native/cnny-2023/Kubernetes-101)\\n \\n:::\\n\\n--- \\n## To Containerize or not to Containerize? \\n\\nAs mentioned in our Containers 101 post earlier this week, containers can provide several benefits over traditional virtualization methods, which has made them popular within the software development community. Containers provide a consistent and predictable runtime environment, which can help reduce the risk of compatibility issues and simplify the deployment process. Additionally, containers can improve resource efficiency by allowing multiple applications to run on the same host while isolating their dependencies. \\n\\nSome types of apps that are a particularly good fit for containerization include: \\n\\n1.\\t**Microservices:** Containers are particularly well-suited for microservices-based applications, as they can be used to isolate and deploy individual components of the system. This allows for more flexibility and scalability in the deployment process.\\n2.\\t**Stateless applications:** Applications that do not maintain state across multiple sessions, such as web applications, are well-suited for containers. Containers can be easily scaled up or down as needed and replaced with new instances, without losing data.\\n3.\\t**Portable applications:** Applications that need to be deployed in different environments, such as on-premises, in the cloud, or on edge devices, can benefit from containerization. The consistent and portable runtime environment of containers can make it easier to move the application between different environments.\\n4.\\t**Legacy applications:** Applications that are built using older technologies or that have compatibility issues can be containerized to run in an isolated environment, without impacting other applications or the host system.\\n5.\\t**Dev and testing environments:** Containerization can be used to create isolated development and testing environments, which can be easily created and destroyed as needed.\\n\\nWhile there are many types of applications that can benefit from a containerized approach, it\'s worth noting that containerization is not **always** the best option, and it\'s important to weigh the benefits and trade-offs before deciding to containerize an application. Additionally, some types of applications may not be a good fit for containers including:\\n\\n* Apps that require full access to host resources: Containers are isolated from the host system, so if an application needs direct access to hardware resources such as GPUs or specialized devices, it might not work well in a containerized environment.\\n* Apps that require low-level system access: If an application requires deep access to the underlying operating system, it may not be suitable for running in a container.\\n* Applications that have specific OS dependencies: Apps that have specific dependencies on a certain version of an operating system or libraries may not be able to run in a container.\\n* Stateful applications: Apps that maintain state across multiple sessions, such as databases, may not be well suited for containers. Containers are ephemeral by design, so the data stored inside a container may not persist between restarts.\\n\\nThe good news is that some of these limitations can be overcome with the use of specialized containerization technologies such as Kubernetes, and by carefully designing the architecture of the application. \\n\\n---\\n## The power of Kubernetes\\n\\nSpeaking of Kubernetes...\\n\\nKubernetes is a powerful tool for managing and deploying containerized applications in production environments, particularly for applications that need to scale, handle large numbers of requests, or run in multi-cloud or hybrid environments.\\n\\nKubernetes is well-suited for a wide variety of applications, but it is particularly well-suited for the following types of applications:\\n\\n1.\\t**Microservices-based applications:** Kubernetes provides a powerful set of tools for managing and deploying microservices-based applications, making it easy to scale, update, and manage the individual components of the application.\\n2.\\t**Stateful applications:** Kubernetes provides support for stateful applications through the use of Persistent Volumes and StatefulSets, allowing for applications that need to maintain state across multiple instances. \\n3.\\t**Large-scale, highly-available systems:** Kubernetes provides built-in support for scaling, self-healing, and rolling updates, making it an ideal choice for large-scale, highly-available systems that need to handle large numbers of users and requests.\\n4.\\t**Multi-cloud and hybrid environments:** Kubernetes can be used to deploy and manage applications across multiple cloud providers and on-premises environments, making it a good choice for organizations that want to take advantage of the benefits of multiple cloud providers or that need to deploy applications in a hybrid environment.\\n\\n:::info New to Kubernetes?\\n\\nCatch [A Quickstart Guide to Kubernetes Concepts](https://info.microsoft.com/ww-ondemand-a-quickstart-guide-to-kubernetes-concepts.html?lcid=en-us) on demand, now!\\n\\n:::\\n\\n---\\n# Where does Serverless fit in? \\n\\nServerless is a cloud computing model where the cloud provider (like Azure) is responsible for executing a piece of code by dynamically allocating the resources. With serverless, you only pay for the exact amount of compute time that you use, rather than paying for a fixed amount of resources. This can lead to significant cost savings, particularly for applications with variable or unpredictable workloads.\\n\\nServerless is commonly used for building applications like web or mobile apps, IoT, data processing, and real-time streaming - apps where the workloads are variable and high scalability is required.\\nIt\'s important to note that serverless is not a replacement for all types of workloads - it\'s best suited for stateless, short-lived and small-scale workloads.\\n\\nFor a detailed look into the world of Serverless and lots of great learning content, revisit [#30DaysofServerless](https://azure.github.io/Cloud-Native/serverless-september/30DaysOfServerless/).\\n\\n---\\n## Resources\\n* **Register** for the [Cloud Skills Challenge](https://aka.ms/Challenge) - 30 days to complete it!\\n* **Learning Resources**: [#30DaysOfCloudNative Collection](https://aka.ms/CNNY/collection)\\n* **eBook:** [Cloud Native Infrastructure with Azure](https://azure.microsoft.com/resources/cloud-native-infrastructure-with-microsoft-azure/?WT.mc_id=javascript-74010-ninarasi)\\n* **eBook:** [Cloud-native Architecture Mapbook](https://azure.microsoft.com/resources/azure-cloud-native-architecture-mapbook/?WT.mc_id=javascript-74010-ninarasi)\\n\\n---\\n## What\'s up next in #CloudNativeNewYear?\\n\\nWeek 1 has been all about the fundamentals of cloud-native. Next week, the team will be diving in to application deployment with Azure Kubernetes Service. Don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/cnny-2023/rss.xml?WT.mc_id=javascript-74010-ninarasi) to the blog to get daily posts delivered directly to your favorite feed reader!\\n\\n---"},{"id":"microservices-101","metadata":{"permalink":"/Cloud-Native/cnny-2023/microservices-101","source":"@site/blog-cnny/2023-01-26/30days.md","title":"1-4. Microservices 101","description":"What are Microservices? Why are they a core pillar for Cloud-native and how does Kubernetes help in their deployment?","date":"2023-01-26T00:00:00.000Z","formattedDate":"January 26, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"},{"label":"microservices","permalink":"/Cloud-Native/cnny-2023/tags/microservices"}],"readingTime":5.265,"hasTruncateMarker":false,"authors":[{"name":"Josh Duffney","title":"Cloud-Native Advocate @Microsoft","url":"https://github.com/duffney","imageURL":"https://github.com/duffney.png","key":"josh"}],"frontMatter":{"slug":"microservices-101","title":"1-4. Microservices 101","authors":["josh"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["serverless","containers","decision-tree","aks","kubernetes","container-apps","microservices"],"image":"https://azure.github.io/Cloud-Native/img/og/30-04.png","description":"What are Microservices? Why are they a core pillar for Cloud-native and how does Kubernetes help in their deployment?","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service","microservices"]},"prevItem":{"title":"1-5. Exploring Cloud-Native Options","permalink":"/Cloud-Native/cnny-2023/explore-options"},"nextItem":{"title":"1-3. Kubernetes 101","permalink":"/Cloud-Native/cnny-2023/Kubernetes-101"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/cnny-2023/microservices-101\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Microservices 101\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"What are Microservices? Why are they a core pillar for Cloud-native and how does Kubernetes help in their deployment?\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://azure.github.io/Cloud-Native/img/og/30-04.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@joshduffney\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/cnny-2023/microservices-101\\" />\\n</head>\\n\\nWelcome to `Day 4 of Week 1` of #CloudNativeNewYear!\\n\\nThis week we\'ll focus on advanced topics and best practices for Cloud-Native practitioners, kicking off with this post on _Serverless Container Options_ with Azure. We\'ll look at technologies, tools and best practices that range from managed services like Azure Kubernetes Service, to options allowing finer granularity of control and oversight.\\n\\n\\n## What We\'ll Cover\\n * What is Microservice Architecture? \\n * How do you design a Microservice? \\n * What challenges do Microservices introduce?\\n * Conclusion\\n * Resources\\n\\n![](./../../static/img/cnny23/hero-banner.png)\\n\\n---\\n\\nMicroservices are a modern way of designing and building software that increases deployment velocity by decomposing an application into small autonomous services that can be deployed independently. \\n\\nBy deploying loosely coupled microservices your applications can be developed, deployed, and scaled independently. Because each service is independent, it can be updated or replaced without having to worry about the impact on the rest of the application. This means that if a bug is found in one service, it can be fixed without having to redeploy the entire application. All of which gives an organization the ability to deliver value to their customers faster. \\n\\nIn this article, we will explore the basics of microservices architecture, its benefits and challenges, and how it can help improve the development, deployment, and maintenance of software applications. \\n\\n## What is Microservice Architecture? \\n\\nBefore explaining what Microservice architecture is, it\u2019s important to understand what problems microservices aim to address. \\n\\nTraditional software development is centered around building monolithic applications. Monolithic applications are built as a single, large codebase. Meaning your code is tightly coupled causing the monolithic app to suffer from the following: \\n\\n**Too much Complexity:** Monolithic applications can become complex and difficult to understand and maintain as they grow. This can make it hard to identify and fix bugs and add new features. \\n\\n**Difficult to Scale:** Monolithic applications can be difficult to scale as they often have a single point of failure, which can cause the whole application to crash if a service fails. \\n\\n**Slow Deployment:** Deploying a monolithic application can be risky and time-consuming, as a small change in one part of the codebase can affect the entire application. \\n\\nMicroservice architecture (often called microservices) is an architecture style that addresses the challenges created by Monolithic applications. Microservices architecture is a way of designing and building software applications as a collection of small, independent services that communicate with each other through APIs. This allows for faster development and deployment cycles, as well as easier scaling and maintenance than is possible with a monolithic application. \\n\\n## How do you design a Microservice? \\n\\nBuilding applications with Microservices architecture requires a different approach. Microservices architecture focuses on business capabilities rather than technical layers, such as data access or messaging. Doing so requires that you shift your focus away from the technical stack and model your applications based upon the various domains that exist within the business. \\n\\nDomain-driven design (DDD) is a way to design software by focusing on the business needs. You can use Domain-driven design as a framework that guides the development of well-designed microservices by building services that encapsulate knowledge in each domain and abstract that knowledge from clients. \\n\\nIn Domain-driven design you start by modeling the business domain and creating a domain model. A domain model is an abstract model of the business model that distills and organizes a domain of knowledge and provides a common language for developers and domain experts. It\u2019s the resulting domain model that microservices a best suited to be built around because it helps establish a well-defined boundary between external systems and other internal applications. \\n\\nIn short, before you begin designing microservices, start by mapping the functions of the business and their connections to create a domain model for the microservice(s) to be built around. \\n\\n \\n## What challenges do Microservices introduce? \\n\\nMicroservices solve a lot of problems and have several advantages, but the grass isn\u2019t always greener on the other side. \\n\\nOne of the key challenges of microservices is managing communication between services. Because services are independent, they need to communicate with each other through APIs. This can be complex and difficult to manage, especially as the number of services grows. To address this challenge, it is important to have a clear API design, with well-defined inputs and outputs for each service. It is also important to have a system for managing and monitoring communication between services, to ensure that everything is running smoothly.  \\n\\nAnother challenge of microservices is managing the deployment and scaling of services. Because each service is independent, it needs to be deployed and scaled separately from the rest of the application. This can be complex and difficult to manage, especially as the number of services grows. To address this challenge, it is important to have a clear and consistent deployment process, with well-defined steps for deploying and scaling each service. Furthermore, it is advisable to host them on a system with self-healing capabilities to reduce operational burden. \\n\\nIt is also important to have a system for monitoring and managing the deployment and scaling of services, to ensure optimal performance.  \\n\\nEach of these challenges has created fertile ground for tooling and process that exists in the cloud-native ecosystem. Kubernetes, CI CD, and other DevOps practices are part of the package of adopting the microservices architecture. \\n\\n## Conclusion \\n\\nIn summary, microservices architecture focuses on software applications as a collection of small, independent services that communicate with each other over well-defined APIs. \\n\\nThe main advantages of microservices include:\\n* increased flexibility and scalability per microservice, \\n* efficient resource utilization (with help from a container orchestrator like Kubernetes), \\n* and faster development cycles. \\n\\nContinue following along with this series to see how you can use Kubernetes to help adopt microservices patterns in your own environments!\\n\\n## Resources \\n\\n* [Microservice Applications](https://azure.microsoft.com/solutions/microservice-applications?WT.mc_id=containers-84290-stmuraws)\\n* [Microservices architecture design - Azure Architecture Center | Microsoft Learn](https://learn.microsoft.com/azure/architecture/microservices?WT.mc_id=containers-84290-stmuraws)\\n* [Design a microservices architecture - Azure Architecture Center | Microsoft Learn](https://learn.microsoft.com/azure/architecture/microservices/design?WT.mc_id=containers-84290-stmuraws)\\n* [Domain analysis for microservices - Azure Architecture Center | Microsoft Learn](https://learn.microsoft.com/azure/architecture/microservices/model/domain-analysis?WT.mc_id=containers-84290-stmuraws)"},{"id":"Kubernetes-101","metadata":{"permalink":"/Cloud-Native/cnny-2023/Kubernetes-101","source":"@site/blog-cnny/2023-01-25/30days.md","title":"1-3. Kubernetes 101","description":"What is Kubernetes? And why is it so ubiquitous in Cloud-native solutions?","date":"2023-01-25T00:00:00.000Z","formattedDate":"January 25, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"}],"readingTime":2.385,"hasTruncateMarker":false,"authors":[{"name":"Steven Murawski","title":"Principal Cloud Advocate","url":"https://github.com/smurawski","imageURL":"https://github.com/smurawski.png","key":"steven"}],"frontMatter":{"slug":"Kubernetes-101","title":"1-3. Kubernetes 101","authors":["steven"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["serverless","containers","decision-tree","aks","kubernetes","container-apps"],"image":"https://azure.github.io/Cloud-Native/img/og/30-03.png","description":"What is Kubernetes? And why is it so ubiquitous in Cloud-native solutions?","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service"]},"prevItem":{"title":"1-4. Microservices 101","permalink":"/Cloud-Native/cnny-2023/microservices-101"},"nextItem":{"title":"1-2. Containers 101","permalink":"/Cloud-Native/cnny-2023/containers-101"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/cnny-2023/kubernetes-101\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Kubernetes 101\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"What is Kubernetes? And why is it so ubiquitous in Cloud-native solutions?\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://azure.github.io/Cloud-Native/img/og/30-03.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@stevenmurawski\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/cnny-2023/kubernetes-101\\" />\\n</head>\\n\\nWelcome to `Day 3 of Week 1` of #CloudNativeNewYear!\\n\\nThis week we\'ll focus on what Kubernetes is.\\n\\n## What We\'ll Cover\\n * Introduction\\n * What is Kubernetes? (Video)\\n * How does Kubernetes Work? (Video)\\n * Conclusion\\n\\n![](./../../static/img/cnny23/hero-banner.png)\\n\\n---\\n\\n:::tip REGISTER & LEARN: KUBERNETES 101\\n\\nInterested in a dive into Kubernetes and a chance to talk to experts? \\n\\n\ud83c\udf99: Join us **Jan 26 @1pm PST** \\n[by registering here](https://info.microsoft.com/ww-landing-a-quickstart-guide-to-kubernetes-concepts.html?WT.mc_id=containers-84290-stmuraws)\\n\\nHere\'s what you will learn:\\n * Key concepts and core principles of Kubernetes.\\n * How to deploy, scale and manage containerized workloads.\\n * Live Demo of the concepts explained\\n * How to get started with Azure Kubernetes Service for free.\\n\\n**Start your free Azure Kubernetes Trial Today!!**: [aka.ms/TryAKS](https://aka.ms/TryAKS)\\n\\n:::\\n\\n## Introduction\\n\\nKubernetes is an open source container orchestration engine that can help with automated deployment, scaling, and management of our applications.\\n\\nKubernetes takes physical (or virtual) resources and provides a consistent API over them, bringing a consistency to the management and runtime experience for our applications.  Kubernetes provides us with a number of capabilities such as:\\n\\n* Container scheduling\\n* Service discovery and load balancing\\n* Storage orchestration\\n* Automated rollouts and rollbacks\\n* Automatic bin packing\\n* Self-healing\\n* Secret and configuration management\\n\\nWe\'ll learn more about most of these topics as we progress through Cloud Native New Year.\\n\\n## What is Kubernetes?\\n\\nLet\'s hear from Brendan Burns, one of the founders of Kubernetes as to what Kubernetes actually is.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/q1PcAawa4Bg\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n## How does Kubernetes Work?\\n\\nAnd Brendan shares a bit more with us about how Kubernetes works.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/daVUONZqn88\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n## Conclusion\\n\\nKubernetes allows us to deploy and manage our applications effectively and consistently. \\n\\nBy providing a consistent API across many of the concerns our applications have, like load balancing, networking, storage, and compute, Kubernetes improves both our ability to build and ship new software. \\n\\nThere are standards for the applications to depend on for resources needed. Deployments, metrics, and logs are provided in a standardized fashion allowing more effecient operations across our application environments. \\n\\nAnd since Kubernetes is an open source platform, it can be found in just about every type of operating environment - cloud, virtual machines, physical hardware, shared data centers, even small devices like Rasberry Pi\'s!\\n\\nWant to learn more?  [Join us for a webinar on Kubernetes Concepts (or catch the playback) on Thursday, January 26th at 1 PM PST](https://info.microsoft.com/ww-landing-a-quickstart-guide-to-kubernetes-concepts.html?WT.mc_id=containers-84290-stmuraws) and watch for the rest of this series right here!"},{"id":"containers-101","metadata":{"permalink":"/Cloud-Native/cnny-2023/containers-101","source":"@site/blog-cnny/2023-01-24/30days.md","title":"1-2. Containers 101","description":"Let\'s dive into the various technologies behind Cloud Native development, starting with Containers.","date":"2023-01-24T00:00:00.000Z","formattedDate":"January 24, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"},{"label":"containers","permalink":"/Cloud-Native/cnny-2023/tags/containers"}],"readingTime":3.965,"hasTruncateMarker":false,"authors":[{"name":"Steven Murawski","title":"Principal Cloud Advocate","url":"https://github.com/smurawski","imageURL":"https://github.com/smurawski.png","key":"steven"},{"name":"Paul Yu","title":"Senior Cloud Advocate","url":"https://github.com/pauldotyu","imageURL":"https://github.com/pauldotyu.png","key":"paul"},{"name":"Josh Duffney","title":"Cloud-Native Advocate @Microsoft","url":"https://github.com/duffney","imageURL":"https://github.com/duffney.png","key":"josh"}],"frontMatter":{"slug":"containers-101","title":"1-2. Containers 101","authors":["steven","paul","josh"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["serverless","containers","decision-tree","aks","kubernetes","container-apps"],"image":"https://azure.github.io/Cloud-Native/img/og/30-02.png","description":"Let\'s dive into the various technologies behind Cloud Native development, starting with Containers.","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service","containers"]},"prevItem":{"title":"1-3. Kubernetes 101","permalink":"/Cloud-Native/cnny-2023/Kubernetes-101"},"nextItem":{"title":"1-1. Cloud-native Fundamentals","permalink":"/Cloud-Native/cnny-2023/cloud-native-fundamentals"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/cnny-2023/containers-101\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Container 101\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s dive into the various technologies behind Cloud Native development, starting with Containers.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://azure.github.io/Cloud-Native/img/og/30-02.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@stevenmurawski\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/cnny-2023/containers-101\\" />\\n</head>\\n\\nWelcome to `Day 2 of Week 1` of #CloudNativeNewYear!\\n\\nToday, we\'ll focus on building an understanding of containers.\\n\\n## What We\'ll Cover\\n * Introduction\\n * How do Containers Work?\\n * Why are Containers Becoming so Popular?\\n * Conclusion\\n * Resources\\n * Learning Path\\n\\n![](./../../static/img/cnny23/hero-banner.png)\\n---\\n\\n:::tip REGISTER & LEARN: KUBERNETES 101\\n\\nInterested in a dive into Kubernetes and a chance to talk to experts? \\n\\n\ud83c\udf99: Join us **Jan 26 @1pm PST** \\n[by registering here](https://info.microsoft.com/ww-landing-a-quickstart-guide-to-kubernetes-concepts.html?lcid=en-us)\\n\\nHere\'s what you will learn:\\n * Key concepts and core principles of Kubernetes.\\n * How to deploy, scale and manage containerized workloads.\\n * Live Demo of the concepts explained\\n * How to get started with Azure Kubernetes Service for free.\\n\\n**Start your free Azure Kubernetes Trial Today!!**: [aka.ms/TryAKS](https://aka.ms/TryAKS)\\n\\n:::\\n\\n## Introduction \\n\\n \\n\\nIn the beginning, we deployed our applications onto physical servers.  We only had a certain number of those servers, so often they hosted multiple applications.  This led to some problems when those applications shared dependencies.  Upgrading one application could break another application on the same server.  \\n\\nEnter virtualization.  Virtualization allowed us to run our applications in an isolated operating system instance.  This removed much of the risk of updating shared dependencies.  However, it increased our overhead since we had to run a full operating system for each application environment. \\n\\nTo address the challenges created by virtualization, containerization was created to improve isolation without duplicating kernel level resources. Containers provide efficient and consistent deployment and runtime experiences for our applications and have become very popular as a way of packaging and distributing applications. \\n\\n \\n \\n## How do Containers Work? \\n\\nContainers build on two capabilities in the Linux operating system, namespaces and cgroups.  These constructs allow the operating system to provide isolation to a process or group of processes, keeping their access to filesystem resources separate and providing controls on resource utilization.  This, combined with tooling to help package, deploy, and run container images has led to their popularity in today\u2019s operating environment.  This provides us our isolation without the overhead of additional operating system resources. \\n\\nWhen a container host is deployed on an operating system, it works at scheduling the access to the OS (operating systems) components. This is done by providing a logical isolated group that can contain processes for a given application, called a namespace. The container host then manages /schedules access from the namespace to the host OS.  The container host then uses cgroups to allocate compute resources. Together, the container host with the help of cgroups and namespaces can schedule multiple applications to access host OS resources.  \\n\\nOverall, this gives the illusion of virtualizing the host OS, where each application gets its own OS. In actuality, all the applications are running on the same operating system and sharing the same kernel as the container host. \\n \\n## Why is Containerization so Popular? \\n \\nContainers are popular in the software development industry because they provide several benefits over traditional virtualization methods. Some of these benefits include: \\n \\n* **Portability**: Containers make it easy to move an application from one environment to another without having to worry about compatibility issues or missing dependencies. \\n* **Isolation**: Containers provide a level of isolation between the application and the host system, which means that the application running in the container cannot access the host system\'s resources. \\n* **Scalability**: Containers make it easy to scale an application up or down as needed, which is useful for applications that experience a lot of traffic or need to handle a lot of data. \\n* **Resource Efficiency**: Containers are more resource-efficient than traditional virtualization methods because they don\'t require a full operating system to be running on each virtual machine. \\n* **Cost-Effective**: Containers are more cost-effective than traditional virtualization methods because they don\'t require expensive hardware or licensing fees. \\n \\n\\n## Conclusion \\n \\nContainers are a powerful technology that allows developers to package and deploy applications in a portable and isolated environment. This technology is becoming increasingly popular in the world of software development and is being used by many companies and organizations to improve their application deployment and management processes. With the benefits of portability, isolation, scalability, resource efficiency, and cost-effectiveness, containers are definitely worth considering for your next application development project. \\n\\n \\nContainerizing applications is a key step in modernizing them, and there are many other patterns that can be adopted to achieve cloud-native architectures, including using serverless platforms, Kubernetes, and implementing DevOps practices. \\n\\n## Resources \\n\\n* [What are Containers](https://azure.microsoft.com/resources/cloud-computing-dictionary/what-is-a-container/?WT.mc_id=containers-84290-stmuraws) \\n* [Containerizing .NET Applications](https://learn.microsoft.com/dotnet/architecture/microservices/container-docker-introduction/?WT.mc_id=containers-84290-stmuraws) \\n \\n \\n## Learning Path \\n\\n* [Introduction to Docker Containers](https://learn.microsoft.com/training/modules/intro-to-docker-containers/?WT.mc_id=containers-84290-stmuraws)"},{"id":"cloud-native-fundamentals","metadata":{"permalink":"/Cloud-Native/cnny-2023/cloud-native-fundamentals","source":"@site/blog-cnny/2023-01-23/cloud-native-fundamentals.md","title":"1-1. Cloud-native Fundamentals","description":"The fundamentals of Cloud-native!","date":"2023-01-23T00:00:00.000Z","formattedDate":"January 23, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"}],"readingTime":4.06,"hasTruncateMarker":false,"authors":[{"name":"Cory Skimming","title":"Sr. Product Marketing Manager","url":"https://twitter.com/cskimming","imageURL":"https://pbs.twimg.com/profile_images/1493684068227055617/iC9r8v6Z_400x400.jpg","key":"cory"}],"frontMatter":{"slug":"cloud-native-fundamentals","title":"1-1. Cloud-native Fundamentals","authors":["cory"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["cloud-native","containers","decision-tree","kubernetes"],"image":"https://azure.github.io/Cloud-Native/img/og/30-01.png","description":"The fundamentals of Cloud-native!","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service"]},"prevItem":{"title":"1-2. Containers 101","permalink":"/Cloud-Native/cnny-2023/containers-101"},"nextItem":{"title":"Kicking Off 30DaysOfCloudNative!","permalink":"/Cloud-Native/cnny-2023/cnny-kickoff"}},"content":"Welcome to `Week 1` of #CloudNativeNewYear!\\n\\n\\n![Cloud-native New Year](../../static/img/cnny23/cnny-event-card.png)\\n\\nYou will often hear the term \\"cloud-native\\" when discussing modern application development, but even a quick online search will return a huge number of articles, tweets, and web pages with a variety of definitions. So, what does cloud-native actually mean? Also, what makes an application a *cloud-native application* versus a \\"regular\\" application? \\n\\nToday, we will address these questions and more as we kickstart our learning journey (and our new year!) with an introductory dive into the wonderful world of cloud-native. \\n\\n---\\n\\n## What We\'ll Cover\\n * What is cloud-native? \\n * What is a cloud-native application?\\n * The benefits of cloud-native\\n * The five pillars of cloud-native \\n * **Exercise**: Take the [Cloud Skills Challenge](https://aka.ms/CNNY/Challenge)!\\n\\n---\\n\\n## 1. What is cloud-native? \\n\\nThe term \\"cloud-native\\" can seem pretty self-evident (yes, hello, native to the cloud?), and in a way, it is. \\nWhile there are lots of definitions of cloud-native floating around, at it\'s core, cloud-native simply refers to a modern approach to building software that takes advantage of cloud services and environments. This includes using cloud-native technologies, such as containers, microservices, and serverless, and following best practices for deploying, scaling, and managing applications in a cloud environment.\\n\\n:::info **Official definition** from the [Cloud Native Computing Foundation](https://www.cncf.io/):\\n*Cloud-native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.*\\n\\n*These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.* [Source](https://github.com/cncf/foundation/blob/main/charter.md)\\n:::\\n\\n---\\n\\n## 2. So, what exactly is a cloud-native application? \\n Cloud-native applications are *specifically* designed to take advantage of the scalability, resiliency, and distributed nature of modern cloud infrastructure.  But how does this differ from a \\"traditional\\" application?\\n\\nTraditional applications are generally been built, tested, and deployed as a single, monolithic unit.  The monolithic nature of this type of architecture creates close dependencies between components.  This complexity and interweaving only increases as an application grows and can make it difficult to evolve (not to mention troubleshoot) and challenging to operate over time. \\n\\nTo contrast, in cloud-native architectures the application components are decomposed into loosely coupled services, rather than built and deployed as one block of code. This decomposition into multiple self-contained services enables teams to manage complexity and improve the speed, agility, and scale of software delivery. Many small parts enables teams to make targeted updates, deliver new features, and fix any issues without leading to broader service disruption. \\n\\n---\\n\\n## 3. The benefits of cloud-native\\nCloud-native architectures can bring many benefits to an organization, including: \\n\\n1. **Scalability:** easily scale up or down based on demand, allowing organizations to adjust their resource usage and costs as needed.\\n2. **Flexibility:** deploy and run on any cloud platform, and easily move between clouds and on-premises environments.\\n3. **High-availability:** techniques such as redundancy, self-healing, and automatic failover help ensure that cloud-native applications are designed to be highly-available and fault tolerant.\\n4. **Reduced costs:** take advantage of the pay-as-you-go model of cloud computing, reducing the need for expensive infrastructure investments.\\n5. **Improved security:** tap in to cloud security features, such as encryption and identity management, to improve the security of the application.\\n6. **Increased agility:** easily add new features or services to your applications to meet changing business needs and market demand.\\n\\n---\\n\\n## 4. The pillars of cloud-native\\n\\nThere are five areas that are generally cited as the core building blocks of cloud-native architecture: \\n\\n1.\\t[Microservices](https://learn.microsoft.com/devops/deliver/what-are-microservices): Breaking down monolithic applications into smaller, independent, and loosely-coupled services that can be developed, deployed, and scaled independently.\\n2.\\tContainers: Packaging software in lightweight, portable, and self-sufficient containers that can run consistently across different environments.\\n3.\\tAutomation: Using automation tools and DevOps processes to manage and operate the cloud-native infrastructure and applications, including deployment, scaling, monitoring, and self-healing.\\n4.\\tService discovery: Using service discovery mechanisms, such as APIs & service meshes, to enable services to discover and communicate with each other.\\n5.\\tObservability: Collecting and analyzing data from the infrastructure and applications to understand and optimize the performance, behavior, and health of the system.\\n\\nThese can (and should!) be used in combination to deliver cloud-native solutions that are highly scalable, flexible, and available. \\n\\n:::info WHAT\'S NEXT\\n\\nStay tuned, as we will be diving deeper into these topics in the coming weeks:\\n\\n* **Jan 24**: Containers 101\\n* **Jan 25**: Adopting Microservices with Kubernetes\\n* **Jan 26**: Kubernetes 101\\n* **Jan 27**: Exploring your Cloud-native Options\\n:::\\n\\n---\\n\\n## Resources\\n\\n* **Register** for the [Cloud Skills Challenge](https://aka.ms/Challenge) - 30 days to complete it!\\n* **Resources**: [#30DaysOfCloudNative Collection](https://aka.ms/CNNY/collection)\\n* **eBook:** [Cloud Native Infrastructure with Azure](https://azure.microsoft.com/resources/cloud-native-infrastructure-with-microsoft-azure/)\\n\\n---\\n\\nDon\'t forget to [subscribe](https://azure.github.io/Cloud-Native/cnny-2023/rss.xml?WT.mc_id=javascript-74010-ninarasi) to the blog to get daily posts delivered directly to your favorite feed reader!\\n\\n---"},{"id":"cnny-kickoff","metadata":{"permalink":"/Cloud-Native/cnny-2023/cnny-kickoff","source":"@site/blog-cnny/2023-01-22/30days.md","title":"Kicking Off 30DaysOfCloudNative!","description":"Let\'s  kick-off Cloud Native New Year with #30DaysOfCloudNative","date":"2023-01-22T00:00:00.000Z","formattedDate":"January 22, 2023","tags":[{"label":"cloud-native","permalink":"/Cloud-Native/cnny-2023/tags/cloud-native"},{"label":"30daysofcloudnative","permalink":"/Cloud-Native/cnny-2023/tags/30-daysofcloudnative"},{"label":"zero-to-hero","permalink":"/Cloud-Native/cnny-2023/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Cloud-Native/cnny-2023/tags/ask-the-expert"},{"label":"azure-kubernetes-service","permalink":"/Cloud-Native/cnny-2023/tags/azure-kubernetes-service"}],"readingTime":3.175,"hasTruncateMarker":false,"authors":[{"name":"Cory Skimming","title":"Sr. Product Marketing Manager","url":"https://twitter.com/cskimming","imageURL":"https://pbs.twimg.com/profile_images/1493684068227055617/iC9r8v6Z_400x400.jpg","key":"cory"},{"name":"Devanshi Joshi","title":"Product Marketing Manager","url":"https://github.com/devanshidiaries","imageURL":"https://pbs.twimg.com/profile_images/1520928730230652928/00BaK5xn_400x400.jpg","key":"devanshi"},{"name":"Steven Murawski","title":"Principal Cloud Advocate","url":"https://github.com/smurawski","imageURL":"https://github.com/smurawski.png","key":"steven"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"cnny-kickoff","title":"Kicking Off 30DaysOfCloudNative!","authors":["cory","devanshi","steven","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["serverless","containers","decision-tree","aks","kubernetes","container-apps"],"image":"https://azure.github.io/Cloud-Native/img/og/30-00.png","description":"Let\'s  kick-off Cloud Native New Year with #30DaysOfCloudNative","tags":["cloud-native","30daysofcloudnative","zero-to-hero","ask-the-expert","azure-kubernetes-service"]},"prevItem":{"title":"1-1. Cloud-native Fundamentals","permalink":"/Cloud-Native/cnny-2023/cloud-native-fundamentals"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://azure.github.io/Cloud-Native/cnny-2023/cnny-kickoff\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Kicking off Cloud Native New Year 2023\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s  kick-off Cloud Native New Year with #30DaysOfCloudNative\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://azure.github.io/Cloud-Native/img/og/30-00.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@nitya\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://azure.github.io/Cloud-Native/cnny-2023/cnny-kickoff\\" />\\n</head>\\n\\nWelcome to the `Kick-off Post` for #30DaysOfCloudNative - one of the core initiatives within #CloudNativeNewYear! Over the next four weeks, join us as we take you from fundamentals to functional usage of Cloud-native technologies, one blog post at a time! Read on to learn a little bit about this initiative and what you can expect to learn from this journey!\\n\\n\\n## What We\'ll Cover\\n * What is Cloud-native New Year? (3 initiatives)\\n * How can I _skill up_ (30 days)\\n * Who is behind this? (Team Contributors)\\n * **Exercise**: Take the [Cloud Skills Challenge](https://aka.ms/CNNY/Challenge)!\\n * **Resources**: [#30DaysOfCloudNative Collection](https://aka.ms/CNNY/collection).\\n\\n---\\n\\n![Cloud-native New Year](../../static/img/cnny23/cnny-event-card.png)\\n\\n\\nWelcome to `Week 01` of [ \ud83e\udd73 #CloudNativeNewYear ](https://aka.ms/CNNY)! Today, we kick off a full month of content and activities to skill you up on all things Cloud-native on Azure with content, events, and community interactions! Read on to learn about what we have planned!\\n\\n---\\n\\n## Explore our initiatives\\n\\nWe have a number of initiatives planned for the month to help you learn and skill up on relevant technologies. Click on the links to visit the relevant pages for each. \\n\\n* [#30DaysOfCloudNative](/Cloud-Native/cnny-2023/) - 4 themed weeks of daily articles in a structured roadmap\\n* [Cloud Skills Challenge](https://aka.ms/CNNY/Challenge) - skill up by competing with peers to complete modules\\n* [Ask The Expert](https://aka.ms/CNNY/ate) - join live Q&A sessions with Product Engineering teams\\n\\nWe\'ll go into more details about **#30DaysOfCloudNative** in this post - don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/cnny-2023/rss.xml) to the blog to get daily posts delivered directly to your preferred feed reader!\\n\\n---\\n\\n## Register for events!\\n\\nWhat are 3 things you can do today, to jumpstart your learning journey?\\n\\n * **Register** for live Q&A sessions (free, online) \\n    - Feb 9 - [Ask The Expert: Azure Kubernetes Service (PDT)](https://aka.ms/ATE0209/RSVP)\\n    - Feb 10 - [Ask the Expert: Azure Kubernetes Service (SGT)](https://aka.ms/ATE0209/APAC-RSVP)\\n  * **Register** for the [Cloud Skills Challenge](https://aka.ms/Challenge) - 30 days to complete it!\\n\\n---\\n\\n## #30DaysOfCloudNative\\n\\n[#30DaysOfCloudNative](https://azure.github.io/Cloud-Native/New-Year/) is a month-long series of daily blog posts grouped into 4 themed weeks - taking you from core concepts to end-to-end solution examples in 30 days. Each article will be short (5-8 mins reading time) and provide exercises and resources to help you reinforce learnings and take next steps.\\n\\nThis series focuses on the [Cloud-native On Azure](https://azure.microsoft.com/solutions/cloud-native-apps/?WT.mc_id=javascript-74010-ninarasi) learning journey in **four stages**, each building on the previous week to help you skill up in a beginner-friendly way:\\n * **Week 1:** Get started with [Cloud-native Concepts](https://azure.microsoft.com/solutions/cloud-native-apps/?WT.mc_id=javascript-74010-ninarasi) \\n * **Week 2:** Build & deploy [Kubernetes Apps on cloud](https://azure.microsoft.com/solutions/kubernetes-on-azure/?WT.mc_id=javascript-74010-ninarasi).\\n * **Week 3:** Migrate your applications to [Azure Kubernetes Service](https://azure.microsoft.com/products/kubernetes-service/?WT.mc_id=javascript-74010-ninarasi).\\n * **Week 4:** Go from Code to Containers to Cloud with [Cloud-native solutions](https://azure.microsoft.com/solutions/cloud-native-apps/?WT.mc_id=javascript-74010-ninarasi)\\n\\n![](./img/banner.png)\\n\\nWe have a tentative weekly-themed roadmap for the topics we hope to cover and will keep this updated as we go with links to actual articles as they get published.\\n\\n:::info Week 1: FOCUS ON CLOUD-NATIVE FUNDAMENTALS\\n\\nHere\'s a sneak peek at the week 1 schedule. We\'ll start with a broad review of cloud-native fundamentals and walkthrough the core concepts of microservices, containers and Kubernetes.\\n\\n * **Jan 23**: Learn Core Concepts for Cloud-native\\n * **Jan 24**: Container 101\\n * **Jan 25**: Adopting Microservices with Kubernetes\\n * **Jan 26**: Kubernetes 101\\n * **Jan 27**: Exploring your Cloud Native Options\\n\\n:::\\n\\n---\\n\\n\\n## Let\'s Get Started!\\n\\nNow you know everything! We hope you are as excited as we are to dive into a full month of active learning and doing! Don\'t forget to [subscribe](https://azure.github.io/Cloud-Native/cnny-2023/rss.xml?WT.mc_id=javascript-74010-ninarasi) for updates in your favorite feed reader! **And look out for our first Cloud-native Fundamentals post on January 23rd!**\\n\\n\\n---"}]}')}}]);