"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42859],{40984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(85893),a=n(11151);const r={date:"2024-03-12T09:00",slug:"dynamic-repricing-of-products-using-intelligent-apps-part-3",title:"3.3 Dynamic Repricing of Products Using Intelligent Apps Part 3: Graphing and Displaying Price Forecasts in a Web Interface",authors:["cnteam"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["Cloud-Scale","Data","AI","AI/ML","intelligent apps","cloud-native","60-days","enterprise apps","digital experiences","app modernization"],image:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png",description:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable.",tags:["Build-Intelligent-Apps","60-days-of-IA","learn-live","hack-together","community-buzz","ask-the-expert","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},s=void 0,o={permalink:"/Cloud-Native/60DaysOfIA/dynamic-repricing-of-products-using-intelligent-apps-part-3",source:"@site/blog-60daysofIA/2024-03-12/dynamic-repricing-of-products-using-intelligent-apps-part-3.md",title:"3.3 Dynamic Repricing of Products Using Intelligent Apps Part 3: Graphing and Displaying Price Forecasts in a Web Interface",description:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable.",date:"2024-03-12T09:00:00.000Z",formattedDate:"March 12, 2024",tags:[{label:"Build-Intelligent-Apps",permalink:"/Cloud-Native/60DaysOfIA/tags/build-intelligent-apps"},{label:"60-days-of-IA",permalink:"/Cloud-Native/60DaysOfIA/tags/60-days-of-ia"},{label:"learn-live",permalink:"/Cloud-Native/60DaysOfIA/tags/learn-live"},{label:"hack-together",permalink:"/Cloud-Native/60DaysOfIA/tags/hack-together"},{label:"community-buzz",permalink:"/Cloud-Native/60DaysOfIA/tags/community-buzz"},{label:"ask-the-expert",permalink:"/Cloud-Native/60DaysOfIA/tags/ask-the-expert"},{label:"azure-kubernetes-service",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-kubernetes-service"},{label:"azure-functions",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-functions"},{label:"azure-openai",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-openai"},{label:"azure-container-apps",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-container-apps"},{label:"azure-cosmos-db",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-cosmos-db"},{label:"github-copilot",permalink:"/Cloud-Native/60DaysOfIA/tags/github-copilot"},{label:"github-codespaces",permalink:"/Cloud-Native/60DaysOfIA/tags/github-codespaces"},{label:"github-actions",permalink:"/Cloud-Native/60DaysOfIA/tags/github-actions"}],readingTime:8.03,hasTruncateMarker:!1,authors:[{name:"#60Days Of IA",title:"BuildIA Content Team",url:"https://azure.github.io/Cloud-Native/Build-IA/",imageURL:"https://azure.github.io/Cloud-Native/img/logo-2024.png",key:"cnteam"}],frontMatter:{date:"2024-03-12T09:00",slug:"dynamic-repricing-of-products-using-intelligent-apps-part-3",title:"3.3 Dynamic Repricing of Products Using Intelligent Apps Part 3: Graphing and Displaying Price Forecasts in a Web Interface",authors:["cnteam"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["Cloud-Scale","Data","AI","AI/ML","intelligent apps","cloud-native","60-days","enterprise apps","digital experiences","app modernization"],image:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png",description:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable.",tags:["Build-Intelligent-Apps","60-days-of-IA","learn-live","hack-together","community-buzz","ask-the-expert","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},unlisted:!1,prevItem:{title:"4.1 Build Contoso Chat End-to-End",permalink:"/Cloud-Native/60DaysOfIA/build-contoso-chat-end-to-end"},nextItem:{title:"4.2 Build A Copilot Code-First with the Azure AI Python SDK",permalink:"/Cloud-Native/60DaysOfIA/build-a-copilot-code-first-with-the-azure-ai-python-sdk"}},l={authorsImageUrls:[void 0]},c=[{value:"Dynamic Repricing of Products Using Intelligent Apps Part 3: Graphing and Displaying Price Forecasts in a Web Interface",id:"dynamic-repricing-of-products-using-intelligent-apps-part-3-graphing-and-displaying-price-forecasts-in-a-web-interface",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Building the Web Interface",id:"building-the-web-interface",level:3},{value:"Deploying to Azure Kubernetes Service (AKS)",id:"deploying-to-azure-kubernetes-service-aks",level:3},{value:"Create a Dockerfile",id:"create-a-dockerfile",level:4},{value:"Create a Container Registry",id:"create-a-container-registry",level:4},{value:"Build and Push the Container Image",id:"build-and-push-the-container-image",level:4},{value:"Create an AKS Cluster",id:"create-an-aks-cluster",level:4},{value:"Deploy the Application to AKS",id:"deploy-the-application-to-aks",level:4},{value:"Verify the Deployment",id:"verify-the-deployment",level:4},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{Head:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r,{children:[(0,i.jsx)("meta",{property:"og:url",content:"https://azure.github.io/cloud-native/60daysofia/dynamic-repricing-of-products-using-intelligent-apps-part-3"}),(0,i.jsx)("meta",{property:"og:type",content:"website"}),(0,i.jsx)("meta",{property:"og:title",content:"Build Intelligent Apps | AI Apps on Azure"}),(0,i.jsx)("meta",{property:"og:description",content:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable."}),(0,i.jsx)("meta",{property:"og:image",content:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png"}),(0,i.jsx)("meta",{name:"twitter:url",content:"https://azure.github.io/Cloud-Native/60daysofIA/dynamic-repricing-of-products-using-intelligent-apps-part-3"}),(0,i.jsx)("meta",{name:"twitter:title",content:"Build Intelligent Apps | AI Apps on Azure"}),(0,i.jsx)("meta",{name:"twitter:description",content:"In this series, you\u2019ll learn why Cosmos DB is an ideal choice for powering such applications\u2014and how it makes building Intelligent Apps accessible and approachable."}),(0,i.jsx)("meta",{name:"twitter:image",content:"https://azure.github.io/Cloud-Native/img/ogImage.png"}),(0,i.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,i.jsx)("meta",{name:"twitter:creator",content:"@devanshidiaries"}),(0,i.jsx)("link",{rel:"canonical",href:"https://azure.github.io/Cloud-Native/60daysofIA/dynamic-repricing-of-products-using-intelligent-apps-part-3"})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Dynamic Repricing of Products Using Intelligent Apps: Graphing and Displaying Price Forecasts in a Web Interface",src:n(52514).Z+"",width:"624",height:"380"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"This three-part series demonstrates how to use Azure Cosmos DB to build an Intelligent App that uses historical pricing and product data to forecast future price fluctuations for specific products. In the final article of the series, you\u2019ll build a web interface to graph and display the Intelligent App\u2019s price forecasts."})}),"\n",(0,i.jsx)(t.h2,{id:"dynamic-repricing-of-products-using-intelligent-apps-part-3-graphing-and-displaying-price-forecasts-in-a-web-interface",children:"Dynamic Repricing of Products Using Intelligent Apps Part 3: Graphing and Displaying Price Forecasts in a Web Interface"}),"\n",(0,i.jsxs)(t.p,{children:["In ",(0,i.jsx)(t.a,{href:"https://azure.github.io/Cloud-Native/60DaysOfIA/dynamic-repricing-of-products-using-intelligent-apps-part-1",children:"\u200b\u200bPart 1"})," of this series, you set up an Azure Cosmos DB database and populated the database with pricing data. Then, in \u200b",(0,i.jsx)(t.a,{href:"https://azure.github.io/Cloud-Native/60DaysOfIA/dynamic-repricing-of-products-using-intelligent-apps-part-2",children:"\u200bPart 2"}),", you successfully set up an Azure Machine Learning model and deployed it as a web service."]}),"\n",(0,i.jsx)(t.p,{children:"In this final article of the series, you\u2019ll create a web application using Flask that interacts with the Azure Machine Learning endpoint to retrieve predictions and display them using a simple graph."}),"\n",(0,i.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(t.p,{children:"Before proceeding, ensure you have the following:\u202f"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://www.python.org/downloads/",children:"Python"})," version 3.10 or greater"]}),"\n",(0,i.jsxs)(t.li,{children:["Flask (",(0,i.jsx)(t.code,{children:"pip install flask"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Requests (",(0,i.jsx)(t.code,{children:"pip install requests"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Matplotlib (",(0,i.jsx)(t.code,{children:"pip install matplotlib"}),")"]}),"\n",(0,i.jsx)(t.li,{children:"Access to the Azure Machine Learning endpoint created in Part 2"}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"}),", including the ",(0,i.jsx)(t.a,{href:"https://docs.docker.com/engine/reference/commandline/cli/",children:"Docker command-line interface"})," (CLI), installed. You\u2019ll use this to build a container image to run the web app on Azure Kubernetes Service (AKS)."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/cli/azure/install-azure-cli?ocid=buildia24_60days_blogs",children:"Azure CLI"})," installed. You\u2019ll use this for deployment to AKS."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For a preview of the completed Intelligent App, take a look at the ",(0,i.jsx)(t.a,{href:"https://aka.ms/intelligent-apps/60daysofIA/3.3projectcode",children:"\u200bproject code"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Complete the ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"https://aka.ms/intelligent-apps/data-csc?ocid=buildia24_60days_blogs",children:"Data Skills Challenge"})})," to compete for the leaderboard and earn a Microsoft Learn Badge."]})}),"\n",(0,i.jsx)(t.h3,{id:"building-the-web-interface",children:"Building the Web Interface"}),"\n",(0,i.jsx)(t.p,{children:"It only takes a few steps to create a simple web app that queries the Azure Machine Learning endpoint, retrieves predictions, and displays the resulting prediction in a graph. Let\u2019s dive in!"}),"\n",(0,i.jsx)(t.p,{children:"Start by creating a new folder for your web application. Then, create these files and folders in it:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"/your-flask-app\r\n\u202f\u202f\u202f /templates\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f index.html\r\n\u202f\u202f\u202f app.py\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"app.py"})," file is the backbone of the Flask application. So, add the following code to it:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"from flask import Flask, render_template, request\r\nimport requests\r\nimport json\r\nimport matplotlib.pyplot as plt\r\nimport io\r\nimport base64\r\nfrom datetime import datetime, timedelta\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"app = Flask(__name__)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"# Replace with your actual Azure ML endpoint and key\r\nscoring_uri = '<your_azure_ml_endpoint>'\r\napi_key = '<your_api_key>'\u202f # Replace with your actual key if needed\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"def generate_future_dates(start_date, periods=3, freq='M'):\r\n\u202f\u202f\u202f # Generate future dates for the next 'periods' months\r\n\u202f\u202f\u202f future_dates = [(start_date + timedelta(days=30 * i)).strftime('%Y%m') for i in range(1, periods + 1)]\r\n\u202f\u202f\u202f return future_dates\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"def get_predictions(dates):\r\n\u202f\u202f\u202f # Prepare the data in JSON format\r\n\u202f\u202f\u202f data = {\"data\": [[date] for date in dates]}\r\n\u202f\u202f\u202f headers = {'Content-Type': 'application/json'}\r\n\u202f\u202f\u202f if api_key:\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f headers['Authorization'] = f'Bearer {api_key}'\r\n\r\n\u202f\u202f\u202f # Send the request to the Azure ML endpoint\r\n\u202f\u202f\u202f response = requests.post(scoring_uri, json=data, headers=headers)\r\n\u202f\u202f\u202f if response.status_code == 200:\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f return response.json()\r\n\u202f\u202f\u202f else:\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f raise Exception(f\"Failed to fetch prediction: {response.text}\")\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"@app.route('/', methods=['GET', 'POST'])\r\ndef index():\r\n\u202f\u202f\u202f graph_url = None\r\n\u202f\u202f\u202f if request.method == 'POST':\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f start_date = datetime.utcnow()\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f future_dates = generate_future_dates(start_date)\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f predictions = get_predictions(future_dates)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\u202f\u202f\u202f\u202f\u202f\u202f\u202f # Plotting the predictions\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.figure(figsize=(10, 5))\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.plot(future_dates, predictions, marker='o', linestyle='-')\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.title('Future Price Predictions for Jackets')\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.xlabel('Date (YYYYMM)')\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.ylabel('Predicted Price')\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.grid(True)\r\n\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f # Save plot to a BytesIO buffer\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f img = io.BytesIO()\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.savefig(img, format='png', bbox_inches='tight')\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f img.seek(0)\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f graph_url = base64.b64encode(img.getvalue()).decode('utf8')\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f plt.close()\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\u202f\u202f\u202f return render_template('index.html', graph_url=graph_url)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"if __name__ == '__main__':\r\n\u202f\u202f\u202f app.run(debug=True)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This simple Flask app accepts incoming requests and queries the Azure Machine Learning endpoint for the next few months of price forecasts for jackets. When it receives the predictions, it generates a graph using ",(0,i.jsx)(t.code,{children:"matplotlib"}),", encoding it with base64 so it can display it in the HTML template. In a larger app, you could save the image to disk and then load it in the web page instead of base64 encoding it\u2014but we\u2019ve skipped that here to keep things simple."]}),"\n",(0,i.jsxs)(t.p,{children:["Next, create an ",(0,i.jsx)(t.code,{children:"index.html"})," file in the templates directory. Add the following code for the user interface:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n\u202f\u202f\u202f <meta charset="UTF-8">\r\n\u202f\u202f\u202f <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n\u202f\u202f\u202f <title>Price Forecast Visualization</title>\r\n\u202f\u202f\u202f \x3c!-- Load Tailwind CSS from CDN --\x3e\r\n\u202f\u202f\u202f <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">\r\n</head>\r\n<body class="bg-gray-100 flex flex-col justify-center items-center min-h-screen">\r\n\u202f\u202f\u202f <div class="w-full bg-blue-800 text-white">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f <div class="container mx-auto py-4">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f <h1 class="text-center text-xl md:text-3xl font-bold">Price Forecast for Jackets</h1>\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f </div>\r\n\u202f\u202f\u202f </div>\r\n\r\n\u202f\u202f\u202f <div class="mt-8 mb-4">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f <form method="post">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f Get Future Price Predictions\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f </button>\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f </form>\r\n\u202f\u202f\u202f </div>\r\n\r\n\u202f\u202f\u202f {% if graph_url %}\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f <div class="shadow-xl bg-white rounded-lg p-8">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f <h2 class="text-lg md:text-xl font-semibold mb-4 text-center">Price Prediction Graph</h2>\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f <div class="flex justify-center">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f <img src="data:image/png;base64,{{ graph_url }}" alt="Price Prediction Graph" class="max-w-full h-auto rounded-lg">\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f\u202f </div>\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f </div>\r\n\u202f\u202f\u202f {% endif %}\r\n</body>\r\n</html>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["To run your Flask app, navigate to the directory containing your ",(0,i.jsx)(t.code,{children:"app.py"})," file and execute the following command:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"flask run\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Your web application should now be accessible at ",(0,i.jsx)(t.code,{children:"http://127.0.0.1:5000"}),". Users can input feature data, submit it, and see both the predicted price and a simple graph comparing the current and predicted prices."]}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsxs)(t.p,{children:["Check out the ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"https://aka.ms/intelligent-apps/ate-cosmos?ocid=buildia24_60days_blogs",children:"Azure Cosmos DB Ask The Expert"})})," session to learn how to build RAG solutions, manage chat history by seamlessly connecting with ",(0,i.jsx)(t.em,{children:"Azure OpenAI"}),", as well as explore the power of ",(0,i.jsx)(t.em,{children:"Azure Cosmos DB's copilot"}),"."]}),(0,i.jsx)(t.p,{children:"The experts also cover how to seamlessly integrate your operational and transactional data with AI frameworks and sdks like Semantic Kernel, Langchain, and LlamaIndex."})]}),"\n",(0,i.jsx)(t.h3,{id:"deploying-to-azure-kubernetes-service-aks",children:"Deploying to Azure Kubernetes Service (AKS)"}),"\n",(0,i.jsx)(t.p,{children:"Running locally is great, but in production, you\u2019ll probably want to deploy to the cloud. Fortunately, Azure makes this easy. Let\u2019s review how to deploy your Flask app using AKS."}),"\n",(0,i.jsx)(t.p,{children:"First, you need to containerize the Flask app and push it to an Azure Container Registry. Then, you\u2019ll create an AKS cluster and deploy the container image to it."}),"\n",(0,i.jsx)(t.h4,{id:"create-a-dockerfile",children:"Create a Dockerfile"}),"\n",(0,i.jsxs)(t.p,{children:["Start by creating a file named ",(0,i.jsx)(t.code,{children:"Dockerfile"})," in the Flask app\u2019s root folder. Add the following contents:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"FROM python:3.11-slim\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"WORKDIR /usr/src/app\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"RUN pip install --no-cache-dir Flask\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"COPY . .\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'CMD ["flask", "run"]\n'})}),"\n",(0,i.jsx)(t.h4,{id:"create-a-container-registry",children:"Create a Container Registry"}),"\n",(0,i.jsx)(t.p,{children:"Next, create a container registry to store the container image. Use the Azure CLI to create a new resource group if you don\u2019t already have one you\u2019d like to use:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"az group create --name my-container-resources --location eastus\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then, create a container registry in the resource group:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"az acr create --resource-group my-container-resources --name my-registry --sku Basic\n"})}),"\n",(0,i.jsx)(t.p,{children:"You\u2019re now ready to build the container and push it to the registry."}),"\n",(0,i.jsx)(t.h4,{id:"build-and-push-the-container-image",children:"Build and Push the Container Image"}),"\n",(0,i.jsx)(t.p,{children:"Build the container image using the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"docker build -t my-app-image .\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then, push the image to your container registry:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"docker push my-registry.azurecr.io/my-app-image\n"})}),"\n",(0,i.jsx)(t.h4,{id:"create-an-aks-cluster",children:"Create an AKS Cluster"}),"\n",(0,i.jsx)(t.p,{children:"Now, it\u2019s time to create an AKS cluster. Run the following:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"az aks create --name my-aks-cluster --resource-group my-resource-group --node-count 3 --node-vm-size Standard_B2s --location eastus\n"})}),"\n",(0,i.jsx)(t.p,{children:"It may take a few minutes for Azure to spin up your cluster. Once it\u2019s ready, you can deploy the Flask app."}),"\n",(0,i.jsx)(t.h4,{id:"deploy-the-application-to-aks",children:"Deploy the Application to AKS"}),"\n",(0,i.jsxs)(t.p,{children:["Create a Kubernetes deployment file named ",(0,i.jsx)(t.code,{children:"deployment.yaml"})," in the project\u2019s root folder with the following contents. Update the image field to match the name of your registry and container image."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"apiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n\u202f name: my-app-deployment\r\nspec:\r\n\u202f replicas: 1\r\n\u202f selector:\r\n\u202f\u202f\u202f matchLabels:\r\n\u202f\u202f\u202f\u202f\u202f app: my-app\r\n\u202f template:\r\n\u202f\u202f\u202f metadata:\r\n\u202f\u202f\u202f\u202f\u202f labels:\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f app: my-app\r\n\u202f\u202f\u202f spec:\r\n\u202f\u202f\u202f\u202f\u202f containers:\r\n\u202f\u202f\u202f\u202f\u202f - name: my-app\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f image: my-registry.azurecr.io/my-app-image\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f ports:\r\n\u202f\u202f\u202f\u202f\u202f\u202f\u202f - containerPort: 5000\n"})}),"\n",(0,i.jsx)(t.p,{children:"Finally, deploy the application to the AKS cluster using the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"kubectl apply -f deployment.yaml\n"})}),"\n",(0,i.jsx)(t.h4,{id:"verify-the-deployment",children:"Verify the Deployment"}),"\n",(0,i.jsx)(t.p,{children:"Once deployed, verify that the application is running using the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"kubectl get pods\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You should see a pod named ",(0,i.jsx)(t.code,{children:"my-app"})," in the ",(0,i.jsx)(t.code,{children:"Running"})," state."]}),"\n",(0,i.jsx)(t.p,{children:"To access the application, port-forward the service using the following command:\u202f"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"kubectl port-forward svc/my-app-service 5000:5000\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Finally, navigate to ",(0,i.jsx)(t.code,{children:"http://localhost:5000"})," in a web browser to verify the application is running."]}),"\n",(0,i.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"In the final part of this series, you learned how to create a simple Flask web app that interacts with the Azure Machine Learning endpoint to provide real-time price predictions and visualize them. By integrating cloud-based artificial intelligence (AI) models with a web interface like this, businesses can dynamically adjust their pricing\u2014helping them remain competitive and stand out from the rest."}),"\n",(0,i.jsxs)(t.p,{children:["If you like what you\u2019ve seen in this series, try the ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"https://aka.ms/intelligent-apps/csc",children:"Intelligent Apps Cloud Skill Challenge"})}),". You can also register for ",(0,i.jsxs)(t.strong,{children:["AKS ",(0,i.jsx)(t.a,{href:"https://aka.ms/aks-day",children:"Customer"})," and ",(0,i.jsx)(t.a,{href:"https://aka.ms/aks-lab-day",children:"Lab"})," Days"]})," at the premier conference for cloud-native technologies, ",(0,i.jsx)(t.em,{children:"KubeCon EU 2024"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},52514:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/3-3-1-af19fe2f48ffe5dbb5ae7a93b6031151.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var i=n(67294);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);