"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91479],{28242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=n(85893),r=n(11151);const a={date:"2024-04-08T09:05",slug:"personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2",title:"7.2 Personalizing Education with Generative AI and Retrieval Augmented Generation Part 2",authors:["cnteam"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","60-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],image:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png",description:"In this three-part series, you\u2019ll use Azure Container Apps, Azure OpenAI Service, and Retrieval Augmented Generation to create a personal tutor chatbot that dynamically adjusts educational materials and quizzes based on user interactions. This article shows how to set up the core Azure AI services required to build your Intelligent App.",tags:["Build-Intelligent-Apps","60-days-of-IA","learn-live","hack-together","community-buzz","ask-the-expert","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},o=void 0,s={permalink:"/Cloud-Native/60DaysOfIA/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2",source:"@site/blog-60daysofIA/2024-04-08/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2.md",title:"7.2 Personalizing Education with Generative AI and Retrieval Augmented Generation Part 2",description:"In this three-part series, you\u2019ll use Azure Container Apps, Azure OpenAI Service, and Retrieval Augmented Generation to create a personal tutor chatbot that dynamically adjusts educational materials and quizzes based on user interactions. This article shows how to set up the core Azure AI services required to build your Intelligent App.",date:"2024-04-08T09:05:00.000Z",formattedDate:"April 8, 2024",tags:[{label:"Build-Intelligent-Apps",permalink:"/Cloud-Native/60DaysOfIA/tags/build-intelligent-apps"},{label:"60-days-of-IA",permalink:"/Cloud-Native/60DaysOfIA/tags/60-days-of-ia"},{label:"learn-live",permalink:"/Cloud-Native/60DaysOfIA/tags/learn-live"},{label:"hack-together",permalink:"/Cloud-Native/60DaysOfIA/tags/hack-together"},{label:"community-buzz",permalink:"/Cloud-Native/60DaysOfIA/tags/community-buzz"},{label:"ask-the-expert",permalink:"/Cloud-Native/60DaysOfIA/tags/ask-the-expert"},{label:"azure-kubernetes-service",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-kubernetes-service"},{label:"azure-functions",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-functions"},{label:"azure-openai",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-openai"},{label:"azure-container-apps",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-container-apps"},{label:"azure-cosmos-db",permalink:"/Cloud-Native/60DaysOfIA/tags/azure-cosmos-db"},{label:"github-copilot",permalink:"/Cloud-Native/60DaysOfIA/tags/github-copilot"},{label:"github-codespaces",permalink:"/Cloud-Native/60DaysOfIA/tags/github-codespaces"},{label:"github-actions",permalink:"/Cloud-Native/60DaysOfIA/tags/github-actions"}],readingTime:9.25,hasTruncateMarker:!1,authors:[{name:"#60Days Of IA",title:"BuildIA Content Team",url:"https://azure.github.io/Cloud-Native/Build-IA/",imageURL:"https://azure.github.io/Cloud-Native/img/logo-2024.png",key:"cnteam"}],frontMatter:{date:"2024-04-08T09:05",slug:"personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2",title:"7.2 Personalizing Education with Generative AI and Retrieval Augmented Generation Part 2",authors:["cnteam"],draft:!1,hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:3,keywords:["Cloud","Data","AI","AI/ML","intelligent apps","cloud-native","60-days","enterprise apps","digital experiences","app modernization","serverless","ai apps"],image:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png",description:"In this three-part series, you\u2019ll use Azure Container Apps, Azure OpenAI Service, and Retrieval Augmented Generation to create a personal tutor chatbot that dynamically adjusts educational materials and quizzes based on user interactions. This article shows how to set up the core Azure AI services required to build your Intelligent App.",tags:["Build-Intelligent-Apps","60-days-of-IA","learn-live","hack-together","community-buzz","ask-the-expert","azure-kubernetes-service","azure-functions","azure-openai","azure-container-apps","azure-cosmos-db","github-copilot","github-codespaces","github-actions"]},unlisted:!1,prevItem:{title:"7.3 Personalizing Education with Generative AI and Retrieval Augmented Generation Part 3",permalink:"/Cloud-Native/60DaysOfIA/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-3"},nextItem:{title:"7.1 Personalizing Education with Generative AI and Retrieval Augmented Generation Part 1",permalink:"/Cloud-Native/60DaysOfIA/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-1"}},l={authorsImageUrls:[void 0]},d=[{value:"Personalizing Education with Generative AI and Retrieval Augmented Generation Part 2: Creating the Chatbot",id:"personalizing-education-with-generative-ai-and-retrieval-augmented-generation-part-2-creating-the-chatbot",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Code a Web Interface for Your Personal Tutor",id:"code-a-web-interface-for-your-personal-tutor",level:3},{value:"Retrieving API Keys and Endpoints",id:"retrieving-api-keys-and-endpoints",level:4},{value:"Create the Python App",id:"create-the-python-app",level:3},{value:"Adding Libraries",id:"adding-libraries",level:4},{value:"Retrieving Environment Variables",id:"retrieving-environment-variables",level:4},{value:"Setting Up the Chatbot Logic",id:"setting-up-the-chatbot-logic",level:4},{value:"Running the Chatbot App",id:"running-the-chatbot-app",level:4},{value:"Next Steps",id:"next-steps",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Head:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a,{children:[(0,i.jsx)("meta",{property:"og:url",content:"https://azure.github.io/cloud-native/60daysofia/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2"}),(0,i.jsx)("meta",{property:"og:type",content:"website"}),(0,i.jsx)("meta",{property:"og:title",content:"Build Intelligent Apps | AI Apps on Azure"}),(0,i.jsx)("meta",{property:"og:description",content:"In this three-part series, you\u2019ll use Azure Container Apps, Azure OpenAI Service, and Retrieval Augmented Generation to create a personal tutor chatbot that dynamically adjusts educational materials and quizzes based on user interactions. This article shows how to set up the core Azure AI services required to build your Intelligent App."}),(0,i.jsx)("meta",{property:"og:image",content:"https://github.com/Azure/Cloud-Native/blob/main/website/static/img/ogImage.png"}),(0,i.jsx)("meta",{name:"twitter:url",content:"https://azure.github.io/Cloud-Native/60daysofIA/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2"}),(0,i.jsx)("meta",{name:"twitter:title",content:"Build Intelligent Apps | AI Apps on Azure"}),(0,i.jsx)("meta",{name:"twitter:description",content:"Azure and platform engineering pave the way for the efficient development, deployment, and maintenance of Intelligent Apps, triumphing over traditional approaches."}),(0,i.jsx)("meta",{name:"twitter:image",content:"https://azure.github.io/Cloud-Native/img/ogImage.png"}),(0,i.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,i.jsx)("meta",{name:"twitter:creator",content:"@devanshidiaries"}),(0,i.jsx)("link",{rel:"canonical",href:"https://azure.github.io/Cloud-Native/60daysofIA/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-2"})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Graphic with a chat bubble-meets-robot head in the top right corner. At the bottom of the graphic is text that reads, &quot;Personalizing Education with Generative AI and Retrieval Augmented Generation: Creating the Chatbot.&quot;",src:n(69239).Z+"",width:"624",height:"351"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"In this three-part series, you\u2019ll use Azure Container Apps, Azure OpenAI Service, and Retrieval Augmented Generation to create a personal tutor chatbot that dynamically adjusts educational materials and quizzes based on user interactions. This article walks you through building the chatbot application\u2019s logic."})}),"\n",(0,i.jsx)(t.h2,{id:"personalizing-education-with-generative-ai-and-retrieval-augmented-generation-part-2-creating-the-chatbot",children:"Personalizing Education with Generative AI and Retrieval Augmented Generation Part 2: Creating the Chatbot"}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.a,{href:"https://azure.github.io/cloud-native/60daysofia/personalizing-education-with-generative-ai-and-retrieval-augmented-generation-1",children:"first article"})," of this series, you set up essential Azure services and prepared your knowledge base. Now, you\u2019ll build on this foundation to develop a chatbot that interacts with users and takes the lead in dynamically adjusting educational materials."]}),"\n",(0,i.jsx)(t.p,{children:"Let\u2019s get coding!"}),"\n",(0,i.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(t.p,{children:"To follow this tutorial, ensure you have the following:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["An Azure subscription with access to the ",(0,i.jsx)(t.a,{href:"https://azure.microsoft.com/products/ai-services/openai-service?ocid=buildia24_60days_blogs",children:"Azure OpenAI Service"})]}),"\n",(0,i.jsx)(t.li,{children:"Access to the Azure services set up in Part 1"}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://www.python.org/downloads/",children:"Python"})," 3.10 or later"]}),"\n",(0,i.jsxs)(t.li,{children:["A ",(0,i.jsx)(t.a,{href:"https://streamlit.io/",children:"Streamlit"})," account. Streamlit is an open-source Python framework that supports machine learning (ML) tasks."]}),"\n",(0,i.jsxs)(t.li,{children:["A code editor or integrated development environment (IDE), like ",(0,i.jsx)(t.a,{href:"https://code.visualstudio.com/download",children:"Visual Studio Code"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For a preview of the project, check out the ",(0,i.jsx)(t.a,{href:"https://github.com/contentlab-io/Personalizing-Education-with-Generative-AI-and-RAG",children:"complete code"})," for this tutorial."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Checkout the demo bytes for ",(0,i.jsx)(t.a,{href:"https://developer.microsoft.com/en-us/reactor/series/S-1308/?wt.mc_id=blog_S-1308_webpage_reactor&ocid=buildia24_60days_blogs",children:"Intelligent Apps"})," with Azure Container Apps where the product engineering team gives a walkthrough on using open-source vector databases and building a multi-LLM chat application."]})}),"\n",(0,i.jsx)(t.h3,{id:"code-a-web-interface-for-your-personal-tutor",children:"Code a Web Interface for Your Personal Tutor"}),"\n",(0,i.jsx)(t.p,{children:"In this tutorial, you\u2019ll design a chatbot using Streamlit and the Azure OpenAI Service. This chatbot will:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Ask users for their experience level (beginner, intermediate, or advanced)."}),"\n",(0,i.jsx)(t.li,{children:"Ask a question about the topic based on the user\u2019s experience level. If the user struggles to answer the question correctly, the chatbot will explain what the correct answer is and why."}),"\n",(0,i.jsx)(t.li,{children:"Use Retrieval Augmented Generation (RAG) to access the knowledge base for answers, additional information, and dynamic question generation."}),"\n",(0,i.jsx)(t.li,{children:"Adapt the difficulty of questions based on how the user performs on quizzes."}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"retrieving-api-keys-and-endpoints",children:"Retrieving API Keys and Endpoints"}),"\n",(0,i.jsx)(t.p,{children:"Before you start coding, ensure you have the following credentials, which allow you to connect your application to the Azure OpenAI Service and make a call:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Azure OpenAI endpoint"})," \u2014 Locate your Azure OpenAI service in the Azure portal. Find the endpoint in the ",(0,i.jsx)(t.strong,{children:"Overview"})," section."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Azure OpenAI key"})," \u2014 To retrieve the key, navigate to ",(0,i.jsx)(t.strong,{children:"Keys and Endpoint"})," under ",(0,i.jsx)(t.strong,{children:"Resource Management"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Azure OpenAI deployment ID"})," \u2014 This is the name of the GPT-4 model you deployed in Part 1. You can find this value in the Azure AI Studio under ",(0,i.jsx)(t.strong,{children:"Resource Management"})," > ",(0,i.jsx)(t.strong,{children:"Deployments"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Azure AI Search endpoint"})," \u2014 Find this value by opening your Azure AI Search service from the Azure portal and locating the ",(0,i.jsx)(t.strong,{children:"URL"})," value in the ",(0,i.jsx)(t.strong,{children:"Overview"})," section."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Azure AI Search key"})," \u2014 Navigate to ",(0,i.jsx)(t.strong,{children:"Settings"})," > ",(0,i.jsx)(t.strong,{children:"Keys"})," in your Azure AI Search resource to find this value."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Azure AI Search index"})," \u2014 This value is the name of your Azure AI Search index. You can find it in the ",(0,i.jsx)(t.strong,{children:"Overview"})," section of your Azure AI Search resource in the Azure portal."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Once you have the values for all the above variables, export them as environment variables. Set up your Python project by creating a new directory. From this directory, run the following commands in the terminal, replacing the placeholders with the values:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"export AOAIEndpoint=<Azure OpenAI Endpoint> \r\nexport AOAIKey=<Azure OpenAI Key> \r\nexport AOAIDeploymentId=<Azure OpenAI Deployment ID> \r\nexport SearchEndpoint=<Search Endpoint> \r\nexport SearchKey=<Search Key> \r\nexport SearchIndex=<Search Index> \n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Note:"})," The method will vary slightly based on your operating system."]}),"\n",(0,i.jsx)(t.h3,{id:"create-the-python-app",children:"Create the Python App"}),"\n",(0,i.jsxs)(t.p,{children:["Next, you\u2019ll build the chatbot. In your project directory, create a new file named ",(0,i.jsx)(t.code,{children:"main.py"}),". This will be the heart of your application."]}),"\n",(0,i.jsx)(t.h4,{id:"adding-libraries",children:"Adding Libraries"}),"\n",(0,i.jsxs)(t.p,{children:["A couple of libraries are essential to build your chatbot. In your terminal or command prompt, install ",(0,i.jsx)(t.code,{children:"streamlit"})," and ",(0,i.jsx)(t.code,{children:"openai"})," using a package manager, such as pip."]}),"\n",(0,i.jsxs)(t.p,{children:["Start by creating a function, ",(0,i.jsx)(t.code,{children:"read_markdown_file"}),", to load and read the course content from different existing ",(0,i.jsx)(t.code,{children:".md"})," files (",(0,i.jsx)(t.a,{href:"https://github.com/contentlab-io/Personalizing-Education-with-Generative-AI-and-RAG/blob/main/basic_python.md",children:(0,i.jsx)(t.code,{children:"basic_python.md"})}),", ",(0,i.jsx)(t.a,{href:"https://github.com/contentlab-io/Personalizing-Education-with-Generative-AI-and-RAG/blob/main/intermediate_python.md",children:(0,i.jsx)(t.code,{children:"intermediate_python.md"})}),", ",(0,i.jsx)(t.a,{href:"https://github.com/contentlab-io/Personalizing-Education-with-Generative-AI-and-RAG/blob/main/advanced_python.md",children:(0,i.jsx)(t.code,{children:"advanced_python.md"})}),"). You\u2019ll display the course content using ",(0,i.jsx)(t.code,{children:"streamlit"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'import streamlit as st \r\nfrom pathlib import Path \r\nimport openai  # We\'ll configure OpenAI access soon \r\n\r\n# Function to read course content \r\ndef read_markdown_file(markdown_file): \r\n    """Reads a Markdown file (.md) and returns its contents as text.""" \r\n    return Path(markdown_file).read_text() \r\n\r\n# Welcome Message \r\nst.markdown("""Welcome to this e-learning course on Python programming!  \r\n               This course is designed for learners of all levels. Whether you\'re  \r\n               just starting out or want to master advanced concepts, our adaptive  \r\n               system will tailor lessons and quizzes to your needs.""") \r\n\r\n# Tabs for Skill Levels \r\ntab1, tab2, tab3 = st.tabs(["Beginner", "Intermediate", "Advanced"]) \r\n\r\n# Load Course Content (You\'ll need to create these .md files) \r\nwith tab1: \r\n   st.header("Beginner") \r\n   st.markdown(read_markdown_file("beginner_python.md")) \r\n\r\nwith tab2: \r\n   st.header("Intermediate") \r\n   st.markdown(read_markdown_file("intermediate_python.md")) \r\n\r\nwith tab3: \r\n   st.header("Advanced") \r\n   st.markdown(read_markdown_file("advanced_python.md")) \n'})}),"\n",(0,i.jsx)(t.h4,{id:"retrieving-environment-variables",children:"Retrieving Environment Variables"}),"\n",(0,i.jsx)(t.p,{children:"Next, retrieve the environment variables you set earlier and initialize the client object, establishing the connection to the Azure OpenAI Service:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'from openai import AzureOpenAI \r\n\r\nendpoint = os.environ.get("AOAIEndpoint") \r\napi_key = os.environ.get("AOAIKey") \r\ndeployment = os.environ.get("AOAIDeploymentId") \r\n\r\nclient = AzureOpenAI( \r\n    base_url=f"{endpoint}/openai/deployments/{deployment}/extensions", \r\n    api_key=api_key, \r\n    api_version="2023-08-01-preview", \r\n) \n'})}),"\n",(0,i.jsx)(t.h4,{id:"setting-up-the-chatbot-logic",children:"Setting Up the Chatbot Logic"}),"\n",(0,i.jsx)(t.p,{children:"Lastly, set up the logic for the chatbot:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'# Set a default model \r\nif "openai_model" not in st.session_state: \r\n    st.session_state["openai_model"] = "gpt-4" \r\n\r\n# Initialize chat history \r\nif "messages" not in st.session_state: \r\n    st.session_state.messages = [] \r\n    st.session_state.messages= [{"role": "assistant", "content": """Hi! I am your Python Programming instructor. To get started, please share your level of experience with Python. Choose from the following options: Beginner, Intermediate, or Advanced."""}] \r\n\r\n# Display chat messages from history on app rerun \r\nfor message in st.session_state.messages: \r\n    with st.chat_message(message["role"]): \r\n        st.markdown(message["content"]) \r\n\r\n# React to user input \r\nif prompt:= st.chat_input("Ask something!"): \r\n    # Display user message in chat message container \r\n    st.chat_message("user").markdown(prompt) \r\n    # Add user message to chat history \r\n    st.session_state.messages.append({"role": "user", "content": prompt}) \r\n\r\n    try: \r\n        # Display assistant response in chat message container \r\n        with st.chat_message("assistant"): \r\n            completion = client.chat.completions.create( \r\n                model = deployment, \r\n                messages = [ \r\n                    {"role": m["role"], "content": m["content"]} \r\n                    for m in st.session_state.messages \r\n                ], \r\n            extra_body={ \r\n            "dataSources": [ \r\n                { \r\n                    "type": "AzureCognitiveSearch", \r\n                    "parameters": { \r\n                        "endpoint": os.environ["SearchEndpoint"], \r\n                        "key": os.environ["SearchKey"], \r\n                        "indexName": os.environ["SearchIndex"], \r\n                        "queryType": "vector", \r\n                        "semanticConfiguration": "default", \r\n                        "inScope": True, \r\n                        "filter": None, \r\n                        "strictness": 3, \r\n                        "topNDocuments": 5, \r\n                        "embeddingDeploymentName": "embedding-model", \r\n                        "roleInformation": """You are a dynamic Python programming instructor. Your role is to assess the user\'s knowledge and provide a tailored learning experience. Based on the user\'s response, you will take a quiz on a specific Python topic suitable for their level. If the user answers correctly, increase the difficulty of subsequent questions. If incorrect, provide hints, then either simplify the question or present a similar one at the same level. Your responses should evolve based on the user\'s experience level and their performance on the quizzes.""" \r\n                        } \r\n                } \r\n                ]  \r\n                }, \r\n                n = 1, \r\n                temperature=0, \r\n                top_p=1, \r\n                max_tokens=200, \r\n                stop=[], \r\n                stream=False \r\n            ) \r\n\r\n            response = completion.choices[0].message.content \r\n            st.markdown(response) \r\n\r\n        # Add assistant response to chat history \r\n        st.session_state.messages.append({"role": "assistant", "content": response}) \r\n\r\n    except Exception as e: \r\n        st.error(f"An error occurred: {e}") \n'})}),"\n",(0,i.jsx)(t.p,{children:"There\u2019s a lot of code here, so let\u2019s review the chatbot logic code step by step:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Streamlit uses the ",(0,i.jsx)(t.code,{children:"st.session_state"})," variable to set the session state and preserve information across interactions with your app. The ",(0,i.jsx)(t.code,{children:"messages"})," variable inside ",(0,i.jsx)(t.code,{children:"st.session_state"}),' maintains the chat history as a list of dictionaries, each with a "',(0,i.jsx)(t.code,{children:"role"}),'" (',(0,i.jsx)(t.code,{children:"user"})," or ",(0,i.jsx)(t.code,{children:"assistant"}),') and "',(0,i.jsx)(t.code,{children:"content"}),'".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"st.chat_input"})," handles user input and displays it within the conversation."]}),"\n",(0,i.jsxs)(t.li,{children:["You use the ",(0,i.jsx)(t.code,{children:"chat.completions"})," API to make requests to your Azure OpenAI deployment. The chat history is included for context using the ",(0,i.jsx)(t.code,{children:"messages"})," parameter."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"extra_body"})," parameter sets up RAG with configuration details for the Azure AI Search instance, embedding model, and instructions for the AI\u2019s behavior. The parameters within the ",(0,i.jsx)(t.code,{children:"extra_body"})," include:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"type"}),", specifying the knowledge source as \u201cAzureCognitiveSearch\u201d (now known as ",(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/azure/search/whats-new?ocid=buildia24_60days_blogs#new-service-name",children:"Azure AI Search"}),")."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"parameters"}),", providing essential details like your Azure AI Search endpoint, API key, index name, and various query parameters to target the appropriate information."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"roleInformation"})," section within ",(0,i.jsx)(t.code,{children:"extra_body"}),", guiding the model\u2019s behavior. It explains the role of a dynamic Python instructor, with instructions on assessing the user\u2019s knowledge, conducting quizzes, and adapting the learning experience."]}),"\n",(0,i.jsx)(t.li,{children:"The temperature parameter, controlling the level of randomness and creativity injected into the model\u2019s response. By setting this to 0, the model favors words with the highest probabilities, leading to more predictable, safe, and potentially generic responses."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This code snippet only works if you\u2019ve set up an Azure AI Search instance and correctly configured your environment variables (",(0,i.jsx)(t.code,{children:"SearchEndpoint"}),", ",(0,i.jsx)(t.code,{children:"SearchKey"}),", and ",(0,i.jsx)(t.code,{children:"SearchIndex"}),")."]}),"\n",(0,i.jsx)(t.h4,{id:"running-the-chatbot-app",children:"Running the Chatbot App"}),"\n",(0,i.jsx)(t.p,{children:"To start your web server locally, run the following command in your terminal:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"python -m streamlit run main.py\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The Personal Python Tutor web app opens with an introduction and asks the user to select their experience level: Beginner, Intermediate, or Advanced. Below that is a heading that reflects the selected experience level (here, Beginner) with a &quot;What is Python&quot; definition and a list of key features. At the bottom of the page is a space for the user to ask the chatbot a question.",src:n(42302).Z+"",width:"625",height:"347"})}),"\n",(0,i.jsx)(t.p,{children:"Upon launching the app, you\u2019ll see a welcome message and three tabs: Beginner, Intermediate, and Advanced. Each tab contains preconfigured course materials sourced from .md files. You can click any tab to access the relevant content."}),"\n",(0,i.jsx)(t.p,{children:"Further down, you\u2019ll find the chatbot interface. The chatbot initiates the conversation by asking you to specify your difficulty level."}),"\n",(0,i.jsx)(t.p,{children:"After you provide your answer, the chatbot will administer a short quiz to assess your knowledge at that level. If you answer correctly, the app will progressively increase the difficulty of subsequent questions."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The chatbot provides a beginner-level quiz about a Python output.",src:n(23724).Z+"",width:"588",height:"330"})}),"\n",(0,i.jsx)(t.h3,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(t.p,{children:"In this tutorial, you set up your chatbot interface using Streamlit, connected it to Azure OpenAI, and implemented the core conversation logic. Your chatbot is in good shape and ready for action! In the final part of this series, you\u2019ll deploy your app as a web application using Azure Container Apps. See you there!"}),"\n",(0,i.jsxs)(t.p,{children:["Want to continue your learning journey? We\u2019re glad to hear it \u2014 and we have a few ways for you to stay engaged. Watch the first demo byte covering ",(0,i.jsx)(t.a,{href:"https://developer.microsoft.com/reactor/series/S-1308/?wt.mc_id=blog_S-1308_webpage_reactor&ocid=buildia24_60days_blogs",children:"Intelligent Apps with Azure Container Apps"})," using Qdrant and register for the upcoming live episode for the ",(0,i.jsx)(t.a,{href:"https://developer.microsoft.com/reactor/events/22146/?ocid=buildia24_60days_blogs",children:"Serverless on Azure Learn Live"})," series."]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},69239:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/7-2-1-d739b8be7f6816acd1e41749ee52ae35.jpeg"},42302:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/7-2-2-7174f64f33c7595e0ad70b685650abfb.png"},23724:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/7-2-3-d95b2a0a1bedc16915c7289fc3b0bcdd.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>o});var i=n(67294);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);